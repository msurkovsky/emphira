inline Exception(int obj) : the_real_exception(obj) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: the_real_exception([B1.2]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline Exception() : the_real_exception(0) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 0
   2: the_real_exception([B1.1]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~MPI::Exception() noexcept
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

Exception(const MPI::Exception &obj) : the_real_exception(obj.the_real_exception) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1].the_real_exception
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: the_real_exception([B1.3]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

MPI::Exception &operator=(const MPI::Exception &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1].the_real_exception
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: this
   5: [B1.4]->the_real_exception
   6: [B1.5] = [B1.3]
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator==(const MPI::Exception &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_exception
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: obj
   5: [B1.4].the_real_exception
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B1.3] == [B1.6]
   8: return ([B1.7]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator!=(const MPI::Exception &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_exception
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: obj
   5: [B1.4].the_real_exception
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B1.3] != [B1.6]
   8: return ([B1.7]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline operator int *()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_exception
   3: &[B1.2]
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline operator int() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_exception
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

MPI::Exception &operator=(const int &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: this
   4: [B1.3]->the_real_exception
   5: [B1.4] = [B1.2]
   6: this
   7: *[B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int Get_error_code()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_exception
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, int)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int Get_error_class()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: MPI::Get_error_class
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int))
   3: this
   4: [B1.3]->the_real_exception
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.2]([B1.5])
   7: return [B1.6];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

const char *Get_error_string()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: int len;
   2: MPI_Error_string
   3: [B1.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, char *, int *))
   4: this
   5: [B1.4]->the_real_exception
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, int)
   7: this
   8: [B1.7]->the_error_message
   9: [B1.8] (ImplicitCastExpr, ArrayToPointerDecay, char *)
  10: len
  11: &[B1.10]
  12: [B1.3]([B1.6], [B1.9], [B1.11])
  13: this
  14: [B1.13]->the_error_message
  15: [B1.14] (ImplicitCastExpr, ArrayToPointerDecay, char *)
  16: [B1.15] (ImplicitCastExpr, NoOp, const char *)
  17: return [B1.16];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline Datatype(MPI_Datatype obj) : the_real_datatype(obj) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
   3: the_real_datatype([B1.2]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline Datatype() : the_real_datatype((MPI_Datatype)201326592) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 201326592
   2: (MPI_Datatype)[B1.1] (CStyleCastExpr, NoOp, MPI_Datatype)
   3: the_real_datatype(([B1.2])) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~MPI::Datatype() noexcept
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

Datatype(const MPI::Datatype &obj) : the_real_datatype(obj.the_real_datatype) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1].the_real_datatype
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
   4: the_real_datatype([B1.3]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

MPI::Datatype &operator=(const MPI::Datatype &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1].the_real_datatype
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
   4: this
   5: [B1.4]->the_real_datatype
   6: [B1.5] = [B1.3]
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator==(const MPI::Datatype &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_datatype
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
   4: obj
   5: [B1.4].the_real_datatype
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
   7: [B1.3] == [B1.6]
   8: return ([B1.7]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator!=(const MPI::Datatype &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_datatype
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
   4: obj
   5: [B1.4].the_real_datatype
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
   7: [B1.3] != [B1.6]
   8: return ([B1.7]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline operator MPI_Datatype *()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_datatype
   3: &[B1.2]
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline operator MPI_Datatype() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_datatype
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

MPI::Datatype &operator=(const MPI_Datatype &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
   3: this
   4: [B1.3]->the_real_datatype
   5: [B1.4] = [B1.2]
   6: this
   7: *[B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual void Commit()
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: MPIR_Call_world_errhand
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Type_commit
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Datatype *))
   3: this
   4: [B2.3]->the_real_datatype
   5: &[B2.4]
   6: (MPI_Datatype *)[B2.5] (CStyleCastExpr, NoOp, MPI_Datatype *)
   7: [B2.2]([B2.6])
   8: int err = MPI_Type_commit((MPI_Datatype *)&this->the_real_datatype);
   9: err
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B2.10] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.11]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Free()
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: MPIR_Call_world_errhand
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Type_free
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Datatype *))
   3: this
   4: [B2.3]->the_real_datatype
   5: &[B2.4]
   6: (MPI_Datatype *)[B2.5] (CStyleCastExpr, NoOp, MPI_Datatype *)
   7: [B2.2]([B2.6])
   8: int err = MPI_Type_free((MPI_Datatype *)&this->the_real_datatype);
   9: err
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B2.10] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.11]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual MPI::Datatype Create_indexed(int v1, const int *v2, const int *v3) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v5
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Datatype)
   3: [B1.2] (CXXConstructExpr, class MPI::Datatype)
   4: return [B1.3];
   5: [B3.2].~Datatype() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Datatype)
   2: MPI::Datatype v5;
   3: MPI_Type_indexed
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, const int *, const int *, MPI_Datatype, MPI_Datatype *))
   5: v1
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, int)
   7: v2
   8: [B3.7] (ImplicitCastExpr, LValueToRValue, const int *)
   9: (const int *)[B3.8] (CStyleCastExpr, NoOp, const int *)
  10: v3
  11: [B3.10] (ImplicitCastExpr, LValueToRValue, const int *)
  12: (const int *)[B3.11] (CStyleCastExpr, NoOp, const int *)
  13: this
  14: [B3.13]->the_real_datatype
  15: [B3.14] (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  16: (MPI_Datatype)[B3.15] (CStyleCastExpr, NoOp, MPI_Datatype)
  17: v5
  18: [B3.17].the_real_datatype
  19: &([B3.18])
  20: [B3.4]([B3.6], [B3.9], [B3.12], [B3.16], [B3.19])
  21: int err = MPI_Type_indexed(v1, (const int *)v2, (const int *)v3, (MPI_Datatype)this->the_real_datatype, &(v5.the_real_datatype));
  22: err
  23: [B3.22] (ImplicitCastExpr, LValueToRValue, int)
  24: [B3.23] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.24]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual MPI::Datatype Create_contiguous(int v1) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v3
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Datatype)
   3: [B1.2] (CXXConstructExpr, class MPI::Datatype)
   4: return [B1.3];
   5: [B3.2].~Datatype() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Datatype)
   2: MPI::Datatype v3;
   3: MPI_Type_contiguous
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, MPI_Datatype, MPI_Datatype *))
   5: v1
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, int)
   7: this
   8: [B3.7]->the_real_datatype
   9: [B3.8] (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  10: (MPI_Datatype)[B3.9] (CStyleCastExpr, NoOp, MPI_Datatype)
  11: v3
  12: [B3.11].the_real_datatype
  13: &([B3.12])
  14: [B3.4]([B3.6], [B3.10], [B3.13])
  15: int err = MPI_Type_contiguous(v1, (MPI_Datatype)this->the_real_datatype, &(v3.the_real_datatype));
  16: err
  17: [B3.16] (ImplicitCastExpr, LValueToRValue, int)
  18: [B3.17] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.18]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual MPI::Datatype Create_vector(int v1, int v2, int v3) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v5
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Datatype)
   3: [B1.2] (CXXConstructExpr, class MPI::Datatype)
   4: return [B1.3];
   5: [B3.2].~Datatype() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Datatype)
   2: MPI::Datatype v5;
   3: MPI_Type_vector
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, int, int, MPI_Datatype, MPI_Datatype *))
   5: v1
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, int)
   7: v2
   8: [B3.7] (ImplicitCastExpr, LValueToRValue, int)
   9: v3
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, int)
  11: this
  12: [B3.11]->the_real_datatype
  13: [B3.12] (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  14: (MPI_Datatype)[B3.13] (CStyleCastExpr, NoOp, MPI_Datatype)
  15: v5
  16: [B3.15].the_real_datatype
  17: &([B3.16])
  18: [B3.4]([B3.6], [B3.8], [B3.10], [B3.14], [B3.17])
  19: int err = MPI_Type_vector(v1, v2, v3, (MPI_Datatype)this->the_real_datatype, &(v5.the_real_datatype));
  20: err
  21: [B3.20] (ImplicitCastExpr, LValueToRValue, int)
  22: [B3.21] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.22]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

static MPI::Datatype Create_struct(int v1, int v2[], Aint v3[], const MPI::Datatype v4[])
 [B8 (ENTRY)]
   Succs (1): B7

 [B1]
   1: l4
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Datatype *)
   3: delete [] [B1.2]
   4: v5
   5: [B1.4] (ImplicitCastExpr, NoOp, const class MPI::Datatype)
   6: [B1.5] (CXXConstructExpr, class MPI::Datatype)
   7: return [B1.6];
   8: [B7.2].~Datatype() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: MPI_Type_create_struct
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, const int *, const MPI_Aint *, const MPI_Datatype *, MPI_Datatype *))
   3: v1
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: v2
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, int *)
   7: (const int *)[B3.6] (CStyleCastExpr, NoOp, const int *)
   8: v3
   9: [B3.8] (ImplicitCastExpr, LValueToRValue, Aint *)
  10: (const MPI_Aint *)[B3.9] (CStyleCastExpr, NoOp, const MPI_Aint *)
  11: l4
  12: [B3.11] (ImplicitCastExpr, LValueToRValue, MPI_Datatype *)
  13: [B3.12] (ImplicitCastExpr, NoOp, const MPI_Datatype *)
  14: v5
  15: [B3.14].the_real_datatype
  16: &([B3.15])
  17: [B3.2]([B3.4], [B3.7], [B3.10], [B3.13], [B3.16])
  18: int err = MPI_Type_create_struct(v1, (const int *)v2, (const MPI_Aint *)v3, l4, &(v5.the_real_datatype));
  19: err
  20: [B3.19] (ImplicitCastExpr, LValueToRValue, int)
  21: [B3.20] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.21]
   Preds (1): B6
   Succs (2): B2 B1

 [B4]
   1: i4
   2: [B4.1]++
   Preds (1): B5
   Succs (1): B6

 [B5]
   1: v4
   2: [B5.1] (ImplicitCastExpr, LValueToRValue, const class MPI::Datatype *)
   3: i4
   4: [B5.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B5.2][[B5.4]]
   6: [B5.5].the_real_datatype
   7: [B5.6] (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
   8: l4
   9: [B5.8] (ImplicitCastExpr, LValueToRValue, MPI_Datatype *)
  10: i4
  11: [B5.10] (ImplicitCastExpr, LValueToRValue, int)
  12: [B5.9][[B5.11]]
  13: [B5.12] = [B5.7]
   Preds (1): B6
   Succs (1): B4

 [B6]
   1: i4
   2: [B6.1] (ImplicitCastExpr, LValueToRValue, int)
   3: v1
   4: [B6.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B6.2] < [B6.4]
   T: for (...; [B6.5]; ...)
   Preds (2): B4 B7
   Succs (2): B5 B3

 [B7]
   1:  (CXXConstructExpr, class MPI::Datatype)
   2: MPI::Datatype v5;
   3: v1
   4: [B7.3] (ImplicitCastExpr, LValueToRValue, int)
   5: CFGNewAllocator(MPI_Datatype *)
   6: new MPI_Datatype [[B7.4]]
   7: MPI_Datatype *l4 = new MPI_Datatype [v1];
   8: int i4;
   9: 0
  10: i4
  11: [B7.10] = [B7.9]
   Preds (1): B8
   Succs (1): B6

 [B0 (EXIT)]
   Preds (1): B1

virtual int Get_size() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v2
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: int v2;
   2: MPI_Type_size
   3: [B3.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Datatype, int *))
   4: this
   5: [B3.4]->the_real_datatype
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
   7: (MPI_Datatype)[B3.6] (CStyleCastExpr, NoOp, MPI_Datatype)
   8: v2
   9: &[B3.8]
  10: [B3.3]([B3.7], [B3.9])
  11: int err = MPI_Type_size((MPI_Datatype)this->the_real_datatype, &v2);
  12: err
  13: [B3.12] (ImplicitCastExpr, LValueToRValue, int)
  14: [B3.13] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.14]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual void Get_envelope(int &v2, int &v3, int &v4, int &v5) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: MPIR_Call_world_errhand
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Type_get_envelope
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Datatype, int *, int *, int *, int *))
   3: this
   4: [B2.3]->the_real_datatype
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
   6: (MPI_Datatype)[B2.5] (CStyleCastExpr, NoOp, MPI_Datatype)
   7: v2
   8: &[B2.7]
   9: v3
  10: &[B2.9]
  11: v4
  12: &[B2.11]
  13: v5
  14: &[B2.13]
  15: [B2.2]([B2.6], [B2.8], [B2.10], [B2.12], [B2.14])
  16: int err = MPI_Type_get_envelope((MPI_Datatype)this->the_real_datatype, &v2, &v3, &v4, &v5);
  17: err
  18: [B2.17] (ImplicitCastExpr, LValueToRValue, int)
  19: [B2.18] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.19]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual MPI::Datatype Create_hvector(int v1, int v2, Aint v3) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v5
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Datatype)
   3: [B1.2] (CXXConstructExpr, class MPI::Datatype)
   4: return [B1.3];
   5: [B3.2].~Datatype() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Datatype)
   2: MPI::Datatype v5;
   3: MPI_Type_create_hvector
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, int, MPI_Aint, MPI_Datatype, MPI_Datatype *))
   5: v1
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, int)
   7: v2
   8: [B3.7] (ImplicitCastExpr, LValueToRValue, int)
   9: v3
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, Aint)
  11: this
  12: [B3.11]->the_real_datatype
  13: [B3.12] (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  14: (MPI_Datatype)[B3.13] (CStyleCastExpr, NoOp, MPI_Datatype)
  15: v5
  16: [B3.15].the_real_datatype
  17: &([B3.16])
  18: [B3.4]([B3.6], [B3.8], [B3.10], [B3.14], [B3.17])
  19: int err = MPI_Type_create_hvector(v1, v2, v3, (MPI_Datatype)this->the_real_datatype, &(v5.the_real_datatype));
  20: err
  21: [B3.20] (ImplicitCastExpr, LValueToRValue, int)
  22: [B3.21] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.22]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

static MPI::Datatype Match_size(int v1, int v2)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v3
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Datatype)
   3: [B1.2] (CXXConstructExpr, class MPI::Datatype)
   4: return [B1.3];
   5: [B3.2].~Datatype() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Datatype)
   2: MPI::Datatype v3;
   3: MPI_Type_match_size
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, int, MPI_Datatype *))
   5: v1
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, int)
   7: v2
   8: [B3.7] (ImplicitCastExpr, LValueToRValue, int)
   9: v3
  10: [B3.9].the_real_datatype
  11: &([B3.10])
  12: [B3.4]([B3.6], [B3.8], [B3.11])
  13: int err = MPI_Type_match_size(v1, v2, &(v3.the_real_datatype));
  14: err
  15: [B3.14] (ImplicitCastExpr, LValueToRValue, int)
  16: [B3.15] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.16]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual MPI::Datatype Create_resized(const Aint v2, const Aint v3) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v4
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Datatype)
   3: [B1.2] (CXXConstructExpr, class MPI::Datatype)
   4: return [B1.3];
   5: [B3.2].~Datatype() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Datatype)
   2: MPI::Datatype v4;
   3: MPI_Type_create_resized
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Datatype, MPI_Aint, MPI_Aint, MPI_Datatype *))
   5: this
   6: [B3.5]->the_real_datatype
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
   8: (MPI_Datatype)[B3.7] (CStyleCastExpr, NoOp, MPI_Datatype)
   9: v2
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, Aint)
  11: (MPI_Aint)[B3.10] (CStyleCastExpr, NoOp, MPI_Aint)
  12: v3
  13: [B3.12] (ImplicitCastExpr, LValueToRValue, Aint)
  14: (MPI_Aint)[B3.13] (CStyleCastExpr, NoOp, MPI_Aint)
  15: v4
  16: [B3.15].the_real_datatype
  17: &([B3.16])
  18: [B3.4]([B3.8], [B3.11], [B3.14], [B3.17])
  19: int err = MPI_Type_create_resized((MPI_Datatype)this->the_real_datatype, (MPI_Aint)v2, (MPI_Aint)v3, &(v4.the_real_datatype));
  20: err
  21: [B3.20] (ImplicitCastExpr, LValueToRValue, int)
  22: [B3.21] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.22]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual MPI::Datatype Create_indexed_block(int v1, int v2, const int v3[]) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v5
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Datatype)
   3: [B1.2] (CXXConstructExpr, class MPI::Datatype)
   4: return [B1.3];
   5: [B3.2].~Datatype() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Datatype)
   2: MPI::Datatype v5;
   3: MPI_Type_create_indexed_block
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, int, const int *, MPI_Datatype, MPI_Datatype *))
   5: v1
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, int)
   7: v2
   8: [B3.7] (ImplicitCastExpr, LValueToRValue, int)
   9: v3
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, const int *)
  11: (const int *)[B3.10] (CStyleCastExpr, NoOp, const int *)
  12: this
  13: [B3.12]->the_real_datatype
  14: [B3.13] (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  15: (MPI_Datatype)[B3.14] (CStyleCastExpr, NoOp, MPI_Datatype)
  16: v5
  17: [B3.16].the_real_datatype
  18: &([B3.17])
  19: [B3.4]([B3.6], [B3.8], [B3.11], [B3.15], [B3.18])
  20: int err = MPI_Type_create_indexed_block(v1, v2, (const int *)v3, (MPI_Datatype)this->the_real_datatype, &(v5.the_real_datatype));
  21: err
  22: [B3.21] (ImplicitCastExpr, LValueToRValue, int)
  23: [B3.22] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.23]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual Aint Pack_external_size(const char v1[], int v2) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v4
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Aint)
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: MPI_Aint v4;
   2: MPI_Pack_external_size
   3: [B3.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const char *, int, MPI_Datatype, MPI_Aint *))
   4: v1
   5: [B3.4] (ImplicitCastExpr, LValueToRValue, const char *)
   6: v2
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, int)
   8: this
   9: [B3.8]->the_real_datatype
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  11: (MPI_Datatype)[B3.10] (CStyleCastExpr, NoOp, MPI_Datatype)
  12: v4
  13: &[B3.12]
  14: [B3.3]([B3.5], [B3.7], [B3.11], [B3.13])
  15: int err = MPI_Pack_external_size(v1, v2, (MPI_Datatype)this->the_real_datatype, &v4);
  16: err
  17: [B3.16] (ImplicitCastExpr, LValueToRValue, int)
  18: [B3.17] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.18]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

MPI::Datatype Dup() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v2
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Datatype)
   3: [B1.2] (CXXConstructExpr, class MPI::Datatype)
   4: return [B1.3];
   5: [B3.2].~Datatype() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Datatype)
   2: MPI::Datatype v2;
   3: MPI_Type_dup
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Datatype, MPI_Datatype *))
   5: this
   6: [B3.5]->the_real_datatype
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
   8: (MPI_Datatype)[B3.7] (CStyleCastExpr, NoOp, MPI_Datatype)
   9: v2
  10: [B3.9].the_real_datatype
  11: &([B3.10])
  12: [B3.4]([B3.8], [B3.11])
  13: int err = MPI_Type_dup((MPI_Datatype)this->the_real_datatype, &(v2.the_real_datatype));
  14: err
  15: [B3.14] (ImplicitCastExpr, LValueToRValue, int)
  16: [B3.15] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.16]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual MPI::Datatype Create_hindexed(int v1, const int v2[], const Aint v3[]) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v5
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Datatype)
   3: [B1.2] (CXXConstructExpr, class MPI::Datatype)
   4: return [B1.3];
   5: [B3.2].~Datatype() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Datatype)
   2: MPI::Datatype v5;
   3: MPI_Type_create_hindexed
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, const int *, const MPI_Aint *, MPI_Datatype, MPI_Datatype *))
   5: v1
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, int)
   7: v2
   8: [B3.7] (ImplicitCastExpr, LValueToRValue, const int *)
   9: (const int *)[B3.8] (CStyleCastExpr, NoOp, const int *)
  10: v3
  11: [B3.10] (ImplicitCastExpr, LValueToRValue, const Aint *)
  12: (const MPI_Aint *)[B3.11] (CStyleCastExpr, NoOp, const MPI_Aint *)
  13: this
  14: [B3.13]->the_real_datatype
  15: [B3.14] (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  16: (MPI_Datatype)[B3.15] (CStyleCastExpr, NoOp, MPI_Datatype)
  17: v5
  18: [B3.17].the_real_datatype
  19: &([B3.18])
  20: [B3.4]([B3.6], [B3.9], [B3.12], [B3.16], [B3.19])
  21: int err = MPI_Type_create_hindexed(v1, (const int *)v2, (const MPI_Aint *)v3, (MPI_Datatype)this->the_real_datatype, &(v5.the_real_datatype));
  22: err
  23: [B3.22] (ImplicitCastExpr, LValueToRValue, int)
  24: [B3.23] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.24]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual bool Get_attr(int v2, void *v3) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v4
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 0
   4: [B1.2] != [B1.3]
   5: return [B1.4];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: int v4;
   2: MPI_Type_get_attr
   3: [B3.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Datatype, int, void *, int *))
   4: this
   5: [B3.4]->the_real_datatype
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
   7: (MPI_Datatype)[B3.6] (CStyleCastExpr, NoOp, MPI_Datatype)
   8: v2
   9: [B3.8] (ImplicitCastExpr, LValueToRValue, int)
  10: v3
  11: [B3.10] (ImplicitCastExpr, LValueToRValue, void *)
  12: v4
  13: &[B3.12]
  14: [B3.3]([B3.7], [B3.9], [B3.11], [B3.13])
  15: int err = MPI_Type_get_attr((MPI_Datatype)this->the_real_datatype, v2, v3, &v4);
  16: err
  17: [B3.16] (ImplicitCastExpr, LValueToRValue, int)
  18: [B3.17] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.18]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual void Get_true_extent(Aint &v2, Aint &v3) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: MPIR_Call_world_errhand
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Type_get_true_extent
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Datatype, MPI_Aint *, MPI_Aint *))
   3: this
   4: [B2.3]->the_real_datatype
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
   6: (MPI_Datatype)[B2.5] (CStyleCastExpr, NoOp, MPI_Datatype)
   7: v2
   8: &[B2.7]
   9: v3
  10: &[B2.9]
  11: [B2.2]([B2.6], [B2.8], [B2.10])
  12: int err = MPI_Type_get_true_extent((MPI_Datatype)this->the_real_datatype, &v2, &v3);
  13: err
  14: [B2.13] (ImplicitCastExpr, LValueToRValue, int)
  15: [B2.14] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.15]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual MPI::Datatype Create_darray(int v1, int v2, int v3, const int v4[], const int v5[], const int v6[], const int v7[], int v8) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v10
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Datatype)
   3: [B1.2] (CXXConstructExpr, class MPI::Datatype)
   4: return [B1.3];
   5: [B3.2].~Datatype() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Datatype)
   2: MPI::Datatype v10;
   3: MPI_Type_create_darray
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, int, int, const int *, const int *, const int *, const int *, int, MPI_Datatype, MPI_Datatype *))
   5: v1
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, int)
   7: v2
   8: [B3.7] (ImplicitCastExpr, LValueToRValue, int)
   9: v3
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, int)
  11: v4
  12: [B3.11] (ImplicitCastExpr, LValueToRValue, const int *)
  13: (const int *)[B3.12] (CStyleCastExpr, NoOp, const int *)
  14: v5
  15: [B3.14] (ImplicitCastExpr, LValueToRValue, const int *)
  16: (const int *)[B3.15] (CStyleCastExpr, NoOp, const int *)
  17: v6
  18: [B3.17] (ImplicitCastExpr, LValueToRValue, const int *)
  19: (const int *)[B3.18] (CStyleCastExpr, NoOp, const int *)
  20: v7
  21: [B3.20] (ImplicitCastExpr, LValueToRValue, const int *)
  22: (const int *)[B3.21] (CStyleCastExpr, NoOp, const int *)
  23: v8
  24: [B3.23] (ImplicitCastExpr, LValueToRValue, int)
  25: this
  26: [B3.25]->the_real_datatype
  27: [B3.26] (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  28: (MPI_Datatype)[B3.27] (CStyleCastExpr, NoOp, MPI_Datatype)
  29: v10
  30: [B3.29].the_real_datatype
  31: &([B3.30])
  32: [B3.4]([B3.6], [B3.8], [B3.10], [B3.13], [B3.16], [B3.19], [B3.22], [B3.24], [B3.28], [B3.31])
  33: int err = MPI_Type_create_darray(v1, v2, v3, (const int *)v4, (const int *)v5, (const int *)v6, (const int *)v7, v8, (MPI_Datatype)this->the_real_datatype, &(v10.the_real_datatype));
  34: err
  35: [B3.34] (ImplicitCastExpr, LValueToRValue, int)
  36: [B3.35] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.36]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

static MPI::Datatype Create_f90_real(int v1, int v2)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v3
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Datatype)
   3: [B1.2] (CXXConstructExpr, class MPI::Datatype)
   4: return [B1.3];
   5: [B3.2].~Datatype() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Datatype)
   2: MPI::Datatype v3;
   3: MPI_Type_create_f90_real
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, int, MPI_Datatype *))
   5: v1
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, int)
   7: v2
   8: [B3.7] (ImplicitCastExpr, LValueToRValue, int)
   9: v3
  10: [B3.9].the_real_datatype
  11: &([B3.10])
  12: [B3.4]([B3.6], [B3.8], [B3.11])
  13: int err = MPI_Type_create_f90_real(v1, v2, &(v3.the_real_datatype));
  14: err
  15: [B3.14] (ImplicitCastExpr, LValueToRValue, int)
  16: [B3.15] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.16]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual void Get_contents(int v2, int v3, int v4, int v5[], Aint v6[], MPI::Datatype v7[]) const
 [B8 (ENTRY)]
   Succs (1): B7

 [B1]
   1: l7
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Datatype *)
   3: delete [] [B1.2]
   Preds (1): B4
   Succs (1): B0

 [B2]
   1: i7
   2: [B2.1]++
   Preds (1): B3
   Succs (1): B4

 [B3]
   1: l7
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, MPI_Datatype *)
   3: i7
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B3.2][[B3.4]]
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
   7: v7
   8: [B3.7] (ImplicitCastExpr, LValueToRValue, class MPI::Datatype *)
   9: i7
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B3.8][[B3.10]]
  12: [B3.11].the_real_datatype
  13: [B3.12] = [B3.6]
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: i7
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: v4
   4: [B4.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B4.2] < [B4.4]
   T: for (...; [B4.5]; ...)
   Preds (2): B2 B5
   Succs (2): B3 B1

 [B5]
   1: int i7;
   2: 0
   3: i7
   4: [B5.3] = [B5.2]
   Preds (2): B6 B7
   Succs (1): B4

 [B6]
   1: MPIR_Call_world_errhand
   2: [B6.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B6.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B6.2]([B6.4])
   Preds (1): B7
   Succs (1): B5

 [B7]
   1: v4
   2: [B7.1] (ImplicitCastExpr, LValueToRValue, int)
   3: CFGNewAllocator(MPI_Datatype *)
   4: new MPI_Datatype [[B7.2]]
   5: MPI_Datatype *l7 = new MPI_Datatype [v4];
   6: MPI_Type_get_contents
   7: [B7.6] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Datatype, int, int, int, int *, MPI_Aint *, MPI_Datatype *))
   8: this
   9: [B7.8]->the_real_datatype
  10: [B7.9] (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  11: (MPI_Datatype)[B7.10] (CStyleCastExpr, NoOp, MPI_Datatype)
  12: v2
  13: [B7.12] (ImplicitCastExpr, LValueToRValue, int)
  14: v3
  15: [B7.14] (ImplicitCastExpr, LValueToRValue, int)
  16: v4
  17: [B7.16] (ImplicitCastExpr, LValueToRValue, int)
  18: v5
  19: [B7.18] (ImplicitCastExpr, LValueToRValue, int *)
  20: v6
  21: [B7.20] (ImplicitCastExpr, LValueToRValue, Aint *)
  22: l7
  23: [B7.22] (ImplicitCastExpr, LValueToRValue, MPI_Datatype *)
  24: [B7.7]([B7.11], [B7.13], [B7.15], [B7.17], [B7.19], [B7.21], [B7.23])
  25: int err = MPI_Type_get_contents((MPI_Datatype)this->the_real_datatype, v2, v3, v4, v5, v6, l7);
  26: err
  27: [B7.26] (ImplicitCastExpr, LValueToRValue, int)
  28: [B7.27] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B7.28]
   Preds (1): B8
   Succs (2): B6 B5

 [B0 (EXIT)]
   Preds (1): B1

virtual void Set_attr(int v2, const void *v3)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: MPIR_Call_world_errhand
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Type_set_attr
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Datatype, int, void *))
   3: this
   4: [B2.3]->the_real_datatype
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
   6: (MPI_Datatype)[B2.5] (CStyleCastExpr, NoOp, MPI_Datatype)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, int)
   9: v3
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, const void *)
  11: (void *)[B2.10] (CStyleCastExpr, NoOp, void *)
  12: [B2.2]([B2.6], [B2.8], [B2.11])
  13: int err = MPI_Type_set_attr((MPI_Datatype)this->the_real_datatype, v2, (void *)v3);
  14: err
  15: [B2.14] (ImplicitCastExpr, LValueToRValue, int)
  16: [B2.15] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.16]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Set_name(const char *v2)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: MPIR_Call_world_errhand
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Type_set_name
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Datatype, const char *))
   3: this
   4: [B2.3]->the_real_datatype
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
   6: (MPI_Datatype)[B2.5] (CStyleCastExpr, NoOp, MPI_Datatype)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, const char *)
   9: (const char *)[B2.8] (CStyleCastExpr, NoOp, const char *)
  10: [B2.2]([B2.6], [B2.9])
  11: int err = MPI_Type_set_name((MPI_Datatype)this->the_real_datatype, (const char *)v2);
  12: err
  13: [B2.12] (ImplicitCastExpr, LValueToRValue, int)
  14: [B2.13] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.14]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

static MPI::Datatype Create_f90_complex(int v1, int v2)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v3
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Datatype)
   3: [B1.2] (CXXConstructExpr, class MPI::Datatype)
   4: return [B1.3];
   5: [B3.2].~Datatype() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Datatype)
   2: MPI::Datatype v3;
   3: MPI_Type_create_f90_complex
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, int, MPI_Datatype *))
   5: v1
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, int)
   7: v2
   8: [B3.7] (ImplicitCastExpr, LValueToRValue, int)
   9: v3
  10: [B3.9].the_real_datatype
  11: &([B3.10])
  12: [B3.4]([B3.6], [B3.8], [B3.11])
  13: int err = MPI_Type_create_f90_complex(v1, v2, &(v3.the_real_datatype));
  14: err
  15: [B3.14] (ImplicitCastExpr, LValueToRValue, int)
  16: [B3.15] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.16]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual MPI::Datatype Create_subarray(int v1, const int v2[], const int v3[], const int v4[], const int v5) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v7
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Datatype)
   3: [B1.2] (CXXConstructExpr, class MPI::Datatype)
   4: return [B1.3];
   5: [B3.2].~Datatype() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Datatype)
   2: MPI::Datatype v7;
   3: MPI_Type_create_subarray
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, const int *, const int *, const int *, int, MPI_Datatype, MPI_Datatype *))
   5: v1
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, int)
   7: v2
   8: [B3.7] (ImplicitCastExpr, LValueToRValue, const int *)
   9: v3
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, const int *)
  11: (const int *)[B3.10] (CStyleCastExpr, NoOp, const int *)
  12: v4
  13: [B3.12] (ImplicitCastExpr, LValueToRValue, const int *)
  14: (const int *)[B3.13] (CStyleCastExpr, NoOp, const int *)
  15: v5
  16: [B3.15] (ImplicitCastExpr, LValueToRValue, int)
  17: (int)[B3.16] (CStyleCastExpr, NoOp, int)
  18: this
  19: [B3.18]->the_real_datatype
  20: [B3.19] (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  21: (MPI_Datatype)[B3.20] (CStyleCastExpr, NoOp, MPI_Datatype)
  22: v7
  23: [B3.22].the_real_datatype
  24: &([B3.23])
  25: [B3.4]([B3.6], [B3.8], [B3.11], [B3.14], [B3.17], [B3.21], [B3.24])
  26: int err = MPI_Type_create_subarray(v1, v2, (const int *)v3, (const int *)v4, (int)v5, (MPI_Datatype)this->the_real_datatype, &(v7.the_real_datatype));
  27: err
  28: [B3.27] (ImplicitCastExpr, LValueToRValue, int)
  29: [B3.28] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.29]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual void Unpack_external(const char v1[], const void *v2, const Aint v3, Aint &v4, void *v5, int v6) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: MPIR_Call_world_errhand
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Unpack_external
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const char *, const void *, MPI_Aint, MPI_Aint *, void *, int, MPI_Datatype))
   3: v1
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, const char *)
   5: v2
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, const void *)
   7: (const void *)[B2.6] (CStyleCastExpr, NoOp, const void *)
   8: v3
   9: [B2.8] (ImplicitCastExpr, LValueToRValue, Aint)
  10: (MPI_Aint)[B2.9] (CStyleCastExpr, NoOp, MPI_Aint)
  11: v4
  12: &[B2.11]
  13: v5
  14: [B2.13] (ImplicitCastExpr, LValueToRValue, void *)
  15: v6
  16: [B2.15] (ImplicitCastExpr, LValueToRValue, int)
  17: this
  18: [B2.17]->the_real_datatype
  19: [B2.18] (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  20: (MPI_Datatype)[B2.19] (CStyleCastExpr, NoOp, MPI_Datatype)
  21: [B2.2]([B2.4], [B2.7], [B2.10], [B2.12], [B2.14], [B2.16], [B2.20])
  22: int err = MPI_Unpack_external(v1, (const void *)v2, (MPI_Aint)v3, &v4, v5, v6, (MPI_Datatype)this->the_real_datatype);
  23: err
  24: [B2.23] (ImplicitCastExpr, LValueToRValue, int)
  25: [B2.24] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.25]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

static void Free_keyval(int &v1)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: MPIR_Call_world_errhand
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Type_free_keyval
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int *))
   3: v1
   4: &[B2.3]
   5: [B2.2]([B2.4])
   6: int err = MPI_Type_free_keyval(&v1);
   7: err
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, int)
   9: [B2.8] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.9]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

static MPI::Datatype Create_struct(int v1, const int v2[], const Aint v3[], const MPI::Datatype v4[])
 [B8 (ENTRY)]
   Succs (1): B7

 [B1]
   1: l4
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Datatype *)
   3: delete [] [B1.2]
   4: v5
   5: [B1.4] (ImplicitCastExpr, NoOp, const class MPI::Datatype)
   6: [B1.5] (CXXConstructExpr, class MPI::Datatype)
   7: return [B1.6];
   8: [B7.2].~Datatype() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: MPI_Type_create_struct
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, const int *, const MPI_Aint *, const MPI_Datatype *, MPI_Datatype *))
   3: v1
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: v2
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, const int *)
   7: (const int *)[B3.6] (CStyleCastExpr, NoOp, const int *)
   8: v3
   9: [B3.8] (ImplicitCastExpr, LValueToRValue, const Aint *)
  10: (const MPI_Aint *)[B3.9] (CStyleCastExpr, NoOp, const MPI_Aint *)
  11: l4
  12: [B3.11] (ImplicitCastExpr, LValueToRValue, MPI_Datatype *)
  13: [B3.12] (ImplicitCastExpr, NoOp, const MPI_Datatype *)
  14: v5
  15: [B3.14].the_real_datatype
  16: &([B3.15])
  17: [B3.2]([B3.4], [B3.7], [B3.10], [B3.13], [B3.16])
  18: int err = MPI_Type_create_struct(v1, (const int *)v2, (const MPI_Aint *)v3, l4, &(v5.the_real_datatype));
  19: err
  20: [B3.19] (ImplicitCastExpr, LValueToRValue, int)
  21: [B3.20] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.21]
   Preds (1): B6
   Succs (2): B2 B1

 [B4]
   1: i4
   2: [B4.1]++
   Preds (1): B5
   Succs (1): B6

 [B5]
   1: v4
   2: [B5.1] (ImplicitCastExpr, LValueToRValue, const class MPI::Datatype *)
   3: i4
   4: [B5.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B5.2][[B5.4]]
   6: [B5.5].the_real_datatype
   7: [B5.6] (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
   8: l4
   9: [B5.8] (ImplicitCastExpr, LValueToRValue, MPI_Datatype *)
  10: i4
  11: [B5.10] (ImplicitCastExpr, LValueToRValue, int)
  12: [B5.9][[B5.11]]
  13: [B5.12] = [B5.7]
   Preds (1): B6
   Succs (1): B4

 [B6]
   1: i4
   2: [B6.1] (ImplicitCastExpr, LValueToRValue, int)
   3: v1
   4: [B6.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B6.2] < [B6.4]
   T: for (...; [B6.5]; ...)
   Preds (2): B4 B7
   Succs (2): B5 B3

 [B7]
   1:  (CXXConstructExpr, class MPI::Datatype)
   2: MPI::Datatype v5;
   3: v1
   4: [B7.3] (ImplicitCastExpr, LValueToRValue, int)
   5: CFGNewAllocator(MPI_Datatype *)
   6: new MPI_Datatype [[B7.4]]
   7: MPI_Datatype *l4 = new MPI_Datatype [v1];
   8: int i4;
   9: 0
  10: i4
  11: [B7.10] = [B7.9]
   Preds (1): B8
   Succs (1): B6

 [B0 (EXIT)]
   Preds (1): B1

static MPI::Datatype Create_f90_integer(int v1)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v2
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Datatype)
   3: [B1.2] (CXXConstructExpr, class MPI::Datatype)
   4: return [B1.3];
   5: [B3.2].~Datatype() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Datatype)
   2: MPI::Datatype v2;
   3: MPI_Type_create_f90_integer
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, MPI_Datatype *))
   5: v1
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, int)
   7: v2
   8: [B3.7].the_real_datatype
   9: &([B3.8])
  10: [B3.4]([B3.6], [B3.9])
  11: int err = MPI_Type_create_f90_integer(v1, &(v2.the_real_datatype));
  12: err
  13: [B3.12] (ImplicitCastExpr, LValueToRValue, int)
  14: [B3.13] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.14]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual void Pack_external(const char v1[], const void *v2, const int v3, void *v5, Aint v6, Aint &v7) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: MPIR_Call_world_errhand
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Pack_external
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const char *, const void *, int, MPI_Datatype, void *, MPI_Aint, MPI_Aint *))
   3: v1
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, const char *)
   5: v2
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, const void *)
   7: (const void *)[B2.6] (CStyleCastExpr, NoOp, const void *)
   8: v3
   9: [B2.8] (ImplicitCastExpr, LValueToRValue, int)
  10: (int)[B2.9] (CStyleCastExpr, NoOp, int)
  11: this
  12: [B2.11]->the_real_datatype
  13: [B2.12] (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  14: (MPI_Datatype)[B2.13] (CStyleCastExpr, NoOp, MPI_Datatype)
  15: v5
  16: [B2.15] (ImplicitCastExpr, LValueToRValue, void *)
  17: v6
  18: [B2.17] (ImplicitCastExpr, LValueToRValue, Aint)
  19: v7
  20: &[B2.19]
  21: [B2.2]([B2.4], [B2.7], [B2.10], [B2.14], [B2.16], [B2.18], [B2.20])
  22: int err = MPI_Pack_external(v1, (const void *)v2, (int)v3, (MPI_Datatype)this->the_real_datatype, v5, v6, &v7);
  23: err
  24: [B2.23] (ImplicitCastExpr, LValueToRValue, int)
  25: [B2.24] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.25]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Get_extent(Aint &v2, Aint &v3) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: MPIR_Call_world_errhand
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Type_get_extent
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Datatype, MPI_Aint *, MPI_Aint *))
   3: this
   4: [B2.3]->the_real_datatype
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
   6: (MPI_Datatype)[B2.5] (CStyleCastExpr, NoOp, MPI_Datatype)
   7: v2
   8: &[B2.7]
   9: v3
  10: &[B2.9]
  11: [B2.2]([B2.6], [B2.8], [B2.10])
  12: int err = MPI_Type_get_extent((MPI_Datatype)this->the_real_datatype, &v2, &v3);
  13: err
  14: [B2.13] (ImplicitCastExpr, LValueToRValue, int)
  15: [B2.14] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.15]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Delete_attr(int v2)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: MPIR_Call_world_errhand
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Type_delete_attr
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Datatype, int))
   3: this
   4: [B2.3]->the_real_datatype
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
   6: (MPI_Datatype)[B2.5] (CStyleCastExpr, NoOp, MPI_Datatype)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, int)
   9: [B2.2]([B2.6], [B2.8])
  10: int err = MPI_Type_delete_attr((MPI_Datatype)this->the_real_datatype, v2);
  11: err
  12: [B2.11] (ImplicitCastExpr, LValueToRValue, int)
  13: [B2.12] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.13]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Get_name(char *v2, int &v3) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: MPIR_Call_world_errhand
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPIR_CXX_InitDatatypeNames
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(void))
   3: [B2.2]()
   4: MPI_Type_get_name
   5: [B2.4] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Datatype, char *, int *))
   6: this
   7: [B2.6]->the_real_datatype
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
   9: (MPI_Datatype)[B2.8] (CStyleCastExpr, NoOp, MPI_Datatype)
  10: v2
  11: [B2.10] (ImplicitCastExpr, LValueToRValue, char *)
  12: v3
  13: &[B2.12]
  14: [B2.5]([B2.9], [B2.11], [B2.13])
  15: int err = MPI_Type_get_name((MPI_Datatype)this->the_real_datatype, v2, &v3);
  16: err
  17: [B2.16] (ImplicitCastExpr, LValueToRValue, int)
  18: [B2.17] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.18]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

static int NULL_COPY_FN(const MPI::Datatype &oldtype, int keyval, void *ex, void *attr_in, void *attr_out, bool &flag)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 1
   2: [B1.1] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   3: flag
   4: [B1.3] = [B1.2]
   5: 0
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static int NULL_DELETE_FN(MPI::Datatype &type, int keyval, void *attr, void *ex)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 0
   2: return [B1.1];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static int DUP_FN(const MPI::Datatype &oldtype, int keyval, void *ex, void *attr_in, void *attr_out, bool &flag)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 1
   2: [B1.1] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   3: flag
   4: [B1.3] = [B1.2]
   5: attr_in
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, void *)
   7: attr_out
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, void *)
   9: (void **)[B1.8] (CStyleCastExpr, BitCast, void **)
  10: *[B1.9]
  11: [B1.10] = [B1.6]
  12: 0
  13: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline Info(MPI_Info obj) : the_real_info(obj) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Info)
   3: the_real_info([B1.2]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline Info() : the_real_info((MPI_Info)469762048) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 469762048
   2: (MPI_Info)[B1.1] (CStyleCastExpr, NoOp, MPI_Info)
   3: the_real_info(([B1.2])) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~MPI::Info() noexcept
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

Info(const MPI::Info &obj) : the_real_info(obj.the_real_info) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1].the_real_info
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_Info)
   4: the_real_info([B1.3]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

MPI::Info &operator=(const MPI::Info &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1].the_real_info
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_Info)
   4: this
   5: [B1.4]->the_real_info
   6: [B1.5] = [B1.3]
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator==(const MPI::Info &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_info
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_Info)
   4: obj
   5: [B1.4].the_real_info
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, MPI_Info)
   7: [B1.3] == [B1.6]
   8: return ([B1.7]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator!=(const MPI::Info &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_info
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_Info)
   4: obj
   5: [B1.4].the_real_info
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, MPI_Info)
   7: [B1.3] != [B1.6]
   8: return ([B1.7]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline operator MPI_Info *()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_info
   3: &[B1.2]
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline operator MPI_Info() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_info
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_Info)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

MPI::Info &operator=(const MPI_Info &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Info)
   3: this
   4: [B1.3]->the_real_info
   5: [B1.4] = [B1.2]
   6: this
   7: *[B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual void Delete(const char *v2)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: MPIR_Call_world_errhand
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Info_delete
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Info, const char *))
   3: this
   4: [B2.3]->the_real_info
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_Info)
   6: (MPI_Info)[B2.5] (CStyleCastExpr, NoOp, MPI_Info)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, const char *)
   9: (const char *)[B2.8] (CStyleCastExpr, NoOp, const char *)
  10: [B2.2]([B2.6], [B2.9])
  11: int err = MPI_Info_delete((MPI_Info)this->the_real_info, (const char *)v2);
  12: err
  13: [B2.12] (ImplicitCastExpr, LValueToRValue, int)
  14: [B2.13] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.14]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Get_nthkey(int v2, char *v3) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: MPIR_Call_world_errhand
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Info_get_nthkey
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Info, int, char *))
   3: this
   4: [B2.3]->the_real_info
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_Info)
   6: (MPI_Info)[B2.5] (CStyleCastExpr, NoOp, MPI_Info)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, int)
   9: v3
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, char *)
  11: [B2.2]([B2.6], [B2.8], [B2.10])
  12: int err = MPI_Info_get_nthkey((MPI_Info)this->the_real_info, v2, v3);
  13: err
  14: [B2.13] (ImplicitCastExpr, LValueToRValue, int)
  15: [B2.14] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.15]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Free()
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: MPIR_Call_world_errhand
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Info_free
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Info *))
   3: this
   4: [B2.3]->the_real_info
   5: &[B2.4]
   6: (MPI_Info *)[B2.5] (CStyleCastExpr, NoOp, MPI_Info *)
   7: [B2.2]([B2.6])
   8: int err = MPI_Info_free((MPI_Info *)&this->the_real_info);
   9: err
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B2.10] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.11]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

static MPI::Info Create()
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v1
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Info)
   3: [B1.2] (CXXConstructExpr, class MPI::Info)
   4: return [B1.3];
   5: [B3.2].~Info() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Info)
   2: MPI::Info v1;
   3: MPI_Info_create
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Info *))
   5: v1
   6: [B3.5].the_real_info
   7: &([B3.6])
   8: [B3.4]([B3.7])
   9: int err = MPI_Info_create(&(v1.the_real_info));
  10: err
  11: [B3.10] (ImplicitCastExpr, LValueToRValue, int)
  12: [B3.11] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.12]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual void Set(const char *v2, const char *v3)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: MPIR_Call_world_errhand
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Info_set
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Info, const char *, const char *))
   3: this
   4: [B2.3]->the_real_info
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_Info)
   6: (MPI_Info)[B2.5] (CStyleCastExpr, NoOp, MPI_Info)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, const char *)
   9: (const char *)[B2.8] (CStyleCastExpr, NoOp, const char *)
  10: v3
  11: [B2.10] (ImplicitCastExpr, LValueToRValue, const char *)
  12: (const char *)[B2.11] (CStyleCastExpr, NoOp, const char *)
  13: [B2.2]([B2.6], [B2.9], [B2.12])
  14: int err = MPI_Info_set((MPI_Info)this->the_real_info, (const char *)v2, (const char *)v3);
  15: err
  16: [B2.15] (ImplicitCastExpr, LValueToRValue, int)
  17: [B2.16] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.17]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

MPI::Info Dup() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v2
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Info)
   3: [B1.2] (CXXConstructExpr, class MPI::Info)
   4: return [B1.3];
   5: [B3.2].~Info() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Info)
   2: MPI::Info v2;
   3: MPI_Info_dup
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Info, MPI_Info *))
   5: this
   6: [B3.5]->the_real_info
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, MPI_Info)
   8: (MPI_Info)[B3.7] (CStyleCastExpr, NoOp, MPI_Info)
   9: v2
  10: [B3.9].the_real_info
  11: &([B3.10])
  12: [B3.4]([B3.8], [B3.11])
  13: int err = MPI_Info_dup((MPI_Info)this->the_real_info, &(v2.the_real_info));
  14: err
  15: [B3.14] (ImplicitCastExpr, LValueToRValue, int)
  16: [B3.15] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.16]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual bool Get_valuelen(const char *v2, int &v3) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v4
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 0
   4: [B1.2] != [B1.3]
   5: return [B1.4];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: int v4;
   2: MPI_Info_get_valuelen
   3: [B3.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Info, const char *, int *, int *))
   4: this
   5: [B3.4]->the_real_info
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, MPI_Info)
   7: (MPI_Info)[B3.6] (CStyleCastExpr, NoOp, MPI_Info)
   8: v2
   9: [B3.8] (ImplicitCastExpr, LValueToRValue, const char *)
  10: (const char *)[B3.9] (CStyleCastExpr, NoOp, const char *)
  11: v3
  12: &[B3.11]
  13: v4
  14: &[B3.13]
  15: [B3.3]([B3.7], [B3.10], [B3.12], [B3.14])
  16: int err = MPI_Info_get_valuelen((MPI_Info)this->the_real_info, (const char *)v2, &v3, &v4);
  17: err
  18: [B3.17] (ImplicitCastExpr, LValueToRValue, int)
  19: [B3.18] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.19]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual bool Get(const char *v2, int v3, char *v4) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v5
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 0
   4: [B1.2] != [B1.3]
   5: return [B1.4];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: int v5;
   2: MPI_Info_get
   3: [B3.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Info, const char *, int, char *, int *))
   4: this
   5: [B3.4]->the_real_info
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, MPI_Info)
   7: (MPI_Info)[B3.6] (CStyleCastExpr, NoOp, MPI_Info)
   8: v2
   9: [B3.8] (ImplicitCastExpr, LValueToRValue, const char *)
  10: (const char *)[B3.9] (CStyleCastExpr, NoOp, const char *)
  11: v3
  12: [B3.11] (ImplicitCastExpr, LValueToRValue, int)
  13: v4
  14: [B3.13] (ImplicitCastExpr, LValueToRValue, char *)
  15: v5
  16: &[B3.15]
  17: [B3.3]([B3.7], [B3.10], [B3.12], [B3.14], [B3.16])
  18: int err = MPI_Info_get((MPI_Info)this->the_real_info, (const char *)v2, v3, v4, &v5);
  19: err
  20: [B3.19] (ImplicitCastExpr, LValueToRValue, int)
  21: [B3.20] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.21]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual int Get_nkeys() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v2
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: int v2;
   2: MPI_Info_get_nkeys
   3: [B3.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Info, int *))
   4: this
   5: [B3.4]->the_real_info
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, MPI_Info)
   7: (MPI_Info)[B3.6] (CStyleCastExpr, NoOp, MPI_Info)
   8: v2
   9: &[B3.8]
  10: [B3.3]([B3.7], [B3.9])
  11: int err = MPI_Info_get_nkeys((MPI_Info)this->the_real_info, &v2);
  12: err
  13: [B3.12] (ImplicitCastExpr, LValueToRValue, int)
  14: [B3.13] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.14]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

inline Status(MPI_Status obj) : the_real_status(obj) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, NoOp, const MPI_Status)
   3: [B1.2] (CXXConstructExpr, MPI_Status)
   4: the_real_status([B1.3]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline Status() : the_real_status() {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, MPI_Status)
   2: the_real_status([B1.1]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~MPI::Status() noexcept
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

Status(const MPI::Status &obj) : the_real_status(obj.the_real_status) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1].the_real_status
   3: [B1.2] (CXXConstructExpr, MPI_Status)
   4: the_real_status([B1.3]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

MPI::Status &operator=(const MPI::Status &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, struct MPI_Status &(*)(const struct MPI_Status &) noexcept)
   3: this
   4: [B1.3]->the_real_status
   5: obj
   6: [B1.5].the_real_status
   7: [B1.4] = [B1.6] (OperatorCall)
   8: this
   9: *[B1.8]
  10: return [B1.9];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline operator MPI_Status *()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_status
   3: &[B1.2]
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline operator MPI_Status() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_status
   3: [B1.2] (CXXConstructExpr, MPI_Status)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

MPI::Status &operator=(const MPI_Status &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: operator=
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, struct MPI_Status &(*)(const struct MPI_Status &) noexcept)
   3: this
   4: [B1.3]->the_real_status
   5: obj
   6: [B1.4] = [B1.5] (OperatorCall)
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual bool Is_cancelled() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v2
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 0
   4: [B1.2] != [B1.3]
   5: return [B1.4];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: int v2;
   2: MPI_Test_cancelled
   3: [B3.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const MPI_Status *, int *))
   4: this
   5: [B3.4]->the_real_status
   6: &[B3.5]
   7: (const MPI_Status *)[B3.6] (CStyleCastExpr, NoOp, const MPI_Status *)
   8: v2
   9: &[B3.8]
  10: [B3.3]([B3.7], [B3.9])
  11: int err = MPI_Test_cancelled((const MPI_Status *)&this->the_real_status, &v2);
  12: err
  13: [B3.12] (ImplicitCastExpr, LValueToRValue, int)
  14: [B3.13] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.14]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual int Get_elements(const MPI::Datatype &v2) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v3
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: int v3;
   2: MPI_Get_elements
   3: [B3.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const MPI_Status *, MPI_Datatype, int *))
   4: this
   5: [B3.4]->the_real_status
   6: &[B3.5]
   7: (const MPI_Status *)[B3.6] (CStyleCastExpr, NoOp, const MPI_Status *)
   8: v2
   9: [B3.8].the_real_datatype
  10: ([B3.9]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  11: (MPI_Datatype)[B3.10] (CStyleCastExpr, NoOp, MPI_Datatype)
  12: v3
  13: &[B3.12]
  14: [B3.3]([B3.7], [B3.11], [B3.13])
  15: int err = MPI_Get_elements((const MPI_Status *)&this->the_real_status, (MPI_Datatype)(v2.the_real_datatype), &v3);
  16: err
  17: [B3.16] (ImplicitCastExpr, LValueToRValue, int)
  18: [B3.17] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.18]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual int Get_count(const MPI::Datatype &v2) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v3
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: int v3;
   2: MPI_Get_count
   3: [B3.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const MPI_Status *, MPI_Datatype, int *))
   4: this
   5: [B3.4]->the_real_status
   6: &[B3.5]
   7: (const MPI_Status *)[B3.6] (CStyleCastExpr, NoOp, const MPI_Status *)
   8: v2
   9: [B3.8].the_real_datatype
  10: ([B3.9]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  11: (MPI_Datatype)[B3.10] (CStyleCastExpr, NoOp, MPI_Datatype)
  12: v3
  13: &[B3.12]
  14: [B3.3]([B3.7], [B3.11], [B3.13])
  15: int err = MPI_Get_count((const MPI_Status *)&this->the_real_status, (MPI_Datatype)(v2.the_real_datatype), &v3);
  16: err
  17: [B3.16] (ImplicitCastExpr, LValueToRValue, int)
  18: [B3.17] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.18]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual void Set_cancelled(bool v2)
 [B6 (ENTRY)]
   Succs (1): B5

 [B1]
   1: MPIR_Call_world_errhand
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: ([B5.7]) ? [B3.1] : [B4.1]
   2: l2
   3: [B2.2] = [B2.1]
   4: MPI_Status_set_cancelled
   5: [B2.4] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Status *, int))
   6: this
   7: [B2.6]->the_real_status
   8: &[B2.7]
   9: (MPI_Status *)[B2.8] (CStyleCastExpr, NoOp, MPI_Status *)
  10: l2
  11: [B2.10] (ImplicitCastExpr, LValueToRValue, int)
  12: [B2.5]([B2.9], [B2.11])
  13: int err = MPI_Status_set_cancelled((MPI_Status *)&this->the_real_status, l2);
  14: err
  15: [B2.14] (ImplicitCastExpr, LValueToRValue, int)
  16: [B2.15] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.16]
   Preds (2): B3 B4
   Succs (2): B1 B0

 [B3]
   1: 1
   Preds (1): B5
   Succs (1): B2

 [B4]
   1: 0
   Preds (1): B5
   Succs (1): B2

 [B5]
   1: int l2;
   2: v2
   3: [B5.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   4: [B5.3] (ImplicitCastExpr, IntegralCast, int)
   5: true
   6: [B5.5] (ImplicitCastExpr, IntegralCast, int)
   7: [B5.4] == [B5.6]
   T: ([B5.7]) ? ... : ...
   Preds (1): B6
   Succs (2): B3 B4

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Set_elements(const MPI::Datatype &v2, int v3)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: MPIR_Call_world_errhand
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Status_set_elements
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Status *, MPI_Datatype, int))
   3: this
   4: [B2.3]->the_real_status
   5: &[B2.4]
   6: (MPI_Status *)[B2.5] (CStyleCastExpr, NoOp, MPI_Status *)
   7: v2
   8: [B2.7].the_real_datatype
   9: ([B2.8]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  10: (MPI_Datatype)[B2.9] (CStyleCastExpr, NoOp, MPI_Datatype)
  11: v3
  12: [B2.11] (ImplicitCastExpr, LValueToRValue, int)
  13: [B2.2]([B2.6], [B2.10], [B2.12])
  14: int err = MPI_Status_set_elements((MPI_Status *)&this->the_real_status, (MPI_Datatype)(v2.the_real_datatype), v3);
  15: err
  16: [B2.15] (ImplicitCastExpr, LValueToRValue, int)
  17: [B2.16] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.17]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

int Get_source() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_status
   3: [B1.2].MPI_SOURCE
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int Get_tag() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_status
   3: [B1.2].MPI_TAG
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int Get_error() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_status
   3: [B1.2].MPI_ERROR
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void Set_source(int source)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: source
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: this
   4: [B1.3]->the_real_status
   5: [B1.4].MPI_SOURCE
   6: [B1.5] = [B1.2]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void Set_tag(int tag)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: tag
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: this
   4: [B1.3]->the_real_status
   5: [B1.4].MPI_TAG
   6: [B1.5] = [B1.2]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void Set_error(int error)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: error
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: this
   4: [B1.3]->the_real_status
   5: [B1.4].MPI_ERROR
   6: [B1.5] = [B1.2]
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline Group(MPI_Group obj) : the_real_group(obj) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Group)
   3: the_real_group([B1.2]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline Group() : the_real_group((MPI_Group)134217728) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 134217728
   2: (MPI_Group)[B1.1] (CStyleCastExpr, NoOp, MPI_Group)
   3: the_real_group(([B1.2])) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~MPI::Group() noexcept
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

Group(const MPI::Group &obj) : the_real_group(obj.the_real_group) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1].the_real_group
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_Group)
   4: the_real_group([B1.3]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

MPI::Group &operator=(const MPI::Group &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1].the_real_group
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_Group)
   4: this
   5: [B1.4]->the_real_group
   6: [B1.5] = [B1.3]
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator==(const MPI::Group &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_group
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_Group)
   4: obj
   5: [B1.4].the_real_group
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, MPI_Group)
   7: [B1.3] == [B1.6]
   8: return ([B1.7]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator!=(const MPI::Group &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_group
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_Group)
   4: obj
   5: [B1.4].the_real_group
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, MPI_Group)
   7: [B1.3] != [B1.6]
   8: return ([B1.7]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline operator MPI_Group *()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_group
   3: &[B1.2]
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline operator MPI_Group() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_group
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_Group)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

MPI::Group &operator=(const MPI_Group &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Group)
   3: this
   4: [B1.3]->the_real_group
   5: [B1.4] = [B1.2]
   6: this
   7: *[B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual MPI::Group Excl(int v2, const int v3[]) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v4
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Group)
   3: [B1.2] (CXXConstructExpr, class MPI::Group)
   4: return [B1.3];
   5: [B3.2].~Group() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Group)
   2: MPI::Group v4;
   3: MPI_Group_excl
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Group, int, const int *, MPI_Group *))
   5: this
   6: [B3.5]->the_real_group
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, MPI_Group)
   8: (MPI_Group)[B3.7] (CStyleCastExpr, NoOp, MPI_Group)
   9: v2
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, int)
  11: v3
  12: [B3.11] (ImplicitCastExpr, LValueToRValue, const int *)
  13: (const int *)[B3.12] (CStyleCastExpr, NoOp, const int *)
  14: v4
  15: [B3.14].the_real_group
  16: &([B3.15])
  17: [B3.4]([B3.8], [B3.10], [B3.13], [B3.16])
  18: int err = MPI_Group_excl((MPI_Group)this->the_real_group, v2, (const int *)v3, &(v4.the_real_group));
  19: err
  20: [B3.19] (ImplicitCastExpr, LValueToRValue, int)
  21: [B3.20] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.21]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual int Get_rank() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v2
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: int v2;
   2: MPI_Group_rank
   3: [B3.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Group, int *))
   4: this
   5: [B3.4]->the_real_group
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, MPI_Group)
   7: (MPI_Group)[B3.6] (CStyleCastExpr, NoOp, MPI_Group)
   8: v2
   9: &[B3.8]
  10: [B3.3]([B3.7], [B3.9])
  11: int err = MPI_Group_rank((MPI_Group)this->the_real_group, &v2);
  12: err
  13: [B3.12] (ImplicitCastExpr, LValueToRValue, int)
  14: [B3.13] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.14]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual void Free()
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: MPIR_Call_world_errhand
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Group_free
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Group *))
   3: this
   4: [B2.3]->the_real_group
   5: &[B2.4]
   6: (MPI_Group *)[B2.5] (CStyleCastExpr, NoOp, MPI_Group *)
   7: [B2.2]([B2.6])
   8: int err = MPI_Group_free((MPI_Group *)&this->the_real_group);
   9: err
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B2.10] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.11]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

static MPI::Group Union(const MPI::Group &v1, const MPI::Group &v2)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v3
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Group)
   3: [B1.2] (CXXConstructExpr, class MPI::Group)
   4: return [B1.3];
   5: [B3.2].~Group() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Group)
   2: MPI::Group v3;
   3: MPI_Group_union
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Group, MPI_Group, MPI_Group *))
   5: v1
   6: [B3.5].the_real_group
   7: ([B3.6]) (ImplicitCastExpr, LValueToRValue, MPI_Group)
   8: (MPI_Group)[B3.7] (CStyleCastExpr, NoOp, MPI_Group)
   9: v2
  10: [B3.9].the_real_group
  11: ([B3.10]) (ImplicitCastExpr, LValueToRValue, MPI_Group)
  12: (MPI_Group)[B3.11] (CStyleCastExpr, NoOp, MPI_Group)
  13: v3
  14: [B3.13].the_real_group
  15: &([B3.14])
  16: [B3.4]([B3.8], [B3.12], [B3.15])
  17: int err = MPI_Group_union((MPI_Group)(v1.the_real_group), (MPI_Group)(v2.the_real_group), &(v3.the_real_group));
  18: err
  19: [B3.18] (ImplicitCastExpr, LValueToRValue, int)
  20: [B3.19] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.20]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

static MPI::Group Intersect(const MPI::Group &v1, const MPI::Group &v2)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v3
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Group)
   3: [B1.2] (CXXConstructExpr, class MPI::Group)
   4: return [B1.3];
   5: [B3.2].~Group() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Group)
   2: MPI::Group v3;
   3: MPI_Group_intersection
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Group, MPI_Group, MPI_Group *))
   5: v1
   6: [B3.5].the_real_group
   7: ([B3.6]) (ImplicitCastExpr, LValueToRValue, MPI_Group)
   8: (MPI_Group)[B3.7] (CStyleCastExpr, NoOp, MPI_Group)
   9: v2
  10: [B3.9].the_real_group
  11: ([B3.10]) (ImplicitCastExpr, LValueToRValue, MPI_Group)
  12: (MPI_Group)[B3.11] (CStyleCastExpr, NoOp, MPI_Group)
  13: v3
  14: [B3.13].the_real_group
  15: &([B3.14])
  16: [B3.4]([B3.8], [B3.12], [B3.15])
  17: int err = MPI_Group_intersection((MPI_Group)(v1.the_real_group), (MPI_Group)(v2.the_real_group), &(v3.the_real_group));
  18: err
  19: [B3.18] (ImplicitCastExpr, LValueToRValue, int)
  20: [B3.19] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.20]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual MPI::Group Range_excl(int v2, const int v3[][3]) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v4
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Group)
   3: [B1.2] (CXXConstructExpr, class MPI::Group)
   4: return [B1.3];
   5: [B3.2].~Group() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Group)
   2: MPI::Group v4;
   3: MPI_Group_range_excl
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Group, int, int (*)[3], MPI_Group *))
   5: this
   6: [B3.5]->the_real_group
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, MPI_Group)
   8: (MPI_Group)[B3.7] (CStyleCastExpr, NoOp, MPI_Group)
   9: v2
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, int)
  11: v3
  12: [B3.11] (ImplicitCastExpr, LValueToRValue, const int (*)[3])
  13: (int (*)[3])[B3.12] (CStyleCastExpr, NoOp, int (*)[3])
  14: v4
  15: [B3.14].the_real_group
  16: &([B3.15])
  17: [B3.4]([B3.8], [B3.10], [B3.13], [B3.16])
  18: int err = MPI_Group_range_excl((MPI_Group)this->the_real_group, v2, (int (*)[3])v3, &(v4.the_real_group));
  19: err
  20: [B3.19] (ImplicitCastExpr, LValueToRValue, int)
  21: [B3.20] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.21]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual MPI::Group Range_incl(int v2, const int v3[][3]) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v4
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Group)
   3: [B1.2] (CXXConstructExpr, class MPI::Group)
   4: return [B1.3];
   5: [B3.2].~Group() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Group)
   2: MPI::Group v4;
   3: MPI_Group_range_incl
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Group, int, int (*)[3], MPI_Group *))
   5: this
   6: [B3.5]->the_real_group
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, MPI_Group)
   8: (MPI_Group)[B3.7] (CStyleCastExpr, NoOp, MPI_Group)
   9: v2
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, int)
  11: v3
  12: [B3.11] (ImplicitCastExpr, LValueToRValue, const int (*)[3])
  13: (int (*)[3])[B3.12] (CStyleCastExpr, NoOp, int (*)[3])
  14: v4
  15: [B3.14].the_real_group
  16: &([B3.15])
  17: [B3.4]([B3.8], [B3.10], [B3.13], [B3.16])
  18: int err = MPI_Group_range_incl((MPI_Group)this->the_real_group, v2, (int (*)[3])v3, &(v4.the_real_group));
  19: err
  20: [B3.19] (ImplicitCastExpr, LValueToRValue, int)
  21: [B3.20] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.21]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

static MPI::Group Difference(const MPI::Group &v1, const MPI::Group &v2)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v3
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Group)
   3: [B1.2] (CXXConstructExpr, class MPI::Group)
   4: return [B1.3];
   5: [B3.2].~Group() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Group)
   2: MPI::Group v3;
   3: MPI_Group_difference
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Group, MPI_Group, MPI_Group *))
   5: v1
   6: [B3.5].the_real_group
   7: ([B3.6]) (ImplicitCastExpr, LValueToRValue, MPI_Group)
   8: (MPI_Group)[B3.7] (CStyleCastExpr, NoOp, MPI_Group)
   9: v2
  10: [B3.9].the_real_group
  11: ([B3.10]) (ImplicitCastExpr, LValueToRValue, MPI_Group)
  12: (MPI_Group)[B3.11] (CStyleCastExpr, NoOp, MPI_Group)
  13: v3
  14: [B3.13].the_real_group
  15: &([B3.14])
  16: [B3.4]([B3.8], [B3.12], [B3.15])
  17: int err = MPI_Group_difference((MPI_Group)(v1.the_real_group), (MPI_Group)(v2.the_real_group), &(v3.the_real_group));
  18: err
  19: [B3.18] (ImplicitCastExpr, LValueToRValue, int)
  20: [B3.19] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.20]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

static void Translate_ranks(const MPI::Group &v1, int v2, const int v3[], const MPI::Group &v4, int v5[])
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: MPIR_Call_world_errhand
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Group_translate_ranks
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Group, int, const int *, MPI_Group, int *))
   3: v1
   4: [B2.3].the_real_group
   5: ([B2.4]) (ImplicitCastExpr, LValueToRValue, MPI_Group)
   6: (MPI_Group)[B2.5] (CStyleCastExpr, NoOp, MPI_Group)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, int)
   9: v3
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, const int *)
  11: (const int *)[B2.10] (CStyleCastExpr, NoOp, const int *)
  12: v4
  13: [B2.12].the_real_group
  14: ([B2.13]) (ImplicitCastExpr, LValueToRValue, MPI_Group)
  15: (MPI_Group)[B2.14] (CStyleCastExpr, NoOp, MPI_Group)
  16: v5
  17: [B2.16] (ImplicitCastExpr, LValueToRValue, int *)
  18: [B2.2]([B2.6], [B2.8], [B2.11], [B2.15], [B2.17])
  19: int err = MPI_Group_translate_ranks((MPI_Group)(v1.the_real_group), v2, (const int *)v3, (MPI_Group)(v4.the_real_group), v5);
  20: err
  21: [B2.20] (ImplicitCastExpr, LValueToRValue, int)
  22: [B2.21] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.22]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual MPI::Group Incl(int v2, const int v3[]) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v4
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Group)
   3: [B1.2] (CXXConstructExpr, class MPI::Group)
   4: return [B1.3];
   5: [B3.2].~Group() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Group)
   2: MPI::Group v4;
   3: MPI_Group_incl
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Group, int, const int *, MPI_Group *))
   5: this
   6: [B3.5]->the_real_group
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, MPI_Group)
   8: (MPI_Group)[B3.7] (CStyleCastExpr, NoOp, MPI_Group)
   9: v2
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, int)
  11: v3
  12: [B3.11] (ImplicitCastExpr, LValueToRValue, const int *)
  13: (const int *)[B3.12] (CStyleCastExpr, NoOp, const int *)
  14: v4
  15: [B3.14].the_real_group
  16: &([B3.15])
  17: [B3.4]([B3.8], [B3.10], [B3.13], [B3.16])
  18: int err = MPI_Group_incl((MPI_Group)this->the_real_group, v2, (const int *)v3, &(v4.the_real_group));
  19: err
  20: [B3.19] (ImplicitCastExpr, LValueToRValue, int)
  21: [B3.20] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.21]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual int Get_size() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v2
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: int v2;
   2: MPI_Group_size
   3: [B3.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Group, int *))
   4: this
   5: [B3.4]->the_real_group
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, MPI_Group)
   7: (MPI_Group)[B3.6] (CStyleCastExpr, NoOp, MPI_Group)
   8: v2
   9: &[B3.8]
  10: [B3.3]([B3.7], [B3.9])
  11: int err = MPI_Group_size((MPI_Group)this->the_real_group, &v2);
  12: err
  13: [B3.12] (ImplicitCastExpr, LValueToRValue, int)
  14: [B3.13] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.14]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

static int Compare(const MPI::Group &v1, const MPI::Group &v2)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v3
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: int v3;
   2: MPI_Group_compare
   3: [B3.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Group, MPI_Group, int *))
   4: v1
   5: [B3.4].the_real_group
   6: ([B3.5]) (ImplicitCastExpr, LValueToRValue, MPI_Group)
   7: (MPI_Group)[B3.6] (CStyleCastExpr, NoOp, MPI_Group)
   8: v2
   9: [B3.8].the_real_group
  10: ([B3.9]) (ImplicitCastExpr, LValueToRValue, MPI_Group)
  11: (MPI_Group)[B3.10] (CStyleCastExpr, NoOp, MPI_Group)
  12: v3
  13: &[B3.12]
  14: [B3.3]([B3.7], [B3.11], [B3.13])
  15: int err = MPI_Group_compare((MPI_Group)(v1.the_real_group), (MPI_Group)(v2.the_real_group), &v3);
  16: err
  17: [B3.16] (ImplicitCastExpr, LValueToRValue, int)
  18: [B3.17] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.18]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

inline Op(MPI_Op obj) : the_real_op(obj) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Op)
   3: the_real_op([B1.2]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline Op() : the_real_op((MPI_Op)402653184) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 402653184
   2: (MPI_Op)[B1.1] (CStyleCastExpr, NoOp, MPI_Op)
   3: the_real_op(([B1.2])) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~MPI::Op() noexcept
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

Op(const MPI::Op &obj) : the_real_op(obj.the_real_op) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1].the_real_op
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_Op)
   4: the_real_op([B1.3]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

MPI::Op &operator=(const MPI::Op &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1].the_real_op
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_Op)
   4: this
   5: [B1.4]->the_real_op
   6: [B1.5] = [B1.3]
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator==(const MPI::Op &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_op
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_Op)
   4: obj
   5: [B1.4].the_real_op
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, MPI_Op)
   7: [B1.3] == [B1.6]
   8: return ([B1.7]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator!=(const MPI::Op &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_op
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_Op)
   4: obj
   5: [B1.4].the_real_op
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, MPI_Op)
   7: [B1.3] != [B1.6]
   8: return ([B1.7]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline operator MPI_Op *()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_op
   3: &[B1.2]
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline operator MPI_Op() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_op
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_Op)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

MPI::Op &operator=(const MPI_Op &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Op)
   3: this
   4: [B1.3]->the_real_op
   5: [B1.4] = [B1.2]
   6: this
   7: *[B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual void Free()
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: MPIR_Call_world_errhand
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Op_free
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Op *))
   3: this
   4: [B2.3]->the_real_op
   5: &[B2.4]
   6: (MPI_Op *)[B2.5] (CStyleCastExpr, NoOp, MPI_Op *)
   7: [B2.2]([B2.6])
   8: int err = MPI_Op_free((MPI_Op *)&this->the_real_op);
   9: err
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B2.10] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.11]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual bool Is_commutative() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v2
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 0
   4: [B1.2] != [B1.3]
   5: return [B1.4];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: int v2;
   2: MPI_Op_commutative
   3: [B3.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Op, int *))
   4: this
   5: [B3.4]->the_real_op
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, MPI_Op)
   7: (MPI_Op)[B3.6] (CStyleCastExpr, NoOp, MPI_Op)
   8: v2
   9: &[B3.8]
  10: [B3.3]([B3.7], [B3.9])
  11: int err = MPI_Op_commutative((MPI_Op)this->the_real_op, &v2);
  12: err
  13: [B3.12] (ImplicitCastExpr, LValueToRValue, int)
  14: [B3.13] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.14]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual void Reduce_local(const void *v1, void *v2, int v3, const MPI::Datatype &v4) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: MPIR_Call_world_errhand
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Reduce_local
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const void *, void *, int, MPI_Datatype, MPI_Op))
   3: v1
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, const void *)
   5: (const void *)[B2.4] (CStyleCastExpr, NoOp, const void *)
   6: v2
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, void *)
   8: v3
   9: [B2.8] (ImplicitCastExpr, LValueToRValue, int)
  10: v4
  11: [B2.10].the_real_datatype
  12: ([B2.11]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  13: (MPI_Datatype)[B2.12] (CStyleCastExpr, NoOp, MPI_Datatype)
  14: this
  15: [B2.14]->the_real_op
  16: [B2.15] (ImplicitCastExpr, LValueToRValue, MPI_Op)
  17: (MPI_Op)[B2.16] (CStyleCastExpr, NoOp, MPI_Op)
  18: [B2.2]([B2.5], [B2.7], [B2.9], [B2.13], [B2.17])
  19: int err = MPI_Reduce_local((const void *)v1, v2, v3, (MPI_Datatype)(v4.the_real_datatype), (MPI_Op)this->the_real_op);
  20: err
  21: [B2.20] (ImplicitCastExpr, LValueToRValue, int)
  22: [B2.21] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.22]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

inline Errhandler(MPI_Errhandler obj) : the_real_errhandler(obj) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Errhandler)
   3: the_real_errhandler([B1.2]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline Errhandler() : the_real_errhandler((MPI_Errhandler)335544320) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 335544320
   2: (MPI_Errhandler)[B1.1] (CStyleCastExpr, NoOp, MPI_Errhandler)
   3: the_real_errhandler(([B1.2])) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~MPI::Errhandler() noexcept
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

Errhandler(const MPI::Errhandler &obj) : the_real_errhandler(obj.the_real_errhandler) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1].the_real_errhandler
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_Errhandler)
   4: the_real_errhandler([B1.3]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

MPI::Errhandler &operator=(const MPI::Errhandler &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1].the_real_errhandler
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_Errhandler)
   4: this
   5: [B1.4]->the_real_errhandler
   6: [B1.5] = [B1.3]
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator==(const MPI::Errhandler &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_errhandler
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_Errhandler)
   4: obj
   5: [B1.4].the_real_errhandler
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, MPI_Errhandler)
   7: [B1.3] == [B1.6]
   8: return ([B1.7]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator!=(const MPI::Errhandler &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_errhandler
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_Errhandler)
   4: obj
   5: [B1.4].the_real_errhandler
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, MPI_Errhandler)
   7: [B1.3] != [B1.6]
   8: return ([B1.7]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline operator MPI_Errhandler *()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_errhandler
   3: &[B1.2]
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline operator MPI_Errhandler() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_errhandler
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_Errhandler)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

MPI::Errhandler &operator=(const MPI_Errhandler &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Errhandler)
   3: this
   4: [B1.3]->the_real_errhandler
   5: [B1.4] = [B1.2]
   6: this
   7: *[B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual void Free()
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: MPIR_Call_world_errhand
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Errhandler_free
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Errhandler *))
   3: this
   4: [B2.3]->the_real_errhandler
   5: &[B2.4]
   6: (MPI_Errhandler *)[B2.5] (CStyleCastExpr, NoOp, MPI_Errhandler *)
   7: [B2.2]([B2.6])
   8: int err = MPI_Errhandler_free((MPI_Errhandler *)&this->the_real_errhandler);
   9: err
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B2.10] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.11]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

inline Request(MPI_Request obj) : the_real_request(obj) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   3: the_real_request([B1.2]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline Request() : the_real_request((MPI_Request)738197504) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 738197504
   2: (MPI_Request)[B1.1] (CStyleCastExpr, NoOp, MPI_Request)
   3: the_real_request(([B1.2])) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~MPI::Request() noexcept
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

Request(const MPI::Request &obj) : the_real_request(obj.the_real_request) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1].the_real_request
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   4: the_real_request([B1.3]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

MPI::Request &operator=(const MPI::Request &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1].the_real_request
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   4: this
   5: [B1.4]->the_real_request
   6: [B1.5] = [B1.3]
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator==(const MPI::Request &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_request
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   4: obj
   5: [B1.4].the_real_request
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   7: [B1.3] == [B1.6]
   8: return ([B1.7]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator!=(const MPI::Request &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_request
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   4: obj
   5: [B1.4].the_real_request
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   7: [B1.3] != [B1.6]
   8: return ([B1.7]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline operator MPI_Request *()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_request
   3: &[B1.2]
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline operator MPI_Request() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_request
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

MPI::Request &operator=(const MPI_Request &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   3: this
   4: [B1.3]->the_real_request
   5: [B1.4] = [B1.2]
   6: this
   7: *[B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static bool Testany(int v1, MPI::Request v2[], int &v3, MPI::Status &v5)
 [B12 (ENTRY)]
   Succs (1): B11

 [B1]
   1: l2
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
   3: delete [] [B1.2]
   4: v4
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: 0
   7: [B1.5] != [B1.6]
   8: return [B1.7];
   Preds (1): B4
   Succs (1): B0

 [B2]
   1: i2
   2: [B2.1]++
   Preds (1): B3
   Succs (1): B4

 [B3]
   1: l2
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
   3: i2
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B3.2][[B3.4]]
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   7: v2
   8: [B3.7] (ImplicitCastExpr, LValueToRValue, class MPI::Request *)
   9: i2
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B3.8][[B3.10]]
  12: [B3.11].the_real_request
  13: [B3.12] = [B3.6]
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: i2
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: v1
   4: [B4.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B4.2] < [B4.4]
   T: for (...; [B4.5]; ...)
   Preds (2): B2 B5
   Succs (2): B3 B1

 [B5]
   1: int i2;
   2: 0
   3: i2
   4: [B5.3] = [B5.2]
   Preds (2): B6 B7
   Succs (1): B4

 [B6]
   1: MPIR_Call_world_errhand
   2: [B6.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B6.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B6.2]([B6.4])
   Preds (1): B7
   Succs (1): B5

 [B7]
   1: MPI_Testany
   2: [B7.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, MPI_Request *, int *, int *, MPI_Status *))
   3: v1
   4: [B7.3] (ImplicitCastExpr, LValueToRValue, int)
   5: l2
   6: [B7.5] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
   7: v3
   8: &[B7.7]
   9: v4
  10: &[B7.9]
  11: v5
  12: [B7.11].the_real_status
  13: &([B7.12])
  14: (MPI_Status *)[B7.13] (CStyleCastExpr, NoOp, MPI_Status *)
  15: [B7.2]([B7.4], [B7.6], [B7.8], [B7.10], [B7.14])
  16: int err = MPI_Testany(v1, l2, &v3, &v4, (MPI_Status *)&(v5.the_real_status));
  17: err
  18: [B7.17] (ImplicitCastExpr, LValueToRValue, int)
  19: [B7.18] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B7.19]
   Preds (1): B10
   Succs (2): B6 B5

 [B8]
   1: i2
   2: [B8.1]++
   Preds (1): B9
   Succs (1): B10

 [B9]
   1: v2
   2: [B9.1] (ImplicitCastExpr, LValueToRValue, class MPI::Request *)
   3: i2
   4: [B9.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B9.2][[B9.4]]
   6: [B9.5].the_real_request
   7: [B9.6] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   8: l2
   9: [B9.8] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
  10: i2
  11: [B9.10] (ImplicitCastExpr, LValueToRValue, int)
  12: [B9.9][[B9.11]]
  13: [B9.12] = [B9.7]
   Preds (1): B10
   Succs (1): B8

 [B10]
   1: i2
   2: [B10.1] (ImplicitCastExpr, LValueToRValue, int)
   3: v1
   4: [B10.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B10.2] < [B10.4]
   T: for (...; [B10.5]; ...)
   Preds (2): B8 B11
   Succs (2): B9 B7

 [B11]
   1: int v4;
   2: v1
   3: [B11.2] (ImplicitCastExpr, LValueToRValue, int)
   4: CFGNewAllocator(MPI_Request *)
   5: new MPI_Request [[B11.3]]
   6: MPI_Request *l2 = new MPI_Request [v1];
   7: int i2;
   8: 0
   9: i2
  10: [B11.9] = [B11.8]
   Preds (1): B12
   Succs (1): B10

 [B0 (EXIT)]
   Preds (1): B1

static bool Testany(int v1, MPI::Request v2[], int &v3)
 [B12 (ENTRY)]
   Succs (1): B11

 [B1]
   1: l2
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
   3: delete [] [B1.2]
   4: v4
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: 0
   7: [B1.5] != [B1.6]
   8: return [B1.7];
   Preds (1): B4
   Succs (1): B0

 [B2]
   1: i2
   2: [B2.1]++
   Preds (1): B3
   Succs (1): B4

 [B3]
   1: l2
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
   3: i2
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B3.2][[B3.4]]
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   7: v2
   8: [B3.7] (ImplicitCastExpr, LValueToRValue, class MPI::Request *)
   9: i2
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B3.8][[B3.10]]
  12: [B3.11].the_real_request
  13: [B3.12] = [B3.6]
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: i2
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: v1
   4: [B4.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B4.2] < [B4.4]
   T: for (...; [B4.5]; ...)
   Preds (2): B2 B5
   Succs (2): B3 B1

 [B5]
   1: int i2;
   2: 0
   3: i2
   4: [B5.3] = [B5.2]
   Preds (2): B6 B7
   Succs (1): B4

 [B6]
   1: MPIR_Call_world_errhand
   2: [B6.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B6.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B6.2]([B6.4])
   Preds (1): B7
   Succs (1): B5

 [B7]
   1: MPI_Testany
   2: [B7.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, MPI_Request *, int *, int *, MPI_Status *))
   3: v1
   4: [B7.3] (ImplicitCastExpr, LValueToRValue, int)
   5: l2
   6: [B7.5] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
   7: v3
   8: &[B7.7]
   9: v4
  10: &[B7.9]
  11: 1
  12: (MPI_Status *)[B7.11] (CStyleCastExpr, IntegralToPointer, MPI_Status *)
  13: [B7.2]([B7.4], [B7.6], [B7.8], [B7.10], [B7.12])
  14: int err = MPI_Testany(v1, l2, &v3, &v4, (MPI_Status *)1);
  15: err
  16: [B7.15] (ImplicitCastExpr, LValueToRValue, int)
  17: [B7.16] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B7.17]
   Preds (1): B10
   Succs (2): B6 B5

 [B8]
   1: i2
   2: [B8.1]++
   Preds (1): B9
   Succs (1): B10

 [B9]
   1: v2
   2: [B9.1] (ImplicitCastExpr, LValueToRValue, class MPI::Request *)
   3: i2
   4: [B9.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B9.2][[B9.4]]
   6: [B9.5].the_real_request
   7: [B9.6] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   8: l2
   9: [B9.8] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
  10: i2
  11: [B9.10] (ImplicitCastExpr, LValueToRValue, int)
  12: [B9.9][[B9.11]]
  13: [B9.12] = [B9.7]
   Preds (1): B10
   Succs (1): B8

 [B10]
   1: i2
   2: [B10.1] (ImplicitCastExpr, LValueToRValue, int)
   3: v1
   4: [B10.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B10.2] < [B10.4]
   T: for (...; [B10.5]; ...)
   Preds (2): B8 B11
   Succs (2): B9 B7

 [B11]
   1: int v4;
   2: v1
   3: [B11.2] (ImplicitCastExpr, LValueToRValue, int)
   4: CFGNewAllocator(MPI_Request *)
   5: new MPI_Request [[B11.3]]
   6: MPI_Request *l2 = new MPI_Request [v1];
   7: int i2;
   8: 0
   9: i2
  10: [B11.9] = [B11.8]
   Preds (1): B12
   Succs (1): B10

 [B0 (EXIT)]
   Preds (1): B1

static int Waitsome(int v1, MPI::Request v2[], int v4[], MPI::Status v5[])
 [B16 (ENTRY)]
   Succs (1): B15

 [B1]
   1: l5
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Status *)
   3: delete [] [B1.2]
   4: v3
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: return [B1.5];
   Preds (1): B4
   Succs (1): B0

 [B2]
   1: i5
   2: [B2.1]++
   Preds (1): B3
   Succs (1): B4

 [B3]
   1: operator=
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, struct MPI_Status &(*)(const struct MPI_Status &) noexcept)
   3: v5
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, class MPI::Status *)
   5: i5
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B3.4][[B3.6]]
   8: [B3.7].the_real_status
   9: l5
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, MPI_Status *)
  11: i5
  12: [B3.11] (ImplicitCastExpr, LValueToRValue, int)
  13: [B3.10][[B3.12]]
  14: [B3.13] (ImplicitCastExpr, NoOp, const MPI_Status)
  15: [B3.8] = [B3.14] (OperatorCall)
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: i5
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: v1
   4: [B4.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B4.2] < [B4.4]
   T: for (...; [B4.5]; ...)
   Preds (2): B2 B5
   Succs (2): B3 B1

 [B5]
   1: l2
   2: [B5.1] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
   3: delete [] [B5.2]
   4: int i5;
   5: 0
   6: i5
   7: [B5.6] = [B5.5]
   Preds (1): B8
   Succs (1): B4

 [B6]
   1: i2
   2: [B6.1]++
   Preds (1): B7
   Succs (1): B8

 [B7]
   1: l2
   2: [B7.1] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
   3: i2
   4: [B7.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B7.2][[B7.4]]
   6: [B7.5] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   7: v2
   8: [B7.7] (ImplicitCastExpr, LValueToRValue, class MPI::Request *)
   9: i2
  10: [B7.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B7.8][[B7.10]]
  12: [B7.11].the_real_request
  13: [B7.12] = [B7.6]
   Preds (1): B8
   Succs (1): B6

 [B8]
   1: i2
   2: [B8.1] (ImplicitCastExpr, LValueToRValue, int)
   3: v1
   4: [B8.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B8.2] < [B8.4]
   T: for (...; [B8.5]; ...)
   Preds (2): B6 B9
   Succs (2): B7 B5

 [B9]
   1: int i2;
   2: 0
   3: i2
   4: [B9.3] = [B9.2]
   Preds (2): B10 B11
   Succs (1): B8

 [B10]
   1: MPIR_Call_world_errhand
   2: [B10.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B10.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B10.2]([B10.4])
   Preds (1): B11
   Succs (1): B9

 [B11]
   1: MPI_Waitsome
   2: [B11.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, MPI_Request *, int *, int *, MPI_Status *))
   3: v1
   4: [B11.3] (ImplicitCastExpr, LValueToRValue, int)
   5: l2
   6: [B11.5] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
   7: v3
   8: &[B11.7]
   9: v4
  10: [B11.9] (ImplicitCastExpr, LValueToRValue, int *)
  11: l5
  12: [B11.11] (ImplicitCastExpr, LValueToRValue, MPI_Status *)
  13: [B11.2]([B11.4], [B11.6], [B11.8], [B11.10], [B11.12])
  14: int err = MPI_Waitsome(v1, l2, &v3, v4, l5);
  15: err
  16: [B11.15] (ImplicitCastExpr, LValueToRValue, int)
  17: [B11.16] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B11.17]
   Preds (1): B14
   Succs (2): B10 B9

 [B12]
   1: i2
   2: [B12.1]++
   Preds (1): B13
   Succs (1): B14

 [B13]
   1: v2
   2: [B13.1] (ImplicitCastExpr, LValueToRValue, class MPI::Request *)
   3: i2
   4: [B13.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B13.2][[B13.4]]
   6: [B13.5].the_real_request
   7: [B13.6] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   8: l2
   9: [B13.8] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
  10: i2
  11: [B13.10] (ImplicitCastExpr, LValueToRValue, int)
  12: [B13.9][[B13.11]]
  13: [B13.12] = [B13.7]
   Preds (1): B14
   Succs (1): B12

 [B14]
   1: i2
   2: [B14.1] (ImplicitCastExpr, LValueToRValue, int)
   3: v1
   4: [B14.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B14.2] < [B14.4]
   T: for (...; [B14.5]; ...)
   Preds (2): B12 B15
   Succs (2): B13 B11

 [B15]
   1: int v3;
   2: v1
   3: [B15.2] (ImplicitCastExpr, LValueToRValue, int)
   4: CFGNewAllocator(MPI_Request *)
   5: new MPI_Request [[B15.3]]
   6: MPI_Request *l2 = new MPI_Request [v1];
   7: v1
   8: [B15.7] (ImplicitCastExpr, LValueToRValue, int)
   9: CFGNewAllocator(MPI_Status *)
  10:  (CXXConstructExpr, MPI_Status [])
  11: new MPI_Status [[B15.8]]
  12: MPI_Status *l5 = new MPI_Status [v1];
  13: int i2;
  14: 0
  15: i2
  16: [B15.15] = [B15.14]
   Preds (1): B16
   Succs (1): B14

 [B0 (EXIT)]
   Preds (1): B1

static int Waitsome(int v1, MPI::Request v2[], int v4[])
 [B12 (ENTRY)]
   Succs (1): B11

 [B1]
   1: l2
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
   3: delete [] [B1.2]
   4: v3
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: return [B1.5];
   Preds (1): B4
   Succs (1): B0

 [B2]
   1: i2
   2: [B2.1]++
   Preds (1): B3
   Succs (1): B4

 [B3]
   1: l2
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
   3: i2
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B3.2][[B3.4]]
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   7: v2
   8: [B3.7] (ImplicitCastExpr, LValueToRValue, class MPI::Request *)
   9: i2
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B3.8][[B3.10]]
  12: [B3.11].the_real_request
  13: [B3.12] = [B3.6]
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: i2
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: v1
   4: [B4.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B4.2] < [B4.4]
   T: for (...; [B4.5]; ...)
   Preds (2): B2 B5
   Succs (2): B3 B1

 [B5]
   1: int i2;
   2: 0
   3: i2
   4: [B5.3] = [B5.2]
   Preds (2): B6 B7
   Succs (1): B4

 [B6]
   1: MPIR_Call_world_errhand
   2: [B6.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B6.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B6.2]([B6.4])
   Preds (1): B7
   Succs (1): B5

 [B7]
   1: MPI_Waitsome
   2: [B7.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, MPI_Request *, int *, int *, MPI_Status *))
   3: v1
   4: [B7.3] (ImplicitCastExpr, LValueToRValue, int)
   5: l2
   6: [B7.5] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
   7: v3
   8: &[B7.7]
   9: v4
  10: [B7.9] (ImplicitCastExpr, LValueToRValue, int *)
  11: 1
  12: (MPI_Status *)[B7.11] (CStyleCastExpr, IntegralToPointer, MPI_Status *)
  13: [B7.2]([B7.4], [B7.6], [B7.8], [B7.10], [B7.12])
  14: int err = MPI_Waitsome(v1, l2, &v3, v4, (MPI_Status *)1);
  15: err
  16: [B7.15] (ImplicitCastExpr, LValueToRValue, int)
  17: [B7.16] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B7.17]
   Preds (1): B10
   Succs (2): B6 B5

 [B8]
   1: i2
   2: [B8.1]++
   Preds (1): B9
   Succs (1): B10

 [B9]
   1: v2
   2: [B9.1] (ImplicitCastExpr, LValueToRValue, class MPI::Request *)
   3: i2
   4: [B9.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B9.2][[B9.4]]
   6: [B9.5].the_real_request
   7: [B9.6] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   8: l2
   9: [B9.8] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
  10: i2
  11: [B9.10] (ImplicitCastExpr, LValueToRValue, int)
  12: [B9.9][[B9.11]]
  13: [B9.12] = [B9.7]
   Preds (1): B10
   Succs (1): B8

 [B10]
   1: i2
   2: [B10.1] (ImplicitCastExpr, LValueToRValue, int)
   3: v1
   4: [B10.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B10.2] < [B10.4]
   T: for (...; [B10.5]; ...)
   Preds (2): B8 B11
   Succs (2): B9 B7

 [B11]
   1: int v3;
   2: v1
   3: [B11.2] (ImplicitCastExpr, LValueToRValue, int)
   4: CFGNewAllocator(MPI_Request *)
   5: new MPI_Request [[B11.3]]
   6: MPI_Request *l2 = new MPI_Request [v1];
   7: int i2;
   8: 0
   9: i2
  10: [B11.9] = [B11.8]
   Preds (1): B12
   Succs (1): B10

 [B0 (EXIT)]
   Preds (1): B1

virtual void Free()
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: MPIR_Call_world_errhand
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Request_free
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Request *))
   3: this
   4: [B2.3]->the_real_request
   5: &[B2.4]
   6: (MPI_Request *)[B2.5] (CStyleCastExpr, NoOp, MPI_Request *)
   7: [B2.2]([B2.6])
   8: int err = MPI_Request_free((MPI_Request *)&this->the_real_request);
   9: err
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B2.10] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.11]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

static bool Testall(int v1, MPI::Request v2[], MPI::Status v4[])
 [B16 (ENTRY)]
   Succs (1): B15

 [B1]
   1: l4
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Status *)
   3: delete [] [B1.2]
   4: v3
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: 0
   7: [B1.5] != [B1.6]
   8: return [B1.7];
   Preds (1): B4
   Succs (1): B0

 [B2]
   1: i4
   2: [B2.1]++
   Preds (1): B3
   Succs (1): B4

 [B3]
   1: operator=
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, struct MPI_Status &(*)(const struct MPI_Status &) noexcept)
   3: v4
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, class MPI::Status *)
   5: i4
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B3.4][[B3.6]]
   8: [B3.7].the_real_status
   9: l4
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, MPI_Status *)
  11: i4
  12: [B3.11] (ImplicitCastExpr, LValueToRValue, int)
  13: [B3.10][[B3.12]]
  14: [B3.13] (ImplicitCastExpr, NoOp, const MPI_Status)
  15: [B3.8] = [B3.14] (OperatorCall)
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: i4
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: v1
   4: [B4.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B4.2] < [B4.4]
   T: for (...; [B4.5]; ...)
   Preds (2): B2 B5
   Succs (2): B3 B1

 [B5]
   1: l2
   2: [B5.1] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
   3: delete [] [B5.2]
   4: int i4;
   5: 0
   6: i4
   7: [B5.6] = [B5.5]
   Preds (1): B8
   Succs (1): B4

 [B6]
   1: i2
   2: [B6.1]++
   Preds (1): B7
   Succs (1): B8

 [B7]
   1: l2
   2: [B7.1] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
   3: i2
   4: [B7.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B7.2][[B7.4]]
   6: [B7.5] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   7: v2
   8: [B7.7] (ImplicitCastExpr, LValueToRValue, class MPI::Request *)
   9: i2
  10: [B7.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B7.8][[B7.10]]
  12: [B7.11].the_real_request
  13: [B7.12] = [B7.6]
   Preds (1): B8
   Succs (1): B6

 [B8]
   1: i2
   2: [B8.1] (ImplicitCastExpr, LValueToRValue, int)
   3: v1
   4: [B8.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B8.2] < [B8.4]
   T: for (...; [B8.5]; ...)
   Preds (2): B6 B9
   Succs (2): B7 B5

 [B9]
   1: int i2;
   2: 0
   3: i2
   4: [B9.3] = [B9.2]
   Preds (2): B10 B11
   Succs (1): B8

 [B10]
   1: MPIR_Call_world_errhand
   2: [B10.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B10.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B10.2]([B10.4])
   Preds (1): B11
   Succs (1): B9

 [B11]
   1: MPI_Testall
   2: [B11.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, MPI_Request *, int *, MPI_Status *))
   3: v1
   4: [B11.3] (ImplicitCastExpr, LValueToRValue, int)
   5: l2
   6: [B11.5] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
   7: v3
   8: &[B11.7]
   9: l4
  10: [B11.9] (ImplicitCastExpr, LValueToRValue, MPI_Status *)
  11: [B11.2]([B11.4], [B11.6], [B11.8], [B11.10])
  12: int err = MPI_Testall(v1, l2, &v3, l4);
  13: err
  14: [B11.13] (ImplicitCastExpr, LValueToRValue, int)
  15: [B11.14] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B11.15]
   Preds (1): B14
   Succs (2): B10 B9

 [B12]
   1: i2
   2: [B12.1]++
   Preds (1): B13
   Succs (1): B14

 [B13]
   1: v2
   2: [B13.1] (ImplicitCastExpr, LValueToRValue, class MPI::Request *)
   3: i2
   4: [B13.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B13.2][[B13.4]]
   6: [B13.5].the_real_request
   7: [B13.6] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   8: l2
   9: [B13.8] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
  10: i2
  11: [B13.10] (ImplicitCastExpr, LValueToRValue, int)
  12: [B13.9][[B13.11]]
  13: [B13.12] = [B13.7]
   Preds (1): B14
   Succs (1): B12

 [B14]
   1: i2
   2: [B14.1] (ImplicitCastExpr, LValueToRValue, int)
   3: v1
   4: [B14.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B14.2] < [B14.4]
   T: for (...; [B14.5]; ...)
   Preds (2): B12 B15
   Succs (2): B13 B11

 [B15]
   1: int v3;
   2: v1
   3: [B15.2] (ImplicitCastExpr, LValueToRValue, int)
   4: CFGNewAllocator(MPI_Request *)
   5: new MPI_Request [[B15.3]]
   6: MPI_Request *l2 = new MPI_Request [v1];
   7: v1
   8: [B15.7] (ImplicitCastExpr, LValueToRValue, int)
   9: CFGNewAllocator(MPI_Status *)
  10:  (CXXConstructExpr, MPI_Status [])
  11: new MPI_Status [[B15.8]]
  12: MPI_Status *l4 = new MPI_Status [v1];
  13: int i2;
  14: 0
  15: i2
  16: [B15.15] = [B15.14]
   Preds (1): B16
   Succs (1): B14

 [B0 (EXIT)]
   Preds (1): B1

static bool Testall(int v1, MPI::Request v2[])
 [B12 (ENTRY)]
   Succs (1): B11

 [B1]
   1: l2
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
   3: delete [] [B1.2]
   4: v3
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: 0
   7: [B1.5] != [B1.6]
   8: return [B1.7];
   Preds (1): B4
   Succs (1): B0

 [B2]
   1: i2
   2: [B2.1]++
   Preds (1): B3
   Succs (1): B4

 [B3]
   1: l2
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
   3: i2
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B3.2][[B3.4]]
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   7: v2
   8: [B3.7] (ImplicitCastExpr, LValueToRValue, class MPI::Request *)
   9: i2
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B3.8][[B3.10]]
  12: [B3.11].the_real_request
  13: [B3.12] = [B3.6]
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: i2
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: v1
   4: [B4.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B4.2] < [B4.4]
   T: for (...; [B4.5]; ...)
   Preds (2): B2 B5
   Succs (2): B3 B1

 [B5]
   1: int i2;
   2: 0
   3: i2
   4: [B5.3] = [B5.2]
   Preds (2): B6 B7
   Succs (1): B4

 [B6]
   1: MPIR_Call_world_errhand
   2: [B6.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B6.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B6.2]([B6.4])
   Preds (1): B7
   Succs (1): B5

 [B7]
   1: MPI_Testall
   2: [B7.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, MPI_Request *, int *, MPI_Status *))
   3: v1
   4: [B7.3] (ImplicitCastExpr, LValueToRValue, int)
   5: l2
   6: [B7.5] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
   7: v3
   8: &[B7.7]
   9: 1
  10: (MPI_Status *)[B7.9] (CStyleCastExpr, IntegralToPointer, MPI_Status *)
  11: [B7.2]([B7.4], [B7.6], [B7.8], [B7.10])
  12: int err = MPI_Testall(v1, l2, &v3, (MPI_Status *)1);
  13: err
  14: [B7.13] (ImplicitCastExpr, LValueToRValue, int)
  15: [B7.14] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B7.15]
   Preds (1): B10
   Succs (2): B6 B5

 [B8]
   1: i2
   2: [B8.1]++
   Preds (1): B9
   Succs (1): B10

 [B9]
   1: v2
   2: [B9.1] (ImplicitCastExpr, LValueToRValue, class MPI::Request *)
   3: i2
   4: [B9.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B9.2][[B9.4]]
   6: [B9.5].the_real_request
   7: [B9.6] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   8: l2
   9: [B9.8] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
  10: i2
  11: [B9.10] (ImplicitCastExpr, LValueToRValue, int)
  12: [B9.9][[B9.11]]
  13: [B9.12] = [B9.7]
   Preds (1): B10
   Succs (1): B8

 [B10]
   1: i2
   2: [B10.1] (ImplicitCastExpr, LValueToRValue, int)
   3: v1
   4: [B10.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B10.2] < [B10.4]
   T: for (...; [B10.5]; ...)
   Preds (2): B8 B11
   Succs (2): B9 B7

 [B11]
   1: int v3;
   2: v1
   3: [B11.2] (ImplicitCastExpr, LValueToRValue, int)
   4: CFGNewAllocator(MPI_Request *)
   5: new MPI_Request [[B11.3]]
   6: MPI_Request *l2 = new MPI_Request [v1];
   7: int i2;
   8: 0
   9: i2
  10: [B11.9] = [B11.8]
   Preds (1): B12
   Succs (1): B10

 [B0 (EXIT)]
   Preds (1): B1

virtual void Wait(MPI::Status &v2)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: MPIR_Call_world_errhand
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Wait
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Request *, MPI_Status *))
   3: this
   4: [B2.3]->the_real_request
   5: &[B2.4]
   6: (MPI_Request *)[B2.5] (CStyleCastExpr, NoOp, MPI_Request *)
   7: v2
   8: [B2.7].the_real_status
   9: &([B2.8])
  10: (MPI_Status *)[B2.9] (CStyleCastExpr, NoOp, MPI_Status *)
  11: [B2.2]([B2.6], [B2.10])
  12: int err = MPI_Wait((MPI_Request *)&this->the_real_request, (MPI_Status *)&(v2.the_real_status));
  13: err
  14: [B2.13] (ImplicitCastExpr, LValueToRValue, int)
  15: [B2.14] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.15]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Wait()
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: MPIR_Call_world_errhand
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Wait
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Request *, MPI_Status *))
   3: this
   4: [B2.3]->the_real_request
   5: &[B2.4]
   6: (MPI_Request *)[B2.5] (CStyleCastExpr, NoOp, MPI_Request *)
   7: 1
   8: (MPI_Status *)[B2.7] (CStyleCastExpr, IntegralToPointer, MPI_Status *)
   9: [B2.2]([B2.6], [B2.8])
  10: int err = MPI_Wait((MPI_Request *)&this->the_real_request, (MPI_Status *)1);
  11: err
  12: [B2.11] (ImplicitCastExpr, LValueToRValue, int)
  13: [B2.12] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.13]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

static int Testsome(int v1, MPI::Request v2[], int v4[], MPI::Status v5[])
 [B16 (ENTRY)]
   Succs (1): B15

 [B1]
   1: l5
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Status *)
   3: delete [] [B1.2]
   4: v3
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: return [B1.5];
   Preds (1): B4
   Succs (1): B0

 [B2]
   1: i5
   2: [B2.1]++
   Preds (1): B3
   Succs (1): B4

 [B3]
   1: operator=
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, struct MPI_Status &(*)(const struct MPI_Status &) noexcept)
   3: v5
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, class MPI::Status *)
   5: i5
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B3.4][[B3.6]]
   8: [B3.7].the_real_status
   9: l5
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, MPI_Status *)
  11: i5
  12: [B3.11] (ImplicitCastExpr, LValueToRValue, int)
  13: [B3.10][[B3.12]]
  14: [B3.13] (ImplicitCastExpr, NoOp, const MPI_Status)
  15: [B3.8] = [B3.14] (OperatorCall)
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: i5
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: v1
   4: [B4.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B4.2] < [B4.4]
   T: for (...; [B4.5]; ...)
   Preds (2): B2 B5
   Succs (2): B3 B1

 [B5]
   1: l2
   2: [B5.1] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
   3: delete [] [B5.2]
   4: int i5;
   5: 0
   6: i5
   7: [B5.6] = [B5.5]
   Preds (1): B8
   Succs (1): B4

 [B6]
   1: i2
   2: [B6.1]++
   Preds (1): B7
   Succs (1): B8

 [B7]
   1: l2
   2: [B7.1] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
   3: i2
   4: [B7.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B7.2][[B7.4]]
   6: [B7.5] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   7: v2
   8: [B7.7] (ImplicitCastExpr, LValueToRValue, class MPI::Request *)
   9: i2
  10: [B7.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B7.8][[B7.10]]
  12: [B7.11].the_real_request
  13: [B7.12] = [B7.6]
   Preds (1): B8
   Succs (1): B6

 [B8]
   1: i2
   2: [B8.1] (ImplicitCastExpr, LValueToRValue, int)
   3: v1
   4: [B8.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B8.2] < [B8.4]
   T: for (...; [B8.5]; ...)
   Preds (2): B6 B9
   Succs (2): B7 B5

 [B9]
   1: int i2;
   2: 0
   3: i2
   4: [B9.3] = [B9.2]
   Preds (2): B10 B11
   Succs (1): B8

 [B10]
   1: MPIR_Call_world_errhand
   2: [B10.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B10.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B10.2]([B10.4])
   Preds (1): B11
   Succs (1): B9

 [B11]
   1: MPI_Testsome
   2: [B11.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, MPI_Request *, int *, int *, MPI_Status *))
   3: v1
   4: [B11.3] (ImplicitCastExpr, LValueToRValue, int)
   5: l2
   6: [B11.5] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
   7: v3
   8: &[B11.7]
   9: v4
  10: [B11.9] (ImplicitCastExpr, LValueToRValue, int *)
  11: l5
  12: [B11.11] (ImplicitCastExpr, LValueToRValue, MPI_Status *)
  13: [B11.2]([B11.4], [B11.6], [B11.8], [B11.10], [B11.12])
  14: int err = MPI_Testsome(v1, l2, &v3, v4, l5);
  15: err
  16: [B11.15] (ImplicitCastExpr, LValueToRValue, int)
  17: [B11.16] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B11.17]
   Preds (1): B14
   Succs (2): B10 B9

 [B12]
   1: i2
   2: [B12.1]++
   Preds (1): B13
   Succs (1): B14

 [B13]
   1: v2
   2: [B13.1] (ImplicitCastExpr, LValueToRValue, class MPI::Request *)
   3: i2
   4: [B13.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B13.2][[B13.4]]
   6: [B13.5].the_real_request
   7: [B13.6] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   8: l2
   9: [B13.8] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
  10: i2
  11: [B13.10] (ImplicitCastExpr, LValueToRValue, int)
  12: [B13.9][[B13.11]]
  13: [B13.12] = [B13.7]
   Preds (1): B14
   Succs (1): B12

 [B14]
   1: i2
   2: [B14.1] (ImplicitCastExpr, LValueToRValue, int)
   3: v1
   4: [B14.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B14.2] < [B14.4]
   T: for (...; [B14.5]; ...)
   Preds (2): B12 B15
   Succs (2): B13 B11

 [B15]
   1: int v3;
   2: v1
   3: [B15.2] (ImplicitCastExpr, LValueToRValue, int)
   4: CFGNewAllocator(MPI_Request *)
   5: new MPI_Request [[B15.3]]
   6: MPI_Request *l2 = new MPI_Request [v1];
   7: v1
   8: [B15.7] (ImplicitCastExpr, LValueToRValue, int)
   9: CFGNewAllocator(MPI_Status *)
  10:  (CXXConstructExpr, MPI_Status [])
  11: new MPI_Status [[B15.8]]
  12: MPI_Status *l5 = new MPI_Status [v1];
  13: int i2;
  14: 0
  15: i2
  16: [B15.15] = [B15.14]
   Preds (1): B16
   Succs (1): B14

 [B0 (EXIT)]
   Preds (1): B1

static int Testsome(int v1, MPI::Request v2[], int v4[])
 [B12 (ENTRY)]
   Succs (1): B11

 [B1]
   1: l2
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
   3: delete [] [B1.2]
   4: v3
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: return [B1.5];
   Preds (1): B4
   Succs (1): B0

 [B2]
   1: i2
   2: [B2.1]++
   Preds (1): B3
   Succs (1): B4

 [B3]
   1: l2
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
   3: i2
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B3.2][[B3.4]]
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   7: v2
   8: [B3.7] (ImplicitCastExpr, LValueToRValue, class MPI::Request *)
   9: i2
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B3.8][[B3.10]]
  12: [B3.11].the_real_request
  13: [B3.12] = [B3.6]
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: i2
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: v1
   4: [B4.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B4.2] < [B4.4]
   T: for (...; [B4.5]; ...)
   Preds (2): B2 B5
   Succs (2): B3 B1

 [B5]
   1: int i2;
   2: 0
   3: i2
   4: [B5.3] = [B5.2]
   Preds (2): B6 B7
   Succs (1): B4

 [B6]
   1: MPIR_Call_world_errhand
   2: [B6.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B6.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B6.2]([B6.4])
   Preds (1): B7
   Succs (1): B5

 [B7]
   1: MPI_Testsome
   2: [B7.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, MPI_Request *, int *, int *, MPI_Status *))
   3: v1
   4: [B7.3] (ImplicitCastExpr, LValueToRValue, int)
   5: l2
   6: [B7.5] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
   7: v3
   8: &[B7.7]
   9: v4
  10: [B7.9] (ImplicitCastExpr, LValueToRValue, int *)
  11: 1
  12: (MPI_Status *)[B7.11] (CStyleCastExpr, IntegralToPointer, MPI_Status *)
  13: [B7.2]([B7.4], [B7.6], [B7.8], [B7.10], [B7.12])
  14: int err = MPI_Testsome(v1, l2, &v3, v4, (MPI_Status *)1);
  15: err
  16: [B7.15] (ImplicitCastExpr, LValueToRValue, int)
  17: [B7.16] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B7.17]
   Preds (1): B10
   Succs (2): B6 B5

 [B8]
   1: i2
   2: [B8.1]++
   Preds (1): B9
   Succs (1): B10

 [B9]
   1: v2
   2: [B9.1] (ImplicitCastExpr, LValueToRValue, class MPI::Request *)
   3: i2
   4: [B9.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B9.2][[B9.4]]
   6: [B9.5].the_real_request
   7: [B9.6] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   8: l2
   9: [B9.8] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
  10: i2
  11: [B9.10] (ImplicitCastExpr, LValueToRValue, int)
  12: [B9.9][[B9.11]]
  13: [B9.12] = [B9.7]
   Preds (1): B10
   Succs (1): B8

 [B10]
   1: i2
   2: [B10.1] (ImplicitCastExpr, LValueToRValue, int)
   3: v1
   4: [B10.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B10.2] < [B10.4]
   T: for (...; [B10.5]; ...)
   Preds (2): B8 B11
   Succs (2): B9 B7

 [B11]
   1: int v3;
   2: v1
   3: [B11.2] (ImplicitCastExpr, LValueToRValue, int)
   4: CFGNewAllocator(MPI_Request *)
   5: new MPI_Request [[B11.3]]
   6: MPI_Request *l2 = new MPI_Request [v1];
   7: int i2;
   8: 0
   9: i2
  10: [B11.9] = [B11.8]
   Preds (1): B12
   Succs (1): B10

 [B0 (EXIT)]
   Preds (1): B1

static void Waitall(int v1, MPI::Request v2[], MPI::Status v3[])
 [B16 (ENTRY)]
   Succs (1): B15

 [B1]
   1: l3
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Status *)
   3: delete [] [B1.2]
   Preds (1): B4
   Succs (1): B0

 [B2]
   1: i3
   2: [B2.1]++
   Preds (1): B3
   Succs (1): B4

 [B3]
   1: operator=
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, struct MPI_Status &(*)(const struct MPI_Status &) noexcept)
   3: v3
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, class MPI::Status *)
   5: i3
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, int)
   7: [B3.4][[B3.6]]
   8: [B3.7].the_real_status
   9: l3
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, MPI_Status *)
  11: i3
  12: [B3.11] (ImplicitCastExpr, LValueToRValue, int)
  13: [B3.10][[B3.12]]
  14: [B3.13] (ImplicitCastExpr, NoOp, const MPI_Status)
  15: [B3.8] = [B3.14] (OperatorCall)
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: i3
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: v1
   4: [B4.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B4.2] < [B4.4]
   T: for (...; [B4.5]; ...)
   Preds (2): B2 B5
   Succs (2): B3 B1

 [B5]
   1: l2
   2: [B5.1] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
   3: delete [] [B5.2]
   4: int i3;
   5: 0
   6: i3
   7: [B5.6] = [B5.5]
   Preds (1): B8
   Succs (1): B4

 [B6]
   1: i2
   2: [B6.1]++
   Preds (1): B7
   Succs (1): B8

 [B7]
   1: l2
   2: [B7.1] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
   3: i2
   4: [B7.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B7.2][[B7.4]]
   6: [B7.5] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   7: v2
   8: [B7.7] (ImplicitCastExpr, LValueToRValue, class MPI::Request *)
   9: i2
  10: [B7.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B7.8][[B7.10]]
  12: [B7.11].the_real_request
  13: [B7.12] = [B7.6]
   Preds (1): B8
   Succs (1): B6

 [B8]
   1: i2
   2: [B8.1] (ImplicitCastExpr, LValueToRValue, int)
   3: v1
   4: [B8.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B8.2] < [B8.4]
   T: for (...; [B8.5]; ...)
   Preds (2): B6 B9
   Succs (2): B7 B5

 [B9]
   1: int i2;
   2: 0
   3: i2
   4: [B9.3] = [B9.2]
   Preds (2): B10 B11
   Succs (1): B8

 [B10]
   1: MPIR_Call_world_errhand
   2: [B10.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B10.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B10.2]([B10.4])
   Preds (1): B11
   Succs (1): B9

 [B11]
   1: MPI_Waitall
   2: [B11.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, MPI_Request *, MPI_Status *))
   3: v1
   4: [B11.3] (ImplicitCastExpr, LValueToRValue, int)
   5: l2
   6: [B11.5] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
   7: l3
   8: [B11.7] (ImplicitCastExpr, LValueToRValue, MPI_Status *)
   9: [B11.2]([B11.4], [B11.6], [B11.8])
  10: int err = MPI_Waitall(v1, l2, l3);
  11: err
  12: [B11.11] (ImplicitCastExpr, LValueToRValue, int)
  13: [B11.12] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B11.13]
   Preds (1): B14
   Succs (2): B10 B9

 [B12]
   1: i2
   2: [B12.1]++
   Preds (1): B13
   Succs (1): B14

 [B13]
   1: v2
   2: [B13.1] (ImplicitCastExpr, LValueToRValue, class MPI::Request *)
   3: i2
   4: [B13.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B13.2][[B13.4]]
   6: [B13.5].the_real_request
   7: [B13.6] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   8: l2
   9: [B13.8] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
  10: i2
  11: [B13.10] (ImplicitCastExpr, LValueToRValue, int)
  12: [B13.9][[B13.11]]
  13: [B13.12] = [B13.7]
   Preds (1): B14
   Succs (1): B12

 [B14]
   1: i2
   2: [B14.1] (ImplicitCastExpr, LValueToRValue, int)
   3: v1
   4: [B14.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B14.2] < [B14.4]
   T: for (...; [B14.5]; ...)
   Preds (2): B12 B15
   Succs (2): B13 B11

 [B15]
   1: v1
   2: [B15.1] (ImplicitCastExpr, LValueToRValue, int)
   3: CFGNewAllocator(MPI_Request *)
   4: new MPI_Request [[B15.2]]
   5: MPI_Request *l2 = new MPI_Request [v1];
   6: v1
   7: [B15.6] (ImplicitCastExpr, LValueToRValue, int)
   8: CFGNewAllocator(MPI_Status *)
   9:  (CXXConstructExpr, MPI_Status [])
  10: new MPI_Status [[B15.7]]
  11: MPI_Status *l3 = new MPI_Status [v1];
  12: int i2;
  13: 0
  14: i2
  15: [B15.14] = [B15.13]
   Preds (1): B16
   Succs (1): B14

 [B0 (EXIT)]
   Preds (1): B1

static void Waitall(int v1, MPI::Request v2[])
 [B12 (ENTRY)]
   Succs (1): B11

 [B1]
   1: l2
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
   3: delete [] [B1.2]
   Preds (1): B4
   Succs (1): B0

 [B2]
   1: i2
   2: [B2.1]++
   Preds (1): B3
   Succs (1): B4

 [B3]
   1: l2
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
   3: i2
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B3.2][[B3.4]]
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   7: v2
   8: [B3.7] (ImplicitCastExpr, LValueToRValue, class MPI::Request *)
   9: i2
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B3.8][[B3.10]]
  12: [B3.11].the_real_request
  13: [B3.12] = [B3.6]
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: i2
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: v1
   4: [B4.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B4.2] < [B4.4]
   T: for (...; [B4.5]; ...)
   Preds (2): B2 B5
   Succs (2): B3 B1

 [B5]
   1: int i2;
   2: 0
   3: i2
   4: [B5.3] = [B5.2]
   Preds (2): B6 B7
   Succs (1): B4

 [B6]
   1: MPIR_Call_world_errhand
   2: [B6.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B6.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B6.2]([B6.4])
   Preds (1): B7
   Succs (1): B5

 [B7]
   1: MPI_Waitall
   2: [B7.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, MPI_Request *, MPI_Status *))
   3: v1
   4: [B7.3] (ImplicitCastExpr, LValueToRValue, int)
   5: l2
   6: [B7.5] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
   7: 1
   8: (MPI_Status *)[B7.7] (CStyleCastExpr, IntegralToPointer, MPI_Status *)
   9: [B7.2]([B7.4], [B7.6], [B7.8])
  10: int err = MPI_Waitall(v1, l2, (MPI_Status *)1);
  11: err
  12: [B7.11] (ImplicitCastExpr, LValueToRValue, int)
  13: [B7.12] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B7.13]
   Preds (1): B10
   Succs (2): B6 B5

 [B8]
   1: i2
   2: [B8.1]++
   Preds (1): B9
   Succs (1): B10

 [B9]
   1: v2
   2: [B9.1] (ImplicitCastExpr, LValueToRValue, class MPI::Request *)
   3: i2
   4: [B9.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B9.2][[B9.4]]
   6: [B9.5].the_real_request
   7: [B9.6] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   8: l2
   9: [B9.8] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
  10: i2
  11: [B9.10] (ImplicitCastExpr, LValueToRValue, int)
  12: [B9.9][[B9.11]]
  13: [B9.12] = [B9.7]
   Preds (1): B10
   Succs (1): B8

 [B10]
   1: i2
   2: [B10.1] (ImplicitCastExpr, LValueToRValue, int)
   3: v1
   4: [B10.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B10.2] < [B10.4]
   T: for (...; [B10.5]; ...)
   Preds (2): B8 B11
   Succs (2): B9 B7

 [B11]
   1: v1
   2: [B11.1] (ImplicitCastExpr, LValueToRValue, int)
   3: CFGNewAllocator(MPI_Request *)
   4: new MPI_Request [[B11.2]]
   5: MPI_Request *l2 = new MPI_Request [v1];
   6: int i2;
   7: 0
   8: i2
   9: [B11.8] = [B11.7]
   Preds (1): B12
   Succs (1): B10

 [B0 (EXIT)]
   Preds (1): B1

static int Waitany(int v1, MPI::Request v2[], MPI::Status &v4)
 [B12 (ENTRY)]
   Succs (1): B11

 [B1]
   1: l2
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
   3: delete [] [B1.2]
   4: v3
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: return [B1.5];
   Preds (1): B4
   Succs (1): B0

 [B2]
   1: i2
   2: [B2.1]++
   Preds (1): B3
   Succs (1): B4

 [B3]
   1: l2
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
   3: i2
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B3.2][[B3.4]]
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   7: v2
   8: [B3.7] (ImplicitCastExpr, LValueToRValue, class MPI::Request *)
   9: i2
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B3.8][[B3.10]]
  12: [B3.11].the_real_request
  13: [B3.12] = [B3.6]
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: i2
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: v1
   4: [B4.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B4.2] < [B4.4]
   T: for (...; [B4.5]; ...)
   Preds (2): B2 B5
   Succs (2): B3 B1

 [B5]
   1: int i2;
   2: 0
   3: i2
   4: [B5.3] = [B5.2]
   Preds (2): B6 B7
   Succs (1): B4

 [B6]
   1: MPIR_Call_world_errhand
   2: [B6.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B6.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B6.2]([B6.4])
   Preds (1): B7
   Succs (1): B5

 [B7]
   1: MPI_Waitany
   2: [B7.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, MPI_Request *, int *, MPI_Status *))
   3: v1
   4: [B7.3] (ImplicitCastExpr, LValueToRValue, int)
   5: l2
   6: [B7.5] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
   7: v3
   8: &[B7.7]
   9: v4
  10: [B7.9].the_real_status
  11: &([B7.10])
  12: (MPI_Status *)[B7.11] (CStyleCastExpr, NoOp, MPI_Status *)
  13: [B7.2]([B7.4], [B7.6], [B7.8], [B7.12])
  14: int err = MPI_Waitany(v1, l2, &v3, (MPI_Status *)&(v4.the_real_status));
  15: err
  16: [B7.15] (ImplicitCastExpr, LValueToRValue, int)
  17: [B7.16] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B7.17]
   Preds (1): B10
   Succs (2): B6 B5

 [B8]
   1: i2
   2: [B8.1]++
   Preds (1): B9
   Succs (1): B10

 [B9]
   1: v2
   2: [B9.1] (ImplicitCastExpr, LValueToRValue, class MPI::Request *)
   3: i2
   4: [B9.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B9.2][[B9.4]]
   6: [B9.5].the_real_request
   7: [B9.6] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   8: l2
   9: [B9.8] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
  10: i2
  11: [B9.10] (ImplicitCastExpr, LValueToRValue, int)
  12: [B9.9][[B9.11]]
  13: [B9.12] = [B9.7]
   Preds (1): B10
   Succs (1): B8

 [B10]
   1: i2
   2: [B10.1] (ImplicitCastExpr, LValueToRValue, int)
   3: v1
   4: [B10.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B10.2] < [B10.4]
   T: for (...; [B10.5]; ...)
   Preds (2): B8 B11
   Succs (2): B9 B7

 [B11]
   1: int v3;
   2: v1
   3: [B11.2] (ImplicitCastExpr, LValueToRValue, int)
   4: CFGNewAllocator(MPI_Request *)
   5: new MPI_Request [[B11.3]]
   6: MPI_Request *l2 = new MPI_Request [v1];
   7: int i2;
   8: 0
   9: i2
  10: [B11.9] = [B11.8]
   Preds (1): B12
   Succs (1): B10

 [B0 (EXIT)]
   Preds (1): B1

static int Waitany(int v1, MPI::Request v2[])
 [B12 (ENTRY)]
   Succs (1): B11

 [B1]
   1: l2
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
   3: delete [] [B1.2]
   4: v3
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: return [B1.5];
   Preds (1): B4
   Succs (1): B0

 [B2]
   1: i2
   2: [B2.1]++
   Preds (1): B3
   Succs (1): B4

 [B3]
   1: l2
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
   3: i2
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B3.2][[B3.4]]
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   7: v2
   8: [B3.7] (ImplicitCastExpr, LValueToRValue, class MPI::Request *)
   9: i2
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B3.8][[B3.10]]
  12: [B3.11].the_real_request
  13: [B3.12] = [B3.6]
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: i2
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: v1
   4: [B4.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B4.2] < [B4.4]
   T: for (...; [B4.5]; ...)
   Preds (2): B2 B5
   Succs (2): B3 B1

 [B5]
   1: int i2;
   2: 0
   3: i2
   4: [B5.3] = [B5.2]
   Preds (2): B6 B7
   Succs (1): B4

 [B6]
   1: MPIR_Call_world_errhand
   2: [B6.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B6.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B6.2]([B6.4])
   Preds (1): B7
   Succs (1): B5

 [B7]
   1: MPI_Waitany
   2: [B7.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, MPI_Request *, int *, MPI_Status *))
   3: v1
   4: [B7.3] (ImplicitCastExpr, LValueToRValue, int)
   5: l2
   6: [B7.5] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
   7: v3
   8: &[B7.7]
   9: 1
  10: (MPI_Status *)[B7.9] (CStyleCastExpr, IntegralToPointer, MPI_Status *)
  11: [B7.2]([B7.4], [B7.6], [B7.8], [B7.10])
  12: int err = MPI_Waitany(v1, l2, &v3, (MPI_Status *)1);
  13: err
  14: [B7.13] (ImplicitCastExpr, LValueToRValue, int)
  15: [B7.14] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B7.15]
   Preds (1): B10
   Succs (2): B6 B5

 [B8]
   1: i2
   2: [B8.1]++
   Preds (1): B9
   Succs (1): B10

 [B9]
   1: v2
   2: [B9.1] (ImplicitCastExpr, LValueToRValue, class MPI::Request *)
   3: i2
   4: [B9.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B9.2][[B9.4]]
   6: [B9.5].the_real_request
   7: [B9.6] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   8: l2
   9: [B9.8] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
  10: i2
  11: [B9.10] (ImplicitCastExpr, LValueToRValue, int)
  12: [B9.9][[B9.11]]
  13: [B9.12] = [B9.7]
   Preds (1): B10
   Succs (1): B8

 [B10]
   1: i2
   2: [B10.1] (ImplicitCastExpr, LValueToRValue, int)
   3: v1
   4: [B10.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B10.2] < [B10.4]
   T: for (...; [B10.5]; ...)
   Preds (2): B8 B11
   Succs (2): B9 B7

 [B11]
   1: int v3;
   2: v1
   3: [B11.2] (ImplicitCastExpr, LValueToRValue, int)
   4: CFGNewAllocator(MPI_Request *)
   5: new MPI_Request [[B11.3]]
   6: MPI_Request *l2 = new MPI_Request [v1];
   7: int i2;
   8: 0
   9: i2
  10: [B11.9] = [B11.8]
   Preds (1): B12
   Succs (1): B10

 [B0 (EXIT)]
   Preds (1): B1

virtual bool Test(MPI::Status &v3)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v2
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 0
   4: [B1.2] != [B1.3]
   5: return [B1.4];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: int v2;
   2: MPI_Test
   3: [B3.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Request *, int *, MPI_Status *))
   4: this
   5: [B3.4]->the_real_request
   6: &[B3.5]
   7: (MPI_Request *)[B3.6] (CStyleCastExpr, NoOp, MPI_Request *)
   8: v2
   9: &[B3.8]
  10: v3
  11: [B3.10].the_real_status
  12: &([B3.11])
  13: (MPI_Status *)[B3.12] (CStyleCastExpr, NoOp, MPI_Status *)
  14: [B3.3]([B3.7], [B3.9], [B3.13])
  15: int err = MPI_Test((MPI_Request *)&this->the_real_request, &v2, (MPI_Status *)&(v3.the_real_status));
  16: err
  17: [B3.16] (ImplicitCastExpr, LValueToRValue, int)
  18: [B3.17] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.18]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual bool Test()
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v2
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 0
   4: [B1.2] != [B1.3]
   5: return [B1.4];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: int v2;
   2: MPI_Test
   3: [B3.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Request *, int *, MPI_Status *))
   4: this
   5: [B3.4]->the_real_request
   6: &[B3.5]
   7: (MPI_Request *)[B3.6] (CStyleCastExpr, NoOp, MPI_Request *)
   8: v2
   9: &[B3.8]
  10: 1
  11: (MPI_Status *)[B3.10] (CStyleCastExpr, IntegralToPointer, MPI_Status *)
  12: [B3.3]([B3.7], [B3.9], [B3.11])
  13: int err = MPI_Test((MPI_Request *)&this->the_real_request, &v2, (MPI_Status *)1);
  14: err
  15: [B3.14] (ImplicitCastExpr, LValueToRValue, int)
  16: [B3.15] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.16]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual void Cancel() const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: MPIR_Call_world_errhand
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Cancel
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Request *))
   3: this
   4: [B2.3]->the_real_request
   5: &[B2.4]
   6: (MPI_Request *)[B2.5] (CStyleCastExpr, NoOp, MPI_Request *)
   7: [B2.2]([B2.6])
   8: int err = MPI_Cancel((MPI_Request *)&this->the_real_request);
   9: err
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B2.10] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.11]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual bool Get_status(MPI::Status &v3) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v2
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 0
   4: [B1.2] != [B1.3]
   5: return [B1.4];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: int v2;
   2: MPI_Request_get_status
   3: [B3.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Request, int *, MPI_Status *))
   4: this
   5: [B3.4]->the_real_request
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   7: (MPI_Request)[B3.6] (CStyleCastExpr, NoOp, MPI_Request)
   8: v2
   9: &[B3.8]
  10: v3
  11: [B3.10].the_real_status
  12: &([B3.11])
  13: (MPI_Status *)[B3.12] (CStyleCastExpr, NoOp, MPI_Status *)
  14: [B3.3]([B3.7], [B3.9], [B3.13])
  15: int err = MPI_Request_get_status((MPI_Request)this->the_real_request, &v2, (MPI_Status *)&(v3.the_real_status));
  16: err
  17: [B3.16] (ImplicitCastExpr, LValueToRValue, int)
  18: [B3.17] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.18]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual bool Get_status() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v2
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 0
   4: [B1.2] != [B1.3]
   5: return [B1.4];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: int v2;
   2: MPI_Request_get_status
   3: [B3.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Request, int *, MPI_Status *))
   4: this
   5: [B3.4]->the_real_request
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   7: (MPI_Request)[B3.6] (CStyleCastExpr, NoOp, MPI_Request)
   8: v2
   9: &[B3.8]
  10: 1
  11: (MPI_Status *)[B3.10] (CStyleCastExpr, IntegralToPointer, MPI_Status *)
  12: [B3.3]([B3.7], [B3.9], [B3.11])
  13: int err = MPI_Request_get_status((MPI_Request)this->the_real_request, &v2, (MPI_Status *)1);
  14: err
  15: [B3.14] (ImplicitCastExpr, LValueToRValue, int)
  16: [B3.15] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.16]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

inline Prequest(MPI_Request obj) : MPI::Request(obj) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   3: [B1.2] (CXXConstructExpr, class MPI::Request)
   4: Request([B1.3]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline Prequest() : MPI::Request() {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, class MPI::Request)
   2: Request([B1.1]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~MPI::Prequest() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ~Request() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

Prequest(const MPI::Prequest &obj) : MPI::Request(obj) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, DerivedToBase, const class MPI::Request)
   3: [B1.2] (CXXConstructExpr, class MPI::Request)
   4: Request([B1.3]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

MPI::Prequest &operator=(const MPI::Prequest &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Request)
   3: [B1.2].the_real_request
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   5: this
   6: [B1.5] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Request *)
   7: [B1.6]->the_real_request
   8: [B1.7] = [B1.4]
   9: this
  10: *[B1.9]
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline operator MPI_Request *()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Request *)
   3: [B1.2]->the_real_request
   4: &[B1.3]
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline operator MPI_Request() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Request *)
   3: [B1.2]->the_real_request
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

MPI::Prequest &operator=(const MPI_Request &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   3: this
   4: [B1.3] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Request *)
   5: [B1.4]->the_real_request
   6: [B1.5] = [B1.2]
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual void Start()
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: MPIR_Call_world_errhand
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Start
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Request *))
   3: this
   4: [B2.3] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Request *)
   5: [B2.4]->the_real_request
   6: &[B2.5]
   7: (MPI_Request *)[B2.6] (CStyleCastExpr, NoOp, MPI_Request *)
   8: [B2.2]([B2.7])
   9: int err = MPI_Start((MPI_Request *)&this->the_real_request);
  10: err
  11: [B2.10] (ImplicitCastExpr, LValueToRValue, int)
  12: [B2.11] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.12]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

static void Startall(int v1, MPI::Prequest v2[])
 [B12 (ENTRY)]
   Succs (1): B11

 [B1]
   1: l2
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
   3: delete [] [B1.2]
   Preds (1): B4
   Succs (1): B0

 [B2]
   1: i2
   2: [B2.1]++
   Preds (1): B3
   Succs (1): B4

 [B3]
   1: l2
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
   3: i2
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B3.2][[B3.4]]
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   7: v2
   8: [B3.7] (ImplicitCastExpr, LValueToRValue, class MPI::Prequest *)
   9: i2
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B3.8][[B3.10]]
  12: [B3.11] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Request)
  13: [B3.12].the_real_request
  14: [B3.13] = [B3.6]
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: i2
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: v1
   4: [B4.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B4.2] < [B4.4]
   T: for (...; [B4.5]; ...)
   Preds (2): B2 B5
   Succs (2): B3 B1

 [B5]
   1: int i2;
   2: 0
   3: i2
   4: [B5.3] = [B5.2]
   Preds (2): B6 B7
   Succs (1): B4

 [B6]
   1: MPIR_Call_world_errhand
   2: [B6.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B6.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B6.2]([B6.4])
   Preds (1): B7
   Succs (1): B5

 [B7]
   1: MPI_Startall
   2: [B7.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, MPI_Request *))
   3: v1
   4: [B7.3] (ImplicitCastExpr, LValueToRValue, int)
   5: l2
   6: [B7.5] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
   7: [B7.2]([B7.4], [B7.6])
   8: int err = MPI_Startall(v1, l2);
   9: err
  10: [B7.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B7.10] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B7.11]
   Preds (1): B10
   Succs (2): B6 B5

 [B8]
   1: i2
   2: [B8.1]++
   Preds (1): B9
   Succs (1): B10

 [B9]
   1: v2
   2: [B9.1] (ImplicitCastExpr, LValueToRValue, class MPI::Prequest *)
   3: i2
   4: [B9.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B9.2][[B9.4]]
   6: [B9.5] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Request)
   7: [B9.6].the_real_request
   8: [B9.7] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   9: l2
  10: [B9.9] (ImplicitCastExpr, LValueToRValue, MPI_Request *)
  11: i2
  12: [B9.11] (ImplicitCastExpr, LValueToRValue, int)
  13: [B9.10][[B9.12]]
  14: [B9.13] = [B9.8]
   Preds (1): B10
   Succs (1): B8

 [B10]
   1: i2
   2: [B10.1] (ImplicitCastExpr, LValueToRValue, int)
   3: v1
   4: [B10.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B10.2] < [B10.4]
   T: for (...; [B10.5]; ...)
   Preds (2): B8 B11
   Succs (2): B9 B7

 [B11]
   1: v1
   2: [B11.1] (ImplicitCastExpr, LValueToRValue, int)
   3: CFGNewAllocator(MPI_Request *)
   4: new MPI_Request [[B11.2]]
   5: MPI_Request *l2 = new MPI_Request [v1];
   6: int i2;
   7: 0
   8: i2
   9: [B11.8] = [B11.7]
   Preds (1): B12
   Succs (1): B10

 [B0 (EXIT)]
   Preds (1): B1

inline Comm(MPI_Comm obj) : the_real_comm(obj) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   3: the_real_comm([B1.2]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline Comm() : the_real_comm((MPI_Comm)67108864) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 67108864
   2: (MPI_Comm)[B1.1] (CStyleCastExpr, NoOp, MPI_Comm)
   3: the_real_comm(([B1.2])) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~MPI::Comm() noexcept
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

Comm(const MPI::Comm &obj) : the_real_comm(obj.the_real_comm) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1].the_real_comm
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   4: the_real_comm([B1.3]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

MPI::Comm &operator=(const MPI::Comm &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1].the_real_comm
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   4: this
   5: [B1.4]->the_real_comm
   6: [B1.5] = [B1.3]
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator==(const MPI::Comm &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_comm
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   4: obj
   5: [B1.4].the_real_comm
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   7: [B1.3] == [B1.6]
   8: return ([B1.7]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator!=(const MPI::Comm &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_comm
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   4: obj
   5: [B1.4].the_real_comm
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   7: [B1.3] != [B1.6]
   8: return ([B1.7]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline operator MPI_Comm *()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_comm
   3: &[B1.2]
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline operator MPI_Comm() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_comm
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

MPI::Comm &operator=(const MPI_Comm &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   3: this
   4: [B1.3]->the_real_comm
   5: [B1.4] = [B1.2]
   6: this
   7: *[B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual MPI::Group Get_group() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v2
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Group)
   3: [B1.2] (CXXConstructExpr, class MPI::Group)
   4: return [B1.3];
   5: [B3.2].~Group() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1])->Call_errhandler
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Group)
   2: MPI::Group v2;
   3: MPI_Comm_group
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, MPI_Group *))
   5: this
   6: [B3.5]->the_real_comm
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   8: (MPI_Comm)[B3.7] (CStyleCastExpr, NoOp, MPI_Comm)
   9: v2
  10: [B3.9].the_real_group
  11: &([B3.10])
  12: [B3.4]([B3.8], [B3.11])
  13: int err = MPI_Comm_group((MPI_Comm)this->the_real_comm, &(v2.the_real_group));
  14: err
  15: [B3.14] (ImplicitCastExpr, LValueToRValue, int)
  16: [B3.15] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.16]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual int Get_rank() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v2
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1])->Call_errhandler
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: int v2;
   2: MPI_Comm_rank
   3: [B3.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, int *))
   4: this
   5: [B3.4]->the_real_comm
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   7: (MPI_Comm)[B3.6] (CStyleCastExpr, NoOp, MPI_Comm)
   8: v2
   9: &[B3.8]
  10: [B3.3]([B3.7], [B3.9])
  11: int err = MPI_Comm_rank((MPI_Comm)this->the_real_comm, &v2);
  12: err
  13: [B3.12] (ImplicitCastExpr, LValueToRValue, int)
  14: [B3.13] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.14]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual MPI::Prequest Bsend_init(const void *v1, int v2, const MPI::Datatype &v3, int v4, int v5) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v7
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Prequest)
   3: [B1.2] (CXXConstructExpr, class MPI::Prequest)
   4: return [B1.3];
   5: [B3.2].~Prequest() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1])->Call_errhandler
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Prequest)
   2: MPI::Prequest v7;
   3: MPI_Bsend_init
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))
   5: v1
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, const void *)
   7: (const void *)[B3.6] (CStyleCastExpr, NoOp, const void *)
   8: v2
   9: [B3.8] (ImplicitCastExpr, LValueToRValue, int)
  10: v3
  11: [B3.10].the_real_datatype
  12: ([B3.11]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  13: (MPI_Datatype)[B3.12] (CStyleCastExpr, NoOp, MPI_Datatype)
  14: v4
  15: [B3.14] (ImplicitCastExpr, LValueToRValue, int)
  16: v5
  17: [B3.16] (ImplicitCastExpr, LValueToRValue, int)
  18: this
  19: [B3.18]->the_real_comm
  20: [B3.19] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  21: (MPI_Comm)[B3.20] (CStyleCastExpr, NoOp, MPI_Comm)
  22: v7
  23: [B3.22] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Request)
  24: [B3.23].the_real_request
  25: &([B3.24])
  26: [B3.4]([B3.7], [B3.9], [B3.13], [B3.15], [B3.17], [B3.21], [B3.25])
  27: int err = MPI_Bsend_init((const void *)v1, v2, (MPI_Datatype)(v3.the_real_datatype), v4, v5, (MPI_Comm)this->the_real_comm, &(v7.the_real_request));
  28: err
  29: [B3.28] (ImplicitCastExpr, LValueToRValue, int)
  30: [B3.29] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.30]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual MPI::Prequest Ssend_init(const void *v1, int v2, const MPI::Datatype &v3, int v4, int v5) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v7
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Prequest)
   3: [B1.2] (CXXConstructExpr, class MPI::Prequest)
   4: return [B1.3];
   5: [B3.2].~Prequest() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1])->Call_errhandler
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Prequest)
   2: MPI::Prequest v7;
   3: MPI_Ssend_init
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))
   5: v1
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, const void *)
   7: (const void *)[B3.6] (CStyleCastExpr, NoOp, const void *)
   8: v2
   9: [B3.8] (ImplicitCastExpr, LValueToRValue, int)
  10: v3
  11: [B3.10].the_real_datatype
  12: ([B3.11]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  13: (MPI_Datatype)[B3.12] (CStyleCastExpr, NoOp, MPI_Datatype)
  14: v4
  15: [B3.14] (ImplicitCastExpr, LValueToRValue, int)
  16: v5
  17: [B3.16] (ImplicitCastExpr, LValueToRValue, int)
  18: this
  19: [B3.18]->the_real_comm
  20: [B3.19] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  21: (MPI_Comm)[B3.20] (CStyleCastExpr, NoOp, MPI_Comm)
  22: v7
  23: [B3.22] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Request)
  24: [B3.23].the_real_request
  25: &([B3.24])
  26: [B3.4]([B3.7], [B3.9], [B3.13], [B3.15], [B3.17], [B3.21], [B3.25])
  27: int err = MPI_Ssend_init((const void *)v1, v2, (MPI_Datatype)(v3.the_real_datatype), v4, v5, (MPI_Comm)this->the_real_comm, &(v7.the_real_request));
  28: err
  29: [B3.28] (ImplicitCastExpr, LValueToRValue, int)
  30: [B3.29] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.30]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual bool Is_inter() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v2
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 0
   4: [B1.2] != [B1.3]
   5: return [B1.4];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1])->Call_errhandler
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: int v2;
   2: MPI_Comm_test_inter
   3: [B3.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, int *))
   4: this
   5: [B3.4]->the_real_comm
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   7: (MPI_Comm)[B3.6] (CStyleCastExpr, NoOp, MPI_Comm)
   8: v2
   9: &[B3.8]
  10: [B3.3]([B3.7], [B3.9])
  11: int err = MPI_Comm_test_inter((MPI_Comm)this->the_real_comm, &v2);
  12: err
  13: [B3.12] (ImplicitCastExpr, LValueToRValue, int)
  14: [B3.13] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.14]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual MPI::Prequest Rsend_init(const void *v1, int v2, const MPI::Datatype &v3, int v4, int v5) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v7
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Prequest)
   3: [B1.2] (CXXConstructExpr, class MPI::Prequest)
   4: return [B1.3];
   5: [B3.2].~Prequest() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1])->Call_errhandler
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Prequest)
   2: MPI::Prequest v7;
   3: MPI_Rsend_init
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))
   5: v1
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, const void *)
   7: (const void *)[B3.6] (CStyleCastExpr, NoOp, const void *)
   8: v2
   9: [B3.8] (ImplicitCastExpr, LValueToRValue, int)
  10: v3
  11: [B3.10].the_real_datatype
  12: ([B3.11]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  13: (MPI_Datatype)[B3.12] (CStyleCastExpr, NoOp, MPI_Datatype)
  14: v4
  15: [B3.14] (ImplicitCastExpr, LValueToRValue, int)
  16: v5
  17: [B3.16] (ImplicitCastExpr, LValueToRValue, int)
  18: this
  19: [B3.18]->the_real_comm
  20: [B3.19] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  21: (MPI_Comm)[B3.20] (CStyleCastExpr, NoOp, MPI_Comm)
  22: v7
  23: [B3.22] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Request)
  24: [B3.23].the_real_request
  25: &([B3.24])
  26: [B3.4]([B3.7], [B3.9], [B3.13], [B3.15], [B3.17], [B3.21], [B3.25])
  27: int err = MPI_Rsend_init((const void *)v1, v2, (MPI_Datatype)(v3.the_real_datatype), v4, v5, (MPI_Comm)this->the_real_comm, &(v7.the_real_request));
  28: err
  29: [B3.28] (ImplicitCastExpr, LValueToRValue, int)
  30: [B3.29] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.30]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual MPI::Request Ibsend(const void *v1, int v2, const MPI::Datatype &v3, int v4, int v5) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v7
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Request)
   3: [B1.2] (CXXConstructExpr, class MPI::Request)
   4: return [B1.3];
   5: [B3.2].~Request() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1])->Call_errhandler
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Request)
   2: MPI::Request v7;
   3: MPI_Ibsend
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))
   5: v1
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, const void *)
   7: (const void *)[B3.6] (CStyleCastExpr, NoOp, const void *)
   8: v2
   9: [B3.8] (ImplicitCastExpr, LValueToRValue, int)
  10: v3
  11: [B3.10].the_real_datatype
  12: ([B3.11]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  13: (MPI_Datatype)[B3.12] (CStyleCastExpr, NoOp, MPI_Datatype)
  14: v4
  15: [B3.14] (ImplicitCastExpr, LValueToRValue, int)
  16: v5
  17: [B3.16] (ImplicitCastExpr, LValueToRValue, int)
  18: this
  19: [B3.18]->the_real_comm
  20: [B3.19] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  21: (MPI_Comm)[B3.20] (CStyleCastExpr, NoOp, MPI_Comm)
  22: v7
  23: [B3.22].the_real_request
  24: &([B3.23])
  25: [B3.4]([B3.7], [B3.9], [B3.13], [B3.15], [B3.17], [B3.21], [B3.24])
  26: int err = MPI_Ibsend((const void *)v1, v2, (MPI_Datatype)(v3.the_real_datatype), v4, v5, (MPI_Comm)this->the_real_comm, &(v7.the_real_request));
  27: err
  28: [B3.27] (ImplicitCastExpr, LValueToRValue, int)
  29: [B3.28] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.29]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual void Abort(int v2) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1])->Call_errhandler
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Abort
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, int))
   3: this
   4: [B2.3]->the_real_comm
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   6: (MPI_Comm)[B2.5] (CStyleCastExpr, NoOp, MPI_Comm)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, int)
   9: [B2.2]([B2.6], [B2.8])
  10: int err = MPI_Abort((MPI_Comm)this->the_real_comm, v2);
  11: err
  12: [B2.11] (ImplicitCastExpr, LValueToRValue, int)
  13: [B2.12] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.13]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Free()
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::Comm *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Comm_free
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm *))
   3: this
   4: [B2.3]->the_real_comm
   5: &[B2.4]
   6: (MPI_Comm *)[B2.5] (CStyleCastExpr, NoOp, MPI_Comm *)
   7: [B2.2]([B2.6])
   8: int err = MPI_Comm_free((MPI_Comm *)&this->the_real_comm);
   9: err
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B2.10] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.11]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual MPI::Prequest Send_init(const void *v1, int v2, const MPI::Datatype &v3, int v4, int v5) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v7
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Prequest)
   3: [B1.2] (CXXConstructExpr, class MPI::Prequest)
   4: return [B1.3];
   5: [B3.2].~Prequest() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1])->Call_errhandler
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Prequest)
   2: MPI::Prequest v7;
   3: MPI_Send_init
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))
   5: v1
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, const void *)
   7: (const void *)[B3.6] (CStyleCastExpr, NoOp, const void *)
   8: v2
   9: [B3.8] (ImplicitCastExpr, LValueToRValue, int)
  10: v3
  11: [B3.10].the_real_datatype
  12: ([B3.11]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  13: (MPI_Datatype)[B3.12] (CStyleCastExpr, NoOp, MPI_Datatype)
  14: v4
  15: [B3.14] (ImplicitCastExpr, LValueToRValue, int)
  16: v5
  17: [B3.16] (ImplicitCastExpr, LValueToRValue, int)
  18: this
  19: [B3.18]->the_real_comm
  20: [B3.19] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  21: (MPI_Comm)[B3.20] (CStyleCastExpr, NoOp, MPI_Comm)
  22: v7
  23: [B3.22] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Request)
  24: [B3.23].the_real_request
  25: &([B3.24])
  26: [B3.4]([B3.7], [B3.9], [B3.13], [B3.15], [B3.17], [B3.21], [B3.25])
  27: int err = MPI_Send_init((const void *)v1, v2, (MPI_Datatype)(v3.the_real_datatype), v4, v5, (MPI_Comm)this->the_real_comm, &(v7.the_real_request));
  28: err
  29: [B3.28] (ImplicitCastExpr, LValueToRValue, int)
  30: [B3.29] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.30]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual void Recv(void *v1, int v2, const MPI::Datatype &v3, int v4, int v5, MPI::Status &v7) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1])->Call_errhandler
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Recv
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *))
   3: v1
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, void *)
   5: v2
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, int)
   7: v3
   8: [B2.7].the_real_datatype
   9: ([B2.8]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  10: (MPI_Datatype)[B2.9] (CStyleCastExpr, NoOp, MPI_Datatype)
  11: v4
  12: [B2.11] (ImplicitCastExpr, LValueToRValue, int)
  13: v5
  14: [B2.13] (ImplicitCastExpr, LValueToRValue, int)
  15: this
  16: [B2.15]->the_real_comm
  17: [B2.16] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  18: (MPI_Comm)[B2.17] (CStyleCastExpr, NoOp, MPI_Comm)
  19: v7
  20: [B2.19].the_real_status
  21: &([B2.20])
  22: (MPI_Status *)[B2.21] (CStyleCastExpr, NoOp, MPI_Status *)
  23: [B2.2]([B2.4], [B2.6], [B2.10], [B2.12], [B2.14], [B2.18], [B2.22])
  24: int err = MPI_Recv(v1, v2, (MPI_Datatype)(v3.the_real_datatype), v4, v5, (MPI_Comm)this->the_real_comm, (MPI_Status *)&(v7.the_real_status));
  25: err
  26: [B2.25] (ImplicitCastExpr, LValueToRValue, int)
  27: [B2.26] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.27]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Recv(void *v1, int v2, const MPI::Datatype &v3, int v4, int v5) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1])->Call_errhandler
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Recv
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *))
   3: v1
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, void *)
   5: v2
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, int)
   7: v3
   8: [B2.7].the_real_datatype
   9: ([B2.8]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  10: (MPI_Datatype)[B2.9] (CStyleCastExpr, NoOp, MPI_Datatype)
  11: v4
  12: [B2.11] (ImplicitCastExpr, LValueToRValue, int)
  13: v5
  14: [B2.13] (ImplicitCastExpr, LValueToRValue, int)
  15: this
  16: [B2.15]->the_real_comm
  17: [B2.16] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  18: (MPI_Comm)[B2.17] (CStyleCastExpr, NoOp, MPI_Comm)
  19: 1
  20: (MPI_Status *)[B2.19] (CStyleCastExpr, IntegralToPointer, MPI_Status *)
  21: [B2.2]([B2.4], [B2.6], [B2.10], [B2.12], [B2.14], [B2.18], [B2.20])
  22: int err = MPI_Recv(v1, v2, (MPI_Datatype)(v3.the_real_datatype), v4, v5, (MPI_Comm)this->the_real_comm, (MPI_Status *)1);
  23: err
  24: [B2.23] (ImplicitCastExpr, LValueToRValue, int)
  25: [B2.24] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.25]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Sendrecv(const void *v1, int v2, const MPI::Datatype &v3, int v4, int v5, void *v6, int v7, const MPI::Datatype &v8, int v9, int v10, MPI::Status &v12) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1])->Call_errhandler
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Sendrecv
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const void *, int, MPI_Datatype, int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *))
   3: v1
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, const void *)
   5: (const void *)[B2.4] (CStyleCastExpr, NoOp, const void *)
   6: v2
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, int)
   8: v3
   9: [B2.8].the_real_datatype
  10: ([B2.9]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  11: (MPI_Datatype)[B2.10] (CStyleCastExpr, NoOp, MPI_Datatype)
  12: v4
  13: [B2.12] (ImplicitCastExpr, LValueToRValue, int)
  14: v5
  15: [B2.14] (ImplicitCastExpr, LValueToRValue, int)
  16: v6
  17: [B2.16] (ImplicitCastExpr, LValueToRValue, void *)
  18: v7
  19: [B2.18] (ImplicitCastExpr, LValueToRValue, int)
  20: v8
  21: [B2.20].the_real_datatype
  22: ([B2.21]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  23: (MPI_Datatype)[B2.22] (CStyleCastExpr, NoOp, MPI_Datatype)
  24: v9
  25: [B2.24] (ImplicitCastExpr, LValueToRValue, int)
  26: v10
  27: [B2.26] (ImplicitCastExpr, LValueToRValue, int)
  28: this
  29: [B2.28]->the_real_comm
  30: [B2.29] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  31: (MPI_Comm)[B2.30] (CStyleCastExpr, NoOp, MPI_Comm)
  32: v12
  33: [B2.32].the_real_status
  34: &([B2.33])
  35: (MPI_Status *)[B2.34] (CStyleCastExpr, NoOp, MPI_Status *)
  36: [B2.2]([B2.5], [B2.7], [B2.11], [B2.13], [B2.15], [B2.17], [B2.19], [B2.23], [B2.25], [B2.27], [B2.31], [B2.35])
  37: int err = MPI_Sendrecv((const void *)v1, v2, (MPI_Datatype)(v3.the_real_datatype), v4, v5, v6, v7, (MPI_Datatype)(v8.the_real_datatype), v9, v10, (MPI_Comm)this->the_real_comm, (MPI_Status *)&(v12.the_real_status));
  38: err
  39: [B2.38] (ImplicitCastExpr, LValueToRValue, int)
  40: [B2.39] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.40]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Sendrecv(const void *v1, int v2, const MPI::Datatype &v3, int v4, int v5, void *v6, int v7, const MPI::Datatype &v8, int v9, int v10) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1])->Call_errhandler
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Sendrecv
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const void *, int, MPI_Datatype, int, int, void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *))
   3: v1
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, const void *)
   5: (const void *)[B2.4] (CStyleCastExpr, NoOp, const void *)
   6: v2
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, int)
   8: v3
   9: [B2.8].the_real_datatype
  10: ([B2.9]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  11: (MPI_Datatype)[B2.10] (CStyleCastExpr, NoOp, MPI_Datatype)
  12: v4
  13: [B2.12] (ImplicitCastExpr, LValueToRValue, int)
  14: v5
  15: [B2.14] (ImplicitCastExpr, LValueToRValue, int)
  16: v6
  17: [B2.16] (ImplicitCastExpr, LValueToRValue, void *)
  18: v7
  19: [B2.18] (ImplicitCastExpr, LValueToRValue, int)
  20: v8
  21: [B2.20].the_real_datatype
  22: ([B2.21]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  23: (MPI_Datatype)[B2.22] (CStyleCastExpr, NoOp, MPI_Datatype)
  24: v9
  25: [B2.24] (ImplicitCastExpr, LValueToRValue, int)
  26: v10
  27: [B2.26] (ImplicitCastExpr, LValueToRValue, int)
  28: this
  29: [B2.28]->the_real_comm
  30: [B2.29] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  31: (MPI_Comm)[B2.30] (CStyleCastExpr, NoOp, MPI_Comm)
  32: 1
  33: (MPI_Status *)[B2.32] (CStyleCastExpr, IntegralToPointer, MPI_Status *)
  34: [B2.2]([B2.5], [B2.7], [B2.11], [B2.13], [B2.15], [B2.17], [B2.19], [B2.23], [B2.25], [B2.27], [B2.31], [B2.33])
  35: int err = MPI_Sendrecv((const void *)v1, v2, (MPI_Datatype)(v3.the_real_datatype), v4, v5, v6, v7, (MPI_Datatype)(v8.the_real_datatype), v9, v10, (MPI_Comm)this->the_real_comm, (MPI_Status *)1);
  36: err
  37: [B2.36] (ImplicitCastExpr, LValueToRValue, int)
  38: [B2.37] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.38]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Sendrecv_replace(void *v1, int v2, const MPI::Datatype &v3, int v4, int v5, int v6, int v7, MPI::Status &v9) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1])->Call_errhandler
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Sendrecv_replace
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(void *, int, MPI_Datatype, int, int, int, int, MPI_Comm, MPI_Status *))
   3: v1
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, void *)
   5: v2
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, int)
   7: v3
   8: [B2.7].the_real_datatype
   9: ([B2.8]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  10: (MPI_Datatype)[B2.9] (CStyleCastExpr, NoOp, MPI_Datatype)
  11: v4
  12: [B2.11] (ImplicitCastExpr, LValueToRValue, int)
  13: v5
  14: [B2.13] (ImplicitCastExpr, LValueToRValue, int)
  15: v6
  16: [B2.15] (ImplicitCastExpr, LValueToRValue, int)
  17: v7
  18: [B2.17] (ImplicitCastExpr, LValueToRValue, int)
  19: this
  20: [B2.19]->the_real_comm
  21: [B2.20] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  22: (MPI_Comm)[B2.21] (CStyleCastExpr, NoOp, MPI_Comm)
  23: v9
  24: [B2.23].the_real_status
  25: &([B2.24])
  26: (MPI_Status *)[B2.25] (CStyleCastExpr, NoOp, MPI_Status *)
  27: [B2.2]([B2.4], [B2.6], [B2.10], [B2.12], [B2.14], [B2.16], [B2.18], [B2.22], [B2.26])
  28: int err = MPI_Sendrecv_replace(v1, v2, (MPI_Datatype)(v3.the_real_datatype), v4, v5, v6, v7, (MPI_Comm)this->the_real_comm, (MPI_Status *)&(v9.the_real_status));
  29: err
  30: [B2.29] (ImplicitCastExpr, LValueToRValue, int)
  31: [B2.30] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.31]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Sendrecv_replace(void *v1, int v2, const MPI::Datatype &v3, int v4, int v5, int v6, int v7) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1])->Call_errhandler
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Sendrecv_replace
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(void *, int, MPI_Datatype, int, int, int, int, MPI_Comm, MPI_Status *))
   3: v1
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, void *)
   5: v2
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, int)
   7: v3
   8: [B2.7].the_real_datatype
   9: ([B2.8]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  10: (MPI_Datatype)[B2.9] (CStyleCastExpr, NoOp, MPI_Datatype)
  11: v4
  12: [B2.11] (ImplicitCastExpr, LValueToRValue, int)
  13: v5
  14: [B2.13] (ImplicitCastExpr, LValueToRValue, int)
  15: v6
  16: [B2.15] (ImplicitCastExpr, LValueToRValue, int)
  17: v7
  18: [B2.17] (ImplicitCastExpr, LValueToRValue, int)
  19: this
  20: [B2.19]->the_real_comm
  21: [B2.20] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  22: (MPI_Comm)[B2.21] (CStyleCastExpr, NoOp, MPI_Comm)
  23: 1
  24: (MPI_Status *)[B2.23] (CStyleCastExpr, IntegralToPointer, MPI_Status *)
  25: [B2.2]([B2.4], [B2.6], [B2.10], [B2.12], [B2.14], [B2.16], [B2.18], [B2.22], [B2.24])
  26: int err = MPI_Sendrecv_replace(v1, v2, (MPI_Datatype)(v3.the_real_datatype), v4, v5, v6, v7, (MPI_Comm)this->the_real_comm, (MPI_Status *)1);
  27: err
  28: [B2.27] (ImplicitCastExpr, LValueToRValue, int)
  29: [B2.28] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.29]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual int Get_topology() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v2
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1])->Call_errhandler
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: int v2;
   2: MPI_Topo_test
   3: [B3.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, int *))
   4: this
   5: [B3.4]->the_real_comm
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   7: (MPI_Comm)[B3.6] (CStyleCastExpr, NoOp, MPI_Comm)
   8: v2
   9: &[B3.8]
  10: [B3.3]([B3.7], [B3.9])
  11: int err = MPI_Topo_test((MPI_Comm)this->the_real_comm, &v2);
  12: err
  13: [B3.12] (ImplicitCastExpr, LValueToRValue, int)
  14: [B3.13] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.14]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual MPI::Request Isend(const void *v1, int v2, const MPI::Datatype &v3, int v4, int v5) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v7
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Request)
   3: [B1.2] (CXXConstructExpr, class MPI::Request)
   4: return [B1.3];
   5: [B3.2].~Request() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1])->Call_errhandler
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Request)
   2: MPI::Request v7;
   3: MPI_Isend
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))
   5: v1
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, const void *)
   7: (const void *)[B3.6] (CStyleCastExpr, NoOp, const void *)
   8: v2
   9: [B3.8] (ImplicitCastExpr, LValueToRValue, int)
  10: v3
  11: [B3.10].the_real_datatype
  12: ([B3.11]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  13: (MPI_Datatype)[B3.12] (CStyleCastExpr, NoOp, MPI_Datatype)
  14: v4
  15: [B3.14] (ImplicitCastExpr, LValueToRValue, int)
  16: v5
  17: [B3.16] (ImplicitCastExpr, LValueToRValue, int)
  18: this
  19: [B3.18]->the_real_comm
  20: [B3.19] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  21: (MPI_Comm)[B3.20] (CStyleCastExpr, NoOp, MPI_Comm)
  22: v7
  23: [B3.22].the_real_request
  24: &([B3.23])
  25: [B3.4]([B3.7], [B3.9], [B3.13], [B3.15], [B3.17], [B3.21], [B3.24])
  26: int err = MPI_Isend((const void *)v1, v2, (MPI_Datatype)(v3.the_real_datatype), v4, v5, (MPI_Comm)this->the_real_comm, &(v7.the_real_request));
  27: err
  28: [B3.27] (ImplicitCastExpr, LValueToRValue, int)
  29: [B3.28] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.29]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual void Probe(int v1, int v2, MPI::Status &v4) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1])->Call_errhandler
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Probe
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, int, MPI_Comm, MPI_Status *))
   3: v1
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: v2
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, int)
   7: this
   8: [B2.7]->the_real_comm
   9: [B2.8] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  10: (MPI_Comm)[B2.9] (CStyleCastExpr, NoOp, MPI_Comm)
  11: v4
  12: [B2.11].the_real_status
  13: &([B2.12])
  14: (MPI_Status *)[B2.13] (CStyleCastExpr, NoOp, MPI_Status *)
  15: [B2.2]([B2.4], [B2.6], [B2.10], [B2.14])
  16: int err = MPI_Probe(v1, v2, (MPI_Comm)this->the_real_comm, (MPI_Status *)&(v4.the_real_status));
  17: err
  18: [B2.17] (ImplicitCastExpr, LValueToRValue, int)
  19: [B2.18] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.19]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Probe(int v1, int v2) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1])->Call_errhandler
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Probe
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, int, MPI_Comm, MPI_Status *))
   3: v1
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: v2
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, int)
   7: this
   8: [B2.7]->the_real_comm
   9: [B2.8] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  10: (MPI_Comm)[B2.9] (CStyleCastExpr, NoOp, MPI_Comm)
  11: 1
  12: (MPI_Status *)[B2.11] (CStyleCastExpr, IntegralToPointer, MPI_Status *)
  13: [B2.2]([B2.4], [B2.6], [B2.10], [B2.12])
  14: int err = MPI_Probe(v1, v2, (MPI_Comm)this->the_real_comm, (MPI_Status *)1);
  15: err
  16: [B2.15] (ImplicitCastExpr, LValueToRValue, int)
  17: [B2.16] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.17]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

static int Compare(const MPI::Comm &v1, const MPI::Comm &v2)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v3
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: MPIR_Call_world_errhand
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: int v3;
   2: MPI_Comm_compare
   3: [B3.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, MPI_Comm, int *))
   4: v1
   5: [B3.4].the_real_comm
   6: ([B3.5]) (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   7: (MPI_Comm)[B3.6] (CStyleCastExpr, NoOp, MPI_Comm)
   8: v2
   9: [B3.8].the_real_comm
  10: ([B3.9]) (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  11: (MPI_Comm)[B3.10] (CStyleCastExpr, NoOp, MPI_Comm)
  12: v3
  13: &[B3.12]
  14: [B3.3]([B3.7], [B3.11], [B3.13])
  15: int err = MPI_Comm_compare((MPI_Comm)(v1.the_real_comm), (MPI_Comm)(v2.the_real_comm), &v3);
  16: err
  17: [B3.16] (ImplicitCastExpr, LValueToRValue, int)
  18: [B3.17] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.18]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual int Get_size() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v2
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1])->Call_errhandler
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: int v2;
   2: MPI_Comm_size
   3: [B3.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, int *))
   4: this
   5: [B3.4]->the_real_comm
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   7: (MPI_Comm)[B3.6] (CStyleCastExpr, NoOp, MPI_Comm)
   8: v2
   9: &[B3.8]
  10: [B3.3]([B3.7], [B3.9])
  11: int err = MPI_Comm_size((MPI_Comm)this->the_real_comm, &v2);
  12: err
  13: [B3.12] (ImplicitCastExpr, LValueToRValue, int)
  14: [B3.13] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.14]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual MPI::Request Issend(const void *v1, int v2, const MPI::Datatype &v3, int v4, int v5) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v7
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Request)
   3: [B1.2] (CXXConstructExpr, class MPI::Request)
   4: return [B1.3];
   5: [B3.2].~Request() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1])->Call_errhandler
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Request)
   2: MPI::Request v7;
   3: MPI_Issend
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))
   5: v1
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, const void *)
   7: (const void *)[B3.6] (CStyleCastExpr, NoOp, const void *)
   8: v2
   9: [B3.8] (ImplicitCastExpr, LValueToRValue, int)
  10: v3
  11: [B3.10].the_real_datatype
  12: ([B3.11]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  13: (MPI_Datatype)[B3.12] (CStyleCastExpr, NoOp, MPI_Datatype)
  14: v4
  15: [B3.14] (ImplicitCastExpr, LValueToRValue, int)
  16: v5
  17: [B3.16] (ImplicitCastExpr, LValueToRValue, int)
  18: this
  19: [B3.18]->the_real_comm
  20: [B3.19] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  21: (MPI_Comm)[B3.20] (CStyleCastExpr, NoOp, MPI_Comm)
  22: v7
  23: [B3.22].the_real_request
  24: &([B3.23])
  25: [B3.4]([B3.7], [B3.9], [B3.13], [B3.15], [B3.17], [B3.21], [B3.24])
  26: int err = MPI_Issend((const void *)v1, v2, (MPI_Datatype)(v3.the_real_datatype), v4, v5, (MPI_Comm)this->the_real_comm, &(v7.the_real_request));
  27: err
  28: [B3.27] (ImplicitCastExpr, LValueToRValue, int)
  29: [B3.28] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.29]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual void Set_errhandler(const MPI::Errhandler &v2)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::Comm *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Comm_set_errhandler
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, MPI_Errhandler))
   3: this
   4: [B2.3]->the_real_comm
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   6: (MPI_Comm)[B2.5] (CStyleCastExpr, NoOp, MPI_Comm)
   7: v2
   8: [B2.7].the_real_errhandler
   9: ([B2.8]) (ImplicitCastExpr, LValueToRValue, MPI_Errhandler)
  10: (MPI_Errhandler)[B2.9] (CStyleCastExpr, NoOp, MPI_Errhandler)
  11: [B2.2]([B2.6], [B2.10])
  12: int err = MPI_Comm_set_errhandler((MPI_Comm)this->the_real_comm, (MPI_Errhandler)(v2.the_real_errhandler));
  13: err
  14: [B2.13] (ImplicitCastExpr, LValueToRValue, int)
  15: [B2.14] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.15]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Send(const void *v1, int v2, const MPI::Datatype &v3, int v4, int v5) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1])->Call_errhandler
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Send
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const void *, int, MPI_Datatype, int, int, MPI_Comm))
   3: v1
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, const void *)
   5: (const void *)[B2.4] (CStyleCastExpr, NoOp, const void *)
   6: v2
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, int)
   8: v3
   9: [B2.8].the_real_datatype
  10: ([B2.9]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  11: (MPI_Datatype)[B2.10] (CStyleCastExpr, NoOp, MPI_Datatype)
  12: v4
  13: [B2.12] (ImplicitCastExpr, LValueToRValue, int)
  14: v5
  15: [B2.14] (ImplicitCastExpr, LValueToRValue, int)
  16: this
  17: [B2.16]->the_real_comm
  18: [B2.17] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  19: (MPI_Comm)[B2.18] (CStyleCastExpr, NoOp, MPI_Comm)
  20: [B2.2]([B2.5], [B2.7], [B2.11], [B2.13], [B2.15], [B2.19])
  21: int err = MPI_Send((const void *)v1, v2, (MPI_Datatype)(v3.the_real_datatype), v4, v5, (MPI_Comm)this->the_real_comm);
  22: err
  23: [B2.22] (ImplicitCastExpr, LValueToRValue, int)
  24: [B2.23] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.24]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual MPI::Request Irsend(const void *v1, int v2, const MPI::Datatype &v3, int v4, int v5) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v7
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Request)
   3: [B1.2] (CXXConstructExpr, class MPI::Request)
   4: return [B1.3];
   5: [B3.2].~Request() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1])->Call_errhandler
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Request)
   2: MPI::Request v7;
   3: MPI_Irsend
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))
   5: v1
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, const void *)
   7: (const void *)[B3.6] (CStyleCastExpr, NoOp, const void *)
   8: v2
   9: [B3.8] (ImplicitCastExpr, LValueToRValue, int)
  10: v3
  11: [B3.10].the_real_datatype
  12: ([B3.11]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  13: (MPI_Datatype)[B3.12] (CStyleCastExpr, NoOp, MPI_Datatype)
  14: v4
  15: [B3.14] (ImplicitCastExpr, LValueToRValue, int)
  16: v5
  17: [B3.16] (ImplicitCastExpr, LValueToRValue, int)
  18: this
  19: [B3.18]->the_real_comm
  20: [B3.19] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  21: (MPI_Comm)[B3.20] (CStyleCastExpr, NoOp, MPI_Comm)
  22: v7
  23: [B3.22].the_real_request
  24: &([B3.23])
  25: [B3.4]([B3.7], [B3.9], [B3.13], [B3.15], [B3.17], [B3.21], [B3.24])
  26: int err = MPI_Irsend((const void *)v1, v2, (MPI_Datatype)(v3.the_real_datatype), v4, v5, (MPI_Comm)this->the_real_comm, &(v7.the_real_request));
  27: err
  28: [B3.27] (ImplicitCastExpr, LValueToRValue, int)
  29: [B3.28] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.29]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual void Ssend(const void *v1, int v2, const MPI::Datatype &v3, int v4, int v5) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1])->Call_errhandler
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Ssend
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const void *, int, MPI_Datatype, int, int, MPI_Comm))
   3: v1
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, const void *)
   5: (const void *)[B2.4] (CStyleCastExpr, NoOp, const void *)
   6: v2
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, int)
   8: v3
   9: [B2.8].the_real_datatype
  10: ([B2.9]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  11: (MPI_Datatype)[B2.10] (CStyleCastExpr, NoOp, MPI_Datatype)
  12: v4
  13: [B2.12] (ImplicitCastExpr, LValueToRValue, int)
  14: v5
  15: [B2.14] (ImplicitCastExpr, LValueToRValue, int)
  16: this
  17: [B2.16]->the_real_comm
  18: [B2.17] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  19: (MPI_Comm)[B2.18] (CStyleCastExpr, NoOp, MPI_Comm)
  20: [B2.2]([B2.5], [B2.7], [B2.11], [B2.13], [B2.15], [B2.19])
  21: int err = MPI_Ssend((const void *)v1, v2, (MPI_Datatype)(v3.the_real_datatype), v4, v5, (MPI_Comm)this->the_real_comm);
  22: err
  23: [B2.22] (ImplicitCastExpr, LValueToRValue, int)
  24: [B2.23] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.24]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual MPI::Prequest Recv_init(void *v1, int v2, const MPI::Datatype &v3, int v4, int v5) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v7
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Prequest)
   3: [B1.2] (CXXConstructExpr, class MPI::Prequest)
   4: return [B1.3];
   5: [B3.2].~Prequest() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1])->Call_errhandler
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Prequest)
   2: MPI::Prequest v7;
   3: MPI_Recv_init
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))
   5: v1
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, void *)
   7: v2
   8: [B3.7] (ImplicitCastExpr, LValueToRValue, int)
   9: v3
  10: [B3.9].the_real_datatype
  11: ([B3.10]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  12: (MPI_Datatype)[B3.11] (CStyleCastExpr, NoOp, MPI_Datatype)
  13: v4
  14: [B3.13] (ImplicitCastExpr, LValueToRValue, int)
  15: v5
  16: [B3.15] (ImplicitCastExpr, LValueToRValue, int)
  17: this
  18: [B3.17]->the_real_comm
  19: [B3.18] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  20: (MPI_Comm)[B3.19] (CStyleCastExpr, NoOp, MPI_Comm)
  21: v7
  22: [B3.21] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Request)
  23: [B3.22].the_real_request
  24: &([B3.23])
  25: [B3.4]([B3.6], [B3.8], [B3.12], [B3.14], [B3.16], [B3.20], [B3.24])
  26: int err = MPI_Recv_init(v1, v2, (MPI_Datatype)(v3.the_real_datatype), v4, v5, (MPI_Comm)this->the_real_comm, &(v7.the_real_request));
  27: err
  28: [B3.27] (ImplicitCastExpr, LValueToRValue, int)
  29: [B3.28] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.29]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual bool Iprobe(int v1, int v2, MPI::Status &v5) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v4
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 0
   4: [B1.2] != [B1.3]
   5: return [B1.4];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1])->Call_errhandler
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: int v4;
   2: MPI_Iprobe
   3: [B3.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, int, MPI_Comm, int *, MPI_Status *))
   4: v1
   5: [B3.4] (ImplicitCastExpr, LValueToRValue, int)
   6: v2
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, int)
   8: this
   9: [B3.8]->the_real_comm
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  11: (MPI_Comm)[B3.10] (CStyleCastExpr, NoOp, MPI_Comm)
  12: v4
  13: &[B3.12]
  14: v5
  15: [B3.14].the_real_status
  16: &([B3.15])
  17: (MPI_Status *)[B3.16] (CStyleCastExpr, NoOp, MPI_Status *)
  18: [B3.3]([B3.5], [B3.7], [B3.11], [B3.13], [B3.17])
  19: int err = MPI_Iprobe(v1, v2, (MPI_Comm)this->the_real_comm, &v4, (MPI_Status *)&(v5.the_real_status));
  20: err
  21: [B3.20] (ImplicitCastExpr, LValueToRValue, int)
  22: [B3.21] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.22]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual bool Iprobe(int v1, int v2) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v4
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 0
   4: [B1.2] != [B1.3]
   5: return [B1.4];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1])->Call_errhandler
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: int v4;
   2: MPI_Iprobe
   3: [B3.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, int, MPI_Comm, int *, MPI_Status *))
   4: v1
   5: [B3.4] (ImplicitCastExpr, LValueToRValue, int)
   6: v2
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, int)
   8: this
   9: [B3.8]->the_real_comm
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  11: (MPI_Comm)[B3.10] (CStyleCastExpr, NoOp, MPI_Comm)
  12: v4
  13: &[B3.12]
  14: 1
  15: (MPI_Status *)[B3.14] (CStyleCastExpr, IntegralToPointer, MPI_Status *)
  16: [B3.3]([B3.5], [B3.7], [B3.11], [B3.13], [B3.15])
  17: int err = MPI_Iprobe(v1, v2, (MPI_Comm)this->the_real_comm, &v4, (MPI_Status *)1);
  18: err
  19: [B3.18] (ImplicitCastExpr, LValueToRValue, int)
  20: [B3.19] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.20]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual void Bsend(const void *v1, int v2, const MPI::Datatype &v3, int v4, int v5) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1])->Call_errhandler
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Bsend
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const void *, int, MPI_Datatype, int, int, MPI_Comm))
   3: v1
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, const void *)
   5: (const void *)[B2.4] (CStyleCastExpr, NoOp, const void *)
   6: v2
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, int)
   8: v3
   9: [B2.8].the_real_datatype
  10: ([B2.9]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  11: (MPI_Datatype)[B2.10] (CStyleCastExpr, NoOp, MPI_Datatype)
  12: v4
  13: [B2.12] (ImplicitCastExpr, LValueToRValue, int)
  14: v5
  15: [B2.14] (ImplicitCastExpr, LValueToRValue, int)
  16: this
  17: [B2.16]->the_real_comm
  18: [B2.17] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  19: (MPI_Comm)[B2.18] (CStyleCastExpr, NoOp, MPI_Comm)
  20: [B2.2]([B2.5], [B2.7], [B2.11], [B2.13], [B2.15], [B2.19])
  21: int err = MPI_Bsend((const void *)v1, v2, (MPI_Datatype)(v3.the_real_datatype), v4, v5, (MPI_Comm)this->the_real_comm);
  22: err
  23: [B2.22] (ImplicitCastExpr, LValueToRValue, int)
  24: [B2.23] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.24]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual MPI::Request Irecv(void *v1, int v2, const MPI::Datatype &v3, int v4, int v5) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v7
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Request)
   3: [B1.2] (CXXConstructExpr, class MPI::Request)
   4: return [B1.3];
   5: [B3.2].~Request() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1])->Call_errhandler
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Request)
   2: MPI::Request v7;
   3: MPI_Irecv
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))
   5: v1
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, void *)
   7: v2
   8: [B3.7] (ImplicitCastExpr, LValueToRValue, int)
   9: v3
  10: [B3.9].the_real_datatype
  11: ([B3.10]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  12: (MPI_Datatype)[B3.11] (CStyleCastExpr, NoOp, MPI_Datatype)
  13: v4
  14: [B3.13] (ImplicitCastExpr, LValueToRValue, int)
  15: v5
  16: [B3.15] (ImplicitCastExpr, LValueToRValue, int)
  17: this
  18: [B3.17]->the_real_comm
  19: [B3.18] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  20: (MPI_Comm)[B3.19] (CStyleCastExpr, NoOp, MPI_Comm)
  21: v7
  22: [B3.21].the_real_request
  23: &([B3.22])
  24: [B3.4]([B3.6], [B3.8], [B3.12], [B3.14], [B3.16], [B3.20], [B3.23])
  25: int err = MPI_Irecv(v1, v2, (MPI_Datatype)(v3.the_real_datatype), v4, v5, (MPI_Comm)this->the_real_comm, &(v7.the_real_request));
  26: err
  27: [B3.26] (ImplicitCastExpr, LValueToRValue, int)
  28: [B3.27] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.28]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual MPI::Errhandler Get_errhandler() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v2
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Errhandler)
   3: [B1.2] (CXXConstructExpr, class MPI::Errhandler)
   4: return [B1.3];
   5: [B3.2].~Errhandler() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1])->Call_errhandler
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Errhandler)
   2: MPI::Errhandler v2;
   3: MPI_Comm_get_errhandler
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, MPI_Errhandler *))
   5: this
   6: [B3.5]->the_real_comm
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   8: (MPI_Comm)[B3.7] (CStyleCastExpr, NoOp, MPI_Comm)
   9: v2
  10: [B3.9].the_real_errhandler
  11: &([B3.10])
  12: [B3.4]([B3.8], [B3.11])
  13: int err = MPI_Comm_get_errhandler((MPI_Comm)this->the_real_comm, &(v2.the_real_errhandler));
  14: err
  15: [B3.14] (ImplicitCastExpr, LValueToRValue, int)
  16: [B3.15] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.16]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual void Rsend(const void *v1, int v2, const MPI::Datatype &v3, int v4, int v5) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1])->Call_errhandler
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Rsend
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const void *, int, MPI_Datatype, int, int, MPI_Comm))
   3: v1
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, const void *)
   5: (const void *)[B2.4] (CStyleCastExpr, NoOp, const void *)
   6: v2
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, int)
   8: v3
   9: [B2.8].the_real_datatype
  10: ([B2.9]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  11: (MPI_Datatype)[B2.10] (CStyleCastExpr, NoOp, MPI_Datatype)
  12: v4
  13: [B2.12] (ImplicitCastExpr, LValueToRValue, int)
  14: v5
  15: [B2.14] (ImplicitCastExpr, LValueToRValue, int)
  16: this
  17: [B2.16]->the_real_comm
  18: [B2.17] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  19: (MPI_Comm)[B2.18] (CStyleCastExpr, NoOp, MPI_Comm)
  20: [B2.2]([B2.5], [B2.7], [B2.11], [B2.13], [B2.15], [B2.19])
  21: int err = MPI_Rsend((const void *)v1, v2, (MPI_Datatype)(v3.the_real_datatype), v4, v5, (MPI_Comm)this->the_real_comm);
  22: err
  23: [B2.22] (ImplicitCastExpr, LValueToRValue, int)
  24: [B2.23] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.24]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Gatherv(const void *v1, int v2, const MPI::Datatype &v3, void *v4, const int *v5, const int *v6, const MPI::Datatype &v7, int v8) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1])->Call_errhandler
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Gatherv
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const void *, int, MPI_Datatype, void *, const int *, const int *, MPI_Datatype, int, MPI_Comm))
   3: v1
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, const void *)
   5: (const void *)[B2.4] (CStyleCastExpr, NoOp, const void *)
   6: v2
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, int)
   8: v3
   9: [B2.8].the_real_datatype
  10: ([B2.9]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  11: (MPI_Datatype)[B2.10] (CStyleCastExpr, NoOp, MPI_Datatype)
  12: v4
  13: [B2.12] (ImplicitCastExpr, LValueToRValue, void *)
  14: v5
  15: [B2.14] (ImplicitCastExpr, LValueToRValue, const int *)
  16: (const int *)[B2.15] (CStyleCastExpr, NoOp, const int *)
  17: v6
  18: [B2.17] (ImplicitCastExpr, LValueToRValue, const int *)
  19: (const int *)[B2.18] (CStyleCastExpr, NoOp, const int *)
  20: v7
  21: [B2.20].the_real_datatype
  22: ([B2.21]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  23: (MPI_Datatype)[B2.22] (CStyleCastExpr, NoOp, MPI_Datatype)
  24: v8
  25: [B2.24] (ImplicitCastExpr, LValueToRValue, int)
  26: this
  27: [B2.26]->the_real_comm
  28: [B2.27] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  29: (MPI_Comm)[B2.28] (CStyleCastExpr, NoOp, MPI_Comm)
  30: [B2.2]([B2.5], [B2.7], [B2.11], [B2.13], [B2.16], [B2.19], [B2.23], [B2.25], [B2.29])
  31: int err = MPI_Gatherv((const void *)v1, v2, (MPI_Datatype)(v3.the_real_datatype), v4, (const int *)v5, (const int *)v6, (MPI_Datatype)(v7.the_real_datatype), v8, (MPI_Comm)this->the_real_comm);
  32: err
  33: [B2.32] (ImplicitCastExpr, LValueToRValue, int)
  34: [B2.33] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.34]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Disconnect()
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::Comm *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Comm_disconnect
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm *))
   3: this
   4: [B2.3]->the_real_comm
   5: &[B2.4]
   6: (MPI_Comm *)[B2.5] (CStyleCastExpr, NoOp, MPI_Comm *)
   7: [B2.2]([B2.6])
   8: int err = MPI_Comm_disconnect((MPI_Comm *)&this->the_real_comm);
   9: err
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B2.10] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.11]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Allreduce(const void *v1, void *v2, int v3, const MPI::Datatype &v4, const MPI::Op &v5) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1])->Call_errhandler
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Allreduce
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const void *, void *, int, MPI_Datatype, MPI_Op, MPI_Comm))
   3: v1
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, const void *)
   5: (const void *)[B2.4] (CStyleCastExpr, NoOp, const void *)
   6: v2
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, void *)
   8: v3
   9: [B2.8] (ImplicitCastExpr, LValueToRValue, int)
  10: v4
  11: [B2.10].the_real_datatype
  12: ([B2.11]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  13: (MPI_Datatype)[B2.12] (CStyleCastExpr, NoOp, MPI_Datatype)
  14: v5
  15: [B2.14].the_real_op
  16: ([B2.15]) (ImplicitCastExpr, LValueToRValue, MPI_Op)
  17: (MPI_Op)[B2.16] (CStyleCastExpr, NoOp, MPI_Op)
  18: this
  19: [B2.18]->the_real_comm
  20: [B2.19] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  21: (MPI_Comm)[B2.20] (CStyleCastExpr, NoOp, MPI_Comm)
  22: [B2.2]([B2.5], [B2.7], [B2.9], [B2.13], [B2.17], [B2.21])
  23: int err = MPI_Allreduce((const void *)v1, v2, v3, (MPI_Datatype)(v4.the_real_datatype), (MPI_Op)(v5.the_real_op), (MPI_Comm)this->the_real_comm);
  24: err
  25: [B2.24] (ImplicitCastExpr, LValueToRValue, int)
  26: [B2.25] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.26]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Alltoallw(const void *v1, const int v2[], const int v3[], const MPI::Datatype v4[], void *v5, const int v6[], const int v7[], const MPI::Datatype v8[]) const
 [B12 (ENTRY)]
   Succs (1): B11

 [B1]
   1: l4
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Datatype *)
   3: delete [] [B1.2]
   4: l8
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, MPI_Datatype *)
   6: delete [] [B1.5]
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1])->Call_errhandler
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: MPI_Alltoallw
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const void *, const int *, const int *, const MPI_Datatype *, void *, const int *, const int *, const MPI_Datatype *, MPI_Comm))
   3: v1
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, const void *)
   5: (const void *)[B3.4] (CStyleCastExpr, NoOp, const void *)
   6: v2
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, const int *)
   8: (const int *)[B3.7] (CStyleCastExpr, NoOp, const int *)
   9: v3
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, const int *)
  11: (const int *)[B3.10] (CStyleCastExpr, NoOp, const int *)
  12: l4
  13: [B3.12] (ImplicitCastExpr, LValueToRValue, MPI_Datatype *)
  14: [B3.13] (ImplicitCastExpr, NoOp, const MPI_Datatype *)
  15: v5
  16: [B3.15] (ImplicitCastExpr, LValueToRValue, void *)
  17: v6
  18: [B3.17] (ImplicitCastExpr, LValueToRValue, const int *)
  19: (const int *)[B3.18] (CStyleCastExpr, NoOp, const int *)
  20: v7
  21: [B3.20] (ImplicitCastExpr, LValueToRValue, const int *)
  22: (const int *)[B3.21] (CStyleCastExpr, NoOp, const int *)
  23: l8
  24: [B3.23] (ImplicitCastExpr, LValueToRValue, MPI_Datatype *)
  25: [B3.24] (ImplicitCastExpr, NoOp, const MPI_Datatype *)
  26: this
  27: [B3.26]->the_real_comm
  28: [B3.27] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  29: (MPI_Comm)[B3.28] (CStyleCastExpr, NoOp, MPI_Comm)
  30: [B3.2]([B3.5], [B3.8], [B3.11], [B3.14], [B3.16], [B3.19], [B3.22], [B3.25], [B3.29])
  31: int err = MPI_Alltoallw((const void *)v1, (const int *)v2, (const int *)v3, l4, v5, (const int *)v6, (const int *)v7, l8, (MPI_Comm)this->the_real_comm);
  32: err
  33: [B3.32] (ImplicitCastExpr, LValueToRValue, int)
  34: [B3.33] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.34]
   Preds (1): B6
   Succs (2): B2 B1

 [B4]
   1: i8
   2: [B4.1]++
   Preds (1): B5
   Succs (1): B6

 [B5]
   1: v8
   2: [B5.1] (ImplicitCastExpr, LValueToRValue, const class MPI::Datatype *)
   3: i8
   4: [B5.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B5.2][[B5.4]]
   6: [B5.5].the_real_datatype
   7: [B5.6] (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
   8: l8
   9: [B5.8] (ImplicitCastExpr, LValueToRValue, MPI_Datatype *)
  10: i8
  11: [B5.10] (ImplicitCastExpr, LValueToRValue, int)
  12: [B5.9][[B5.11]]
  13: [B5.12] = [B5.7]
   Preds (1): B6
   Succs (1): B4

 [B6]
   1: i8
   2: [B6.1] (ImplicitCastExpr, LValueToRValue, int)
   3: this
   4: [B6.3]->Get_size
   5: [B6.4]()
   6: [B6.2] < [B6.5]
   T: for (...; [B6.6]; ...)
   Preds (2): B4 B7
   Succs (2): B5 B3

 [B7]
   1: int i8;
   2: 0
   3: i8
   4: [B7.3] = [B7.2]
   Preds (1): B10
   Succs (1): B6

 [B8]
   1: i4
   2: [B8.1]++
   Preds (1): B9
   Succs (1): B10

 [B9]
   1: v4
   2: [B9.1] (ImplicitCastExpr, LValueToRValue, const class MPI::Datatype *)
   3: i4
   4: [B9.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B9.2][[B9.4]]
   6: [B9.5].the_real_datatype
   7: [B9.6] (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
   8: l4
   9: [B9.8] (ImplicitCastExpr, LValueToRValue, MPI_Datatype *)
  10: i4
  11: [B9.10] (ImplicitCastExpr, LValueToRValue, int)
  12: [B9.9][[B9.11]]
  13: [B9.12] = [B9.7]
   Preds (1): B10
   Succs (1): B8

 [B10]
   1: i4
   2: [B10.1] (ImplicitCastExpr, LValueToRValue, int)
   3: this
   4: [B10.3]->Get_size
   5: [B10.4]()
   6: [B10.2] < [B10.5]
   T: for (...; [B10.6]; ...)
   Preds (2): B8 B11
   Succs (2): B9 B7

 [B11]
   1: this
   2: [B11.1]->Get_size
   3: [B11.2]()
   4: CFGNewAllocator(MPI_Datatype *)
   5: new MPI_Datatype [[B11.3]]
   6: MPI_Datatype *l4 = new MPI_Datatype [this->Get_size()];
   7: this
   8: [B11.7]->Get_size
   9: [B11.8]()
  10: CFGNewAllocator(MPI_Datatype *)
  11: new MPI_Datatype [[B11.9]]
  12: MPI_Datatype *l8 = new MPI_Datatype [this->Get_size()];
  13: int i4;
  14: 0
  15: i4
  16: [B11.15] = [B11.14]
   Preds (1): B12
   Succs (1): B10

 [B0 (EXIT)]
   Preds (1): B1

virtual void Alltoall(const void *v1, int v2, const MPI::Datatype &v3, void *v4, int v5, const MPI::Datatype &v6) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1])->Call_errhandler
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Alltoall
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const void *, int, MPI_Datatype, void *, int, MPI_Datatype, MPI_Comm))
   3: v1
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, const void *)
   5: (const void *)[B2.4] (CStyleCastExpr, NoOp, const void *)
   6: v2
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, int)
   8: v3
   9: [B2.8].the_real_datatype
  10: ([B2.9]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  11: (MPI_Datatype)[B2.10] (CStyleCastExpr, NoOp, MPI_Datatype)
  12: v4
  13: [B2.12] (ImplicitCastExpr, LValueToRValue, void *)
  14: v5
  15: [B2.14] (ImplicitCastExpr, LValueToRValue, int)
  16: v6
  17: [B2.16].the_real_datatype
  18: ([B2.17]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  19: (MPI_Datatype)[B2.18] (CStyleCastExpr, NoOp, MPI_Datatype)
  20: this
  21: [B2.20]->the_real_comm
  22: [B2.21] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  23: (MPI_Comm)[B2.22] (CStyleCastExpr, NoOp, MPI_Comm)
  24: [B2.2]([B2.5], [B2.7], [B2.11], [B2.13], [B2.15], [B2.19], [B2.23])
  25: int err = MPI_Alltoall((const void *)v1, v2, (MPI_Datatype)(v3.the_real_datatype), v4, v5, (MPI_Datatype)(v6.the_real_datatype), (MPI_Comm)this->the_real_comm);
  26: err
  27: [B2.26] (ImplicitCastExpr, LValueToRValue, int)
  28: [B2.27] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.28]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual bool Get_attr(int v2, void *v3) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v4
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 0
   4: [B1.2] != [B1.3]
   5: return [B1.4];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1])->Call_errhandler
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: int v4;
   2: MPI_Comm_get_attr
   3: [B3.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, int, void *, int *))
   4: this
   5: [B3.4]->the_real_comm
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   7: (MPI_Comm)[B3.6] (CStyleCastExpr, NoOp, MPI_Comm)
   8: v2
   9: [B3.8] (ImplicitCastExpr, LValueToRValue, int)
  10: v3
  11: [B3.10] (ImplicitCastExpr, LValueToRValue, void *)
  12: v4
  13: &[B3.12]
  14: [B3.3]([B3.7], [B3.9], [B3.11], [B3.13])
  15: int err = MPI_Comm_get_attr((MPI_Comm)this->the_real_comm, v2, v3, &v4);
  16: err
  17: [B3.16] (ImplicitCastExpr, LValueToRValue, int)
  18: [B3.17] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.18]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual void Barrier() const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1])->Call_errhandler
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Barrier
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm))
   3: this
   4: [B2.3]->the_real_comm
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   6: (MPI_Comm)[B2.5] (CStyleCastExpr, NoOp, MPI_Comm)
   7: [B2.2]([B2.6])
   8: int err = MPI_Barrier((MPI_Comm)this->the_real_comm);
   9: err
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B2.10] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.11]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Bcast(void *v1, int v2, const MPI::Datatype &v3, int v4) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1])->Call_errhandler
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Bcast
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(void *, int, MPI_Datatype, int, MPI_Comm))
   3: v1
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, void *)
   5: v2
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, int)
   7: v3
   8: [B2.7].the_real_datatype
   9: ([B2.8]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  10: (MPI_Datatype)[B2.9] (CStyleCastExpr, NoOp, MPI_Datatype)
  11: v4
  12: [B2.11] (ImplicitCastExpr, LValueToRValue, int)
  13: this
  14: [B2.13]->the_real_comm
  15: [B2.14] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  16: (MPI_Comm)[B2.15] (CStyleCastExpr, NoOp, MPI_Comm)
  17: [B2.2]([B2.4], [B2.6], [B2.10], [B2.12], [B2.16])
  18: int err = MPI_Bcast(v1, v2, (MPI_Datatype)(v3.the_real_datatype), v4, (MPI_Comm)this->the_real_comm);
  19: err
  20: [B2.19] (ImplicitCastExpr, LValueToRValue, int)
  21: [B2.20] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.21]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Set_attr(int v2, const void *v3)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::Comm *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Comm_set_attr
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, int, void *))
   3: this
   4: [B2.3]->the_real_comm
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   6: (MPI_Comm)[B2.5] (CStyleCastExpr, NoOp, MPI_Comm)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, int)
   9: v3
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, const void *)
  11: (void *)[B2.10] (CStyleCastExpr, NoOp, void *)
  12: [B2.2]([B2.6], [B2.8], [B2.11])
  13: int err = MPI_Comm_set_attr((MPI_Comm)this->the_real_comm, v2, (void *)v3);
  14: err
  15: [B2.14] (ImplicitCastExpr, LValueToRValue, int)
  16: [B2.15] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.16]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Set_name(const char *v2)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::Comm *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Comm_set_name
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, const char *))
   3: this
   4: [B2.3]->the_real_comm
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   6: (MPI_Comm)[B2.5] (CStyleCastExpr, NoOp, MPI_Comm)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, const char *)
   9: (const char *)[B2.8] (CStyleCastExpr, NoOp, const char *)
  10: [B2.2]([B2.6], [B2.9])
  11: int err = MPI_Comm_set_name((MPI_Comm)this->the_real_comm, (const char *)v2);
  12: err
  13: [B2.12] (ImplicitCastExpr, LValueToRValue, int)
  14: [B2.13] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.14]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Alltoallv(const void *v1, const int *v2, const int *v3, const MPI::Datatype &v4, void *v5, const int *v6, const int *v7, const MPI::Datatype &v8) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1])->Call_errhandler
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Alltoallv
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const void *, const int *, const int *, MPI_Datatype, void *, const int *, const int *, MPI_Datatype, MPI_Comm))
   3: v1
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, const void *)
   5: (const void *)[B2.4] (CStyleCastExpr, NoOp, const void *)
   6: v2
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, const int *)
   8: (const int *)[B2.7] (CStyleCastExpr, NoOp, const int *)
   9: v3
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, const int *)
  11: (const int *)[B2.10] (CStyleCastExpr, NoOp, const int *)
  12: v4
  13: [B2.12].the_real_datatype
  14: ([B2.13]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  15: (MPI_Datatype)[B2.14] (CStyleCastExpr, NoOp, MPI_Datatype)
  16: v5
  17: [B2.16] (ImplicitCastExpr, LValueToRValue, void *)
  18: v6
  19: [B2.18] (ImplicitCastExpr, LValueToRValue, const int *)
  20: (const int *)[B2.19] (CStyleCastExpr, NoOp, const int *)
  21: v7
  22: [B2.21] (ImplicitCastExpr, LValueToRValue, const int *)
  23: (const int *)[B2.22] (CStyleCastExpr, NoOp, const int *)
  24: v8
  25: [B2.24].the_real_datatype
  26: ([B2.25]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  27: (MPI_Datatype)[B2.26] (CStyleCastExpr, NoOp, MPI_Datatype)
  28: this
  29: [B2.28]->the_real_comm
  30: [B2.29] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  31: (MPI_Comm)[B2.30] (CStyleCastExpr, NoOp, MPI_Comm)
  32: [B2.2]([B2.5], [B2.8], [B2.11], [B2.15], [B2.17], [B2.20], [B2.23], [B2.27], [B2.31])
  33: int err = MPI_Alltoallv((const void *)v1, (const int *)v2, (const int *)v3, (MPI_Datatype)(v4.the_real_datatype), v5, (const int *)v6, (const int *)v7, (MPI_Datatype)(v8.the_real_datatype), (MPI_Comm)this->the_real_comm);
  34: err
  35: [B2.34] (ImplicitCastExpr, LValueToRValue, int)
  36: [B2.35] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.36]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Reduce_scatter(const void *v1, void *v2, const int v3[], const MPI::Datatype &v4, const MPI::Op &v5) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1])->Call_errhandler
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Reduce_scatter
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const void *, void *, const int *, MPI_Datatype, MPI_Op, MPI_Comm))
   3: v1
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, const void *)
   5: (const void *)[B2.4] (CStyleCastExpr, NoOp, const void *)
   6: v2
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, void *)
   8: v3
   9: [B2.8] (ImplicitCastExpr, LValueToRValue, const int *)
  10: v4
  11: [B2.10].the_real_datatype
  12: ([B2.11]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  13: (MPI_Datatype)[B2.12] (CStyleCastExpr, NoOp, MPI_Datatype)
  14: v5
  15: [B2.14].the_real_op
  16: ([B2.15]) (ImplicitCastExpr, LValueToRValue, MPI_Op)
  17: (MPI_Op)[B2.16] (CStyleCastExpr, NoOp, MPI_Op)
  18: this
  19: [B2.18]->the_real_comm
  20: [B2.19] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  21: (MPI_Comm)[B2.20] (CStyleCastExpr, NoOp, MPI_Comm)
  22: [B2.2]([B2.5], [B2.7], [B2.9], [B2.13], [B2.17], [B2.21])
  23: int err = MPI_Reduce_scatter((const void *)v1, v2, v3, (MPI_Datatype)(v4.the_real_datatype), (MPI_Op)(v5.the_real_op), (MPI_Comm)this->the_real_comm);
  24: err
  25: [B2.24] (ImplicitCastExpr, LValueToRValue, int)
  26: [B2.25] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.26]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Scatter(const void *v1, int v2, const MPI::Datatype &v3, void *v4, int v5, const MPI::Datatype &v6, int v7) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1])->Call_errhandler
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Scatter
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const void *, int, MPI_Datatype, void *, int, MPI_Datatype, int, MPI_Comm))
   3: v1
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, const void *)
   5: (const void *)[B2.4] (CStyleCastExpr, NoOp, const void *)
   6: v2
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, int)
   8: v3
   9: [B2.8].the_real_datatype
  10: ([B2.9]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  11: (MPI_Datatype)[B2.10] (CStyleCastExpr, NoOp, MPI_Datatype)
  12: v4
  13: [B2.12] (ImplicitCastExpr, LValueToRValue, void *)
  14: v5
  15: [B2.14] (ImplicitCastExpr, LValueToRValue, int)
  16: v6
  17: [B2.16].the_real_datatype
  18: ([B2.17]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  19: (MPI_Datatype)[B2.18] (CStyleCastExpr, NoOp, MPI_Datatype)
  20: v7
  21: [B2.20] (ImplicitCastExpr, LValueToRValue, int)
  22: this
  23: [B2.22]->the_real_comm
  24: [B2.23] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  25: (MPI_Comm)[B2.24] (CStyleCastExpr, NoOp, MPI_Comm)
  26: [B2.2]([B2.5], [B2.7], [B2.11], [B2.13], [B2.15], [B2.19], [B2.21], [B2.25])
  27: int err = MPI_Scatter((const void *)v1, v2, (MPI_Datatype)(v3.the_real_datatype), v4, v5, (MPI_Datatype)(v6.the_real_datatype), v7, (MPI_Comm)this->the_real_comm);
  28: err
  29: [B2.28] (ImplicitCastExpr, LValueToRValue, int)
  30: [B2.29] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.30]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Gather(const void *v1, int v2, const MPI::Datatype &v3, void *v4, int v5, const MPI::Datatype &v6, int v7) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1])->Call_errhandler
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Gather
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const void *, int, MPI_Datatype, void *, int, MPI_Datatype, int, MPI_Comm))
   3: v1
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, const void *)
   5: (const void *)[B2.4] (CStyleCastExpr, NoOp, const void *)
   6: v2
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, int)
   8: v3
   9: [B2.8].the_real_datatype
  10: ([B2.9]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  11: (MPI_Datatype)[B2.10] (CStyleCastExpr, NoOp, MPI_Datatype)
  12: v4
  13: [B2.12] (ImplicitCastExpr, LValueToRValue, void *)
  14: v5
  15: [B2.14] (ImplicitCastExpr, LValueToRValue, int)
  16: v6
  17: [B2.16].the_real_datatype
  18: ([B2.17]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  19: (MPI_Datatype)[B2.18] (CStyleCastExpr, NoOp, MPI_Datatype)
  20: v7
  21: [B2.20] (ImplicitCastExpr, LValueToRValue, int)
  22: this
  23: [B2.22]->the_real_comm
  24: [B2.23] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  25: (MPI_Comm)[B2.24] (CStyleCastExpr, NoOp, MPI_Comm)
  26: [B2.2]([B2.5], [B2.7], [B2.11], [B2.13], [B2.15], [B2.19], [B2.21], [B2.25])
  27: int err = MPI_Gather((const void *)v1, v2, (MPI_Datatype)(v3.the_real_datatype), v4, v5, (MPI_Datatype)(v6.the_real_datatype), v7, (MPI_Comm)this->the_real_comm);
  28: err
  29: [B2.28] (ImplicitCastExpr, LValueToRValue, int)
  30: [B2.29] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.30]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

static void Free_keyval(int &v1)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: MPIR_Call_world_errhand
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Comm_free_keyval
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int *))
   3: v1
   4: &[B2.3]
   5: [B2.2]([B2.4])
   6: int err = MPI_Comm_free_keyval(&v1);
   7: err
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, int)
   9: [B2.8] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.9]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Reduce(const void *v1, void *v2, int v3, const MPI::Datatype &v4, const MPI::Op &v5, int v6) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1])->Call_errhandler
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Reduce
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const void *, void *, int, MPI_Datatype, MPI_Op, int, MPI_Comm))
   3: v1
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, const void *)
   5: (const void *)[B2.4] (CStyleCastExpr, NoOp, const void *)
   6: v2
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, void *)
   8: v3
   9: [B2.8] (ImplicitCastExpr, LValueToRValue, int)
  10: v4
  11: [B2.10].the_real_datatype
  12: ([B2.11]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  13: (MPI_Datatype)[B2.12] (CStyleCastExpr, NoOp, MPI_Datatype)
  14: v5
  15: [B2.14].the_real_op
  16: ([B2.15]) (ImplicitCastExpr, LValueToRValue, MPI_Op)
  17: (MPI_Op)[B2.16] (CStyleCastExpr, NoOp, MPI_Op)
  18: v6
  19: [B2.18] (ImplicitCastExpr, LValueToRValue, int)
  20: this
  21: [B2.20]->the_real_comm
  22: [B2.21] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  23: (MPI_Comm)[B2.22] (CStyleCastExpr, NoOp, MPI_Comm)
  24: [B2.2]([B2.5], [B2.7], [B2.9], [B2.13], [B2.17], [B2.19], [B2.23])
  25: int err = MPI_Reduce((const void *)v1, v2, v3, (MPI_Datatype)(v4.the_real_datatype), (MPI_Op)(v5.the_real_op), v6, (MPI_Comm)this->the_real_comm);
  26: err
  27: [B2.26] (ImplicitCastExpr, LValueToRValue, int)
  28: [B2.27] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.28]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Allgather(const void *v1, int v2, const MPI::Datatype &v3, void *v4, int v5, const MPI::Datatype &v6) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1])->Call_errhandler
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Allgather
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const void *, int, MPI_Datatype, void *, int, MPI_Datatype, MPI_Comm))
   3: v1
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, const void *)
   5: (const void *)[B2.4] (CStyleCastExpr, NoOp, const void *)
   6: v2
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, int)
   8: v3
   9: [B2.8].the_real_datatype
  10: ([B2.9]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  11: (MPI_Datatype)[B2.10] (CStyleCastExpr, NoOp, MPI_Datatype)
  12: v4
  13: [B2.12] (ImplicitCastExpr, LValueToRValue, void *)
  14: v5
  15: [B2.14] (ImplicitCastExpr, LValueToRValue, int)
  16: v6
  17: [B2.16].the_real_datatype
  18: ([B2.17]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  19: (MPI_Datatype)[B2.18] (CStyleCastExpr, NoOp, MPI_Datatype)
  20: this
  21: [B2.20]->the_real_comm
  22: [B2.21] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  23: (MPI_Comm)[B2.22] (CStyleCastExpr, NoOp, MPI_Comm)
  24: [B2.2]([B2.5], [B2.7], [B2.11], [B2.13], [B2.15], [B2.19], [B2.23])
  25: int err = MPI_Allgather((const void *)v1, v2, (MPI_Datatype)(v3.the_real_datatype), v4, v5, (MPI_Datatype)(v6.the_real_datatype), (MPI_Comm)this->the_real_comm);
  26: err
  27: [B2.26] (ImplicitCastExpr, LValueToRValue, int)
  28: [B2.27] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.28]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Delete_attr(int v2)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::Comm *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Comm_delete_attr
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, int))
   3: this
   4: [B2.3]->the_real_comm
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   6: (MPI_Comm)[B2.5] (CStyleCastExpr, NoOp, MPI_Comm)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, int)
   9: [B2.2]([B2.6], [B2.8])
  10: int err = MPI_Comm_delete_attr((MPI_Comm)this->the_real_comm, v2);
  11: err
  12: [B2.11] (ImplicitCastExpr, LValueToRValue, int)
  13: [B2.12] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.13]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Scatterv(const void *v1, const int *v2, const int *v3, const MPI::Datatype &v4, void *v5, int v6, const MPI::Datatype &v7, int v8) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1])->Call_errhandler
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Scatterv
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const void *, const int *, const int *, MPI_Datatype, void *, int, MPI_Datatype, int, MPI_Comm))
   3: v1
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, const void *)
   5: (const void *)[B2.4] (CStyleCastExpr, NoOp, const void *)
   6: v2
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, const int *)
   8: (const int *)[B2.7] (CStyleCastExpr, NoOp, const int *)
   9: v3
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, const int *)
  11: (const int *)[B2.10] (CStyleCastExpr, NoOp, const int *)
  12: v4
  13: [B2.12].the_real_datatype
  14: ([B2.13]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  15: (MPI_Datatype)[B2.14] (CStyleCastExpr, NoOp, MPI_Datatype)
  16: v5
  17: [B2.16] (ImplicitCastExpr, LValueToRValue, void *)
  18: v6
  19: [B2.18] (ImplicitCastExpr, LValueToRValue, int)
  20: v7
  21: [B2.20].the_real_datatype
  22: ([B2.21]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  23: (MPI_Datatype)[B2.22] (CStyleCastExpr, NoOp, MPI_Datatype)
  24: v8
  25: [B2.24] (ImplicitCastExpr, LValueToRValue, int)
  26: this
  27: [B2.26]->the_real_comm
  28: [B2.27] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  29: (MPI_Comm)[B2.28] (CStyleCastExpr, NoOp, MPI_Comm)
  30: [B2.2]([B2.5], [B2.8], [B2.11], [B2.15], [B2.17], [B2.19], [B2.23], [B2.25], [B2.29])
  31: int err = MPI_Scatterv((const void *)v1, (const int *)v2, (const int *)v3, (MPI_Datatype)(v4.the_real_datatype), v5, v6, (MPI_Datatype)(v7.the_real_datatype), v8, (MPI_Comm)this->the_real_comm);
  32: err
  33: [B2.32] (ImplicitCastExpr, LValueToRValue, int)
  34: [B2.33] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.34]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Get_name(char *v2, int &v3) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1])->Call_errhandler
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Comm_get_name
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, char *, int *))
   3: this
   4: [B2.3]->the_real_comm
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   6: (MPI_Comm)[B2.5] (CStyleCastExpr, NoOp, MPI_Comm)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, char *)
   9: v3
  10: &[B2.9]
  11: [B2.2]([B2.6], [B2.8], [B2.10])
  12: int err = MPI_Comm_get_name((MPI_Comm)this->the_real_comm, v2, &v3);
  13: err
  14: [B2.13] (ImplicitCastExpr, LValueToRValue, int)
  15: [B2.14] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.15]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Allgatherv(const void *v1, int v2, const MPI::Datatype &v3, void *v4, const int *v5, const int *v6, const MPI::Datatype &v7) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1])->Call_errhandler
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Allgatherv
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const void *, int, MPI_Datatype, void *, const int *, const int *, MPI_Datatype, MPI_Comm))
   3: v1
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, const void *)
   5: (const void *)[B2.4] (CStyleCastExpr, NoOp, const void *)
   6: v2
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, int)
   8: v3
   9: [B2.8].the_real_datatype
  10: ([B2.9]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  11: (MPI_Datatype)[B2.10] (CStyleCastExpr, NoOp, MPI_Datatype)
  12: v4
  13: [B2.12] (ImplicitCastExpr, LValueToRValue, void *)
  14: v5
  15: [B2.14] (ImplicitCastExpr, LValueToRValue, const int *)
  16: (const int *)[B2.15] (CStyleCastExpr, NoOp, const int *)
  17: v6
  18: [B2.17] (ImplicitCastExpr, LValueToRValue, const int *)
  19: (const int *)[B2.18] (CStyleCastExpr, NoOp, const int *)
  20: v7
  21: [B2.20].the_real_datatype
  22: ([B2.21]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  23: (MPI_Datatype)[B2.22] (CStyleCastExpr, NoOp, MPI_Datatype)
  24: this
  25: [B2.24]->the_real_comm
  26: [B2.25] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  27: (MPI_Comm)[B2.26] (CStyleCastExpr, NoOp, MPI_Comm)
  28: [B2.2]([B2.5], [B2.7], [B2.11], [B2.13], [B2.16], [B2.19], [B2.23], [B2.27])
  29: int err = MPI_Allgatherv((const void *)v1, v2, (MPI_Datatype)(v3.the_real_datatype), v4, (const int *)v5, (const int *)v6, (MPI_Datatype)(v7.the_real_datatype), (MPI_Comm)this->the_real_comm);
  30: err
  31: [B2.30] (ImplicitCastExpr, LValueToRValue, int)
  32: [B2.31] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.32]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

static int NULL_COPY_FN(const MPI::Comm &oldcomm, int keyval, void *ex, void *attr_in, void *attr_out, bool &flag)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 0
   2: [B1.1] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   3: flag
   4: [B1.3] = [B1.2]
   5: 0
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static int NULL_DELETE_FN(MPI::Comm &comm, int keyval, void *attr, void *ex)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 0
   2: return [B1.1];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static int DUP_FN(const MPI::Comm &oldcomm, int keyval, void *ex, void *attr_in, void *attr_out, bool &flag)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 1
   2: [B1.1] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   3: flag
   4: [B1.3] = [B1.2]
   5: attr_in
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, void *)
   7: attr_out
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, void *)
   9: (void **)[B1.8] (CStyleCastExpr, BitCast, void **)
  10: *[B1.9]
  11: [B1.10] = [B1.6]
  12: 0
  13: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual void Reduce_scatter_block(const void *v1, void *v2, int v3, const MPI::Datatype &v4, const MPI::Op &v5) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1])->Call_errhandler
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Reduce_scatter_block
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const void *, void *, int, MPI_Datatype, MPI_Op, MPI_Comm))
   3: v1
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, const void *)
   5: (const void *)[B2.4] (CStyleCastExpr, NoOp, const void *)
   6: v2
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, void *)
   8: v3
   9: [B2.8] (ImplicitCastExpr, LValueToRValue, int)
  10: v4
  11: [B2.10].the_real_datatype
  12: ([B2.11]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  13: (MPI_Datatype)[B2.12] (CStyleCastExpr, NoOp, MPI_Datatype)
  14: v5
  15: [B2.14].the_real_op
  16: ([B2.15]) (ImplicitCastExpr, LValueToRValue, MPI_Op)
  17: (MPI_Op)[B2.16] (CStyleCastExpr, NoOp, MPI_Op)
  18: this
  19: [B2.18]->the_real_comm
  20: [B2.19] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  21: (MPI_Comm)[B2.20] (CStyleCastExpr, NoOp, MPI_Comm)
  22: [B2.2]([B2.5], [B2.7], [B2.9], [B2.13], [B2.17], [B2.21])
  23: int err = MPI_Reduce_scatter_block((const void *)v1, v2, v3, (MPI_Datatype)(v4.the_real_datatype), (MPI_Op)(v5.the_real_op), (MPI_Comm)this->the_real_comm);
  24: err
  25: [B2.24] (ImplicitCastExpr, LValueToRValue, int)
  26: [B2.25] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.26]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

inline Nullcomm(MPI_Comm obj) : MPI::Comm(obj) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   3: [B1.2] (CXXConstructExpr, class MPI::Comm)
   4: Comm([B1.3]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline Nullcomm() : MPI::Comm() {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, class MPI::Comm)
   2: Comm([B1.1]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~MPI::Nullcomm() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ~Comm() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

Nullcomm(const MPI::Nullcomm &obj) : MPI::Comm(obj) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, DerivedToBase, const class MPI::Comm)
   3: [B1.2] (CXXConstructExpr, class MPI::Comm)
   4: Comm([B1.3]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

MPI::Nullcomm &operator=(const MPI::Nullcomm &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm)
   3: [B1.2].the_real_comm
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   5: this
   6: [B1.5] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   7: [B1.6]->the_real_comm
   8: [B1.7] = [B1.4]
   9: this
  10: *[B1.9]
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline operator MPI_Comm *()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   3: [B1.2]->the_real_comm
   4: &[B1.3]
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline operator MPI_Comm() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   3: [B1.2]->the_real_comm
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

MPI::Nullcomm &operator=(const MPI_Comm &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   3: this
   4: [B1.3] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   5: [B1.4]->the_real_comm
   6: [B1.5] = [B1.2]
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual MPI::Nullcomm &Clone() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: CFGNewAllocator(MPI::Nullcomm *)
   2:  (CXXConstructExpr, class MPI::Nullcomm)
   3: new MPI::Nullcomm([B1.2])
   4: MPI::Nullcomm *clone = new MPI::Nullcomm();
   5: clone
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, class MPI::Nullcomm *)
   7: *[B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline Intercomm(MPI_Comm obj) : MPI::Comm(obj) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   3: [B1.2] (CXXConstructExpr, class MPI::Comm)
   4: Comm([B1.3]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline Intercomm() : MPI::Comm() {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, class MPI::Comm)
   2: Comm([B1.1]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~MPI::Intercomm() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ~Comm() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

Intercomm(const MPI::Intercomm &obj) : MPI::Comm(obj) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, DerivedToBase, const class MPI::Comm)
   3: [B1.2] (CXXConstructExpr, class MPI::Comm)
   4: Comm([B1.3]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

MPI::Intercomm &operator=(const MPI::Intercomm &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm)
   3: [B1.2].the_real_comm
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   5: this
   6: [B1.5] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   7: [B1.6]->the_real_comm
   8: [B1.7] = [B1.4]
   9: this
  10: *[B1.9]
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline operator MPI_Comm *()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   3: [B1.2]->the_real_comm
   4: &[B1.3]
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline operator MPI_Comm() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   3: [B1.2]->the_real_comm
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

MPI::Intercomm &operator=(const MPI_Comm &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   3: this
   4: [B1.3] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   5: [B1.4]->the_real_comm
   6: [B1.5] = [B1.2]
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual MPI::Group Get_remote_group() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v2
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Group)
   3: [B1.2] (CXXConstructExpr, class MPI::Group)
   4: return [B1.3];
   5: [B3.2].~Group() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1]) (ImplicitCastExpr, UncheckedDerivedToBase, const class MPI::Comm *)
   3: [B2.2]->Call_errhandler
   4: err
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B2.3]([B2.5])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Group)
   2: MPI::Group v2;
   3: MPI_Comm_remote_group
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, MPI_Group *))
   5: this
   6: [B3.5] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   7: [B3.6]->the_real_comm
   8: [B3.7] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   9: (MPI_Comm)[B3.8] (CStyleCastExpr, NoOp, MPI_Comm)
  10: v2
  11: [B3.10].the_real_group
  12: &([B3.11])
  13: [B3.4]([B3.9], [B3.12])
  14: int err = MPI_Comm_remote_group((MPI_Comm)this->the_real_comm, &(v2.the_real_group));
  15: err
  16: [B3.15] (ImplicitCastExpr, LValueToRValue, int)
  17: [B3.16] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.17]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual int Get_remote_size() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v2
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1]) (ImplicitCastExpr, UncheckedDerivedToBase, const class MPI::Comm *)
   3: [B2.2]->Call_errhandler
   4: err
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B2.3]([B2.5])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: int v2;
   2: MPI_Comm_remote_size
   3: [B3.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, int *))
   4: this
   5: [B3.4] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   6: [B3.5]->the_real_comm
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   8: (MPI_Comm)[B3.7] (CStyleCastExpr, NoOp, MPI_Comm)
   9: v2
  10: &[B3.9]
  11: [B3.3]([B3.8], [B3.10])
  12: int err = MPI_Comm_remote_size((MPI_Comm)this->the_real_comm, &v2);
  13: err
  14: [B3.13] (ImplicitCastExpr, LValueToRValue, int)
  15: [B3.14] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.15]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

MPI::Intercomm Dup() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v2
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Intercomm)
   3: [B1.2] (CXXConstructExpr, class MPI::Intercomm)
   4: return [B1.3];
   5: [B3.2].~Intercomm() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1]) (ImplicitCastExpr, UncheckedDerivedToBase, const class MPI::Comm *)
   3: [B2.2]->Call_errhandler
   4: err
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B2.3]([B2.5])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Intercomm)
   2: MPI::Intercomm v2;
   3: MPI_Comm_dup
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, MPI_Comm *))
   5: this
   6: [B3.5] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   7: [B3.6]->the_real_comm
   8: [B3.7] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   9: (MPI_Comm)[B3.8] (CStyleCastExpr, NoOp, MPI_Comm)
  10: v2
  11: [B3.10] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm)
  12: [B3.11].the_real_comm
  13: &([B3.12])
  14: [B3.4]([B3.9], [B3.13])
  15: int err = MPI_Comm_dup((MPI_Comm)this->the_real_comm, &(v2.the_real_comm));
  16: err
  17: [B3.16] (ImplicitCastExpr, LValueToRValue, int)
  18: [B3.17] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.18]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual MPI::Intercomm Split(int v2, int v3) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v4
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Intercomm)
   3: [B1.2] (CXXConstructExpr, class MPI::Intercomm)
   4: return [B1.3];
   5: [B3.2].~Intercomm() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1]) (ImplicitCastExpr, UncheckedDerivedToBase, const class MPI::Comm *)
   3: [B2.2]->Call_errhandler
   4: err
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B2.3]([B2.5])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Intercomm)
   2: MPI::Intercomm v4;
   3: MPI_Comm_split
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, int, int, MPI_Comm *))
   5: this
   6: [B3.5] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   7: [B3.6]->the_real_comm
   8: [B3.7] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   9: (MPI_Comm)[B3.8] (CStyleCastExpr, NoOp, MPI_Comm)
  10: v2
  11: [B3.10] (ImplicitCastExpr, LValueToRValue, int)
  12: v3
  13: [B3.12] (ImplicitCastExpr, LValueToRValue, int)
  14: v4
  15: [B3.14] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm)
  16: [B3.15].the_real_comm
  17: &([B3.16])
  18: [B3.4]([B3.9], [B3.11], [B3.13], [B3.17])
  19: int err = MPI_Comm_split((MPI_Comm)this->the_real_comm, v2, v3, &(v4.the_real_comm));
  20: err
  21: [B3.20] (ImplicitCastExpr, LValueToRValue, int)
  22: [B3.21] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.22]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual MPI::Intercomm &Clone() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: MPI_Comm ncomm;
   2: MPI_Comm_dup
   3: [B1.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, MPI_Comm *))
   4: this
   5: [B1.4] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   6: [B1.5]->the_real_comm
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   8: (MPI_Comm)[B1.7] (CStyleCastExpr, NoOp, MPI_Comm)
   9: ncomm
  10: &[B1.9]
  11: [B1.3]([B1.8], [B1.10])
  12: CFGNewAllocator(MPI::Intercomm *)
  13: ncomm
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  15: [B1.14] (CXXConstructExpr, class MPI::Intercomm)
  16: new MPI::Intercomm([B1.15])
  17: MPI::Intercomm *clone = new MPI::Intercomm(ncomm);
  18: clone
  19: [B1.18] (ImplicitCastExpr, LValueToRValue, class MPI::Intercomm *)
  20: *[B1.19]
  21: return [B1.20];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline Intracomm(MPI_Comm obj) : MPI::Comm(obj) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   3: [B1.2] (CXXConstructExpr, class MPI::Comm)
   4: Comm([B1.3]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline Intracomm() : MPI::Comm() {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, class MPI::Comm)
   2: Comm([B1.1]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~MPI::Intracomm() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ~Comm() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

Intracomm(const MPI::Intracomm &obj) : MPI::Comm(obj) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, DerivedToBase, const class MPI::Comm)
   3: [B1.2] (CXXConstructExpr, class MPI::Comm)
   4: Comm([B1.3]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

MPI::Intracomm &operator=(const MPI::Intracomm &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm)
   3: [B1.2].the_real_comm
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   5: this
   6: [B1.5] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   7: [B1.6]->the_real_comm
   8: [B1.7] = [B1.4]
   9: this
  10: *[B1.9]
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline operator MPI_Comm *()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   3: [B1.2]->the_real_comm
   4: &[B1.3]
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline operator MPI_Comm() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   3: [B1.2]->the_real_comm
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

MPI::Intracomm &operator=(const MPI_Comm &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   3: this
   4: [B1.3] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   5: [B1.4]->the_real_comm
   6: [B1.5] = [B1.2]
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual MPI::Intercomm Create_intercomm(int v2, const MPI::Comm &v3, int v4, int v5) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v6
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Intercomm)
   3: [B1.2] (CXXConstructExpr, class MPI::Intercomm)
   4: return [B1.3];
   5: [B3.2].~Intercomm() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1]) (ImplicitCastExpr, UncheckedDerivedToBase, const class MPI::Comm *)
   3: [B2.2]->Call_errhandler
   4: err
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B2.3]([B2.5])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Intercomm)
   2: MPI::Intercomm v6;
   3: MPI_Intercomm_create
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, int, MPI_Comm, int, int, MPI_Comm *))
   5: this
   6: [B3.5] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   7: [B3.6]->the_real_comm
   8: [B3.7] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   9: (MPI_Comm)[B3.8] (CStyleCastExpr, NoOp, MPI_Comm)
  10: v2
  11: [B3.10] (ImplicitCastExpr, LValueToRValue, int)
  12: v3
  13: [B3.12].the_real_comm
  14: ([B3.13]) (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  15: (MPI_Comm)[B3.14] (CStyleCastExpr, NoOp, MPI_Comm)
  16: v4
  17: [B3.16] (ImplicitCastExpr, LValueToRValue, int)
  18: v5
  19: [B3.18] (ImplicitCastExpr, LValueToRValue, int)
  20: v6
  21: [B3.20] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm)
  22: [B3.21].the_real_comm
  23: &([B3.22])
  24: [B3.4]([B3.9], [B3.11], [B3.15], [B3.17], [B3.19], [B3.23])
  25: int err = MPI_Intercomm_create((MPI_Comm)this->the_real_comm, v2, (MPI_Comm)(v3.the_real_comm), v4, v5, &(v6.the_real_comm));
  26: err
  27: [B3.26] (ImplicitCastExpr, LValueToRValue, int)
  28: [B3.27] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.28]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual MPI::Intracomm Split(int v2, int v3) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v4
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Intracomm)
   3: [B1.2] (CXXConstructExpr, class MPI::Intracomm)
   4: return [B1.3];
   5: [B3.2].~Intracomm() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1]) (ImplicitCastExpr, UncheckedDerivedToBase, const class MPI::Comm *)
   3: [B2.2]->Call_errhandler
   4: err
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B2.3]([B2.5])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Intracomm)
   2: MPI::Intracomm v4;
   3: MPI_Comm_split
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, int, int, MPI_Comm *))
   5: this
   6: [B3.5] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   7: [B3.6]->the_real_comm
   8: [B3.7] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   9: (MPI_Comm)[B3.8] (CStyleCastExpr, NoOp, MPI_Comm)
  10: v2
  11: [B3.10] (ImplicitCastExpr, LValueToRValue, int)
  12: v3
  13: [B3.12] (ImplicitCastExpr, LValueToRValue, int)
  14: v4
  15: [B3.14] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm)
  16: [B3.15].the_real_comm
  17: &([B3.16])
  18: [B3.4]([B3.9], [B3.11], [B3.13], [B3.17])
  19: int err = MPI_Comm_split((MPI_Comm)this->the_real_comm, v2, v3, &(v4.the_real_comm));
  20: err
  21: [B3.20] (ImplicitCastExpr, LValueToRValue, int)
  22: [B3.21] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.22]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual MPI::Intracomm Create(const MPI::Group &v2) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v3
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Intracomm)
   3: [B1.2] (CXXConstructExpr, class MPI::Intracomm)
   4: return [B1.3];
   5: [B3.2].~Intracomm() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1]) (ImplicitCastExpr, UncheckedDerivedToBase, const class MPI::Comm *)
   3: [B2.2]->Call_errhandler
   4: err
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B2.3]([B2.5])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Intracomm)
   2: MPI::Intracomm v3;
   3: MPI_Comm_create
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, MPI_Group, MPI_Comm *))
   5: this
   6: [B3.5] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   7: [B3.6]->the_real_comm
   8: [B3.7] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   9: (MPI_Comm)[B3.8] (CStyleCastExpr, NoOp, MPI_Comm)
  10: v2
  11: [B3.10].the_real_group
  12: ([B3.11]) (ImplicitCastExpr, LValueToRValue, MPI_Group)
  13: (MPI_Group)[B3.12] (CStyleCastExpr, NoOp, MPI_Group)
  14: v3
  15: [B3.14] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm)
  16: [B3.15].the_real_comm
  17: &([B3.16])
  18: [B3.4]([B3.9], [B3.13], [B3.17])
  19: int err = MPI_Comm_create((MPI_Comm)this->the_real_comm, (MPI_Group)(v2.the_real_group), &(v3.the_real_comm));
  20: err
  21: [B3.20] (ImplicitCastExpr, LValueToRValue, int)
  22: [B3.21] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.22]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

MPI::Intracomm Dup() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v2
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Intracomm)
   3: [B1.2] (CXXConstructExpr, class MPI::Intracomm)
   4: return [B1.3];
   5: [B3.2].~Intracomm() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1]) (ImplicitCastExpr, UncheckedDerivedToBase, const class MPI::Comm *)
   3: [B2.2]->Call_errhandler
   4: err
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B2.3]([B2.5])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Intracomm)
   2: MPI::Intracomm v2;
   3: MPI_Comm_dup
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, MPI_Comm *))
   5: this
   6: [B3.5] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   7: [B3.6]->the_real_comm
   8: [B3.7] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   9: (MPI_Comm)[B3.8] (CStyleCastExpr, NoOp, MPI_Comm)
  10: v2
  11: [B3.10] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm)
  12: [B3.11].the_real_comm
  13: &([B3.12])
  14: [B3.4]([B3.9], [B3.13])
  15: int err = MPI_Comm_dup((MPI_Comm)this->the_real_comm, &(v2.the_real_comm));
  16: err
  17: [B3.16] (ImplicitCastExpr, LValueToRValue, int)
  18: [B3.17] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.18]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual void Scan(const void *v1, void *v2, int v3, const MPI::Datatype &v4, const MPI::Op &v5) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, UncheckedDerivedToBase, const class MPI::Comm *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Scan
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const void *, void *, int, MPI_Datatype, MPI_Op, MPI_Comm))
   3: v1
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, const void *)
   5: (const void *)[B2.4] (CStyleCastExpr, NoOp, const void *)
   6: v2
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, void *)
   8: v3
   9: [B2.8] (ImplicitCastExpr, LValueToRValue, int)
  10: v4
  11: [B2.10].the_real_datatype
  12: ([B2.11]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  13: (MPI_Datatype)[B2.12] (CStyleCastExpr, NoOp, MPI_Datatype)
  14: v5
  15: [B2.14].the_real_op
  16: ([B2.15]) (ImplicitCastExpr, LValueToRValue, MPI_Op)
  17: (MPI_Op)[B2.16] (CStyleCastExpr, NoOp, MPI_Op)
  18: this
  19: [B2.18] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
  20: [B2.19]->the_real_comm
  21: [B2.20] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  22: (MPI_Comm)[B2.21] (CStyleCastExpr, NoOp, MPI_Comm)
  23: [B2.2]([B2.5], [B2.7], [B2.9], [B2.13], [B2.17], [B2.22])
  24: int err = MPI_Scan((const void *)v1, v2, v3, (MPI_Datatype)(v4.the_real_datatype), (MPI_Op)(v5.the_real_op), (MPI_Comm)this->the_real_comm);
  25: err
  26: [B2.25] (ImplicitCastExpr, LValueToRValue, int)
  27: [B2.26] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.27]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Exscan(const void *v1, void *v2, int v3, const MPI::Datatype &v4, const MPI::Op &v5) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, UncheckedDerivedToBase, const class MPI::Comm *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Exscan
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const void *, void *, int, MPI_Datatype, MPI_Op, MPI_Comm))
   3: v1
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, const void *)
   5: (const void *)[B2.4] (CStyleCastExpr, NoOp, const void *)
   6: v2
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, void *)
   8: v3
   9: [B2.8] (ImplicitCastExpr, LValueToRValue, int)
  10: v4
  11: [B2.10].the_real_datatype
  12: ([B2.11]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  13: (MPI_Datatype)[B2.12] (CStyleCastExpr, NoOp, MPI_Datatype)
  14: v5
  15: [B2.14].the_real_op
  16: ([B2.15]) (ImplicitCastExpr, LValueToRValue, MPI_Op)
  17: (MPI_Op)[B2.16] (CStyleCastExpr, NoOp, MPI_Op)
  18: this
  19: [B2.18] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
  20: [B2.19]->the_real_comm
  21: [B2.20] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  22: (MPI_Comm)[B2.21] (CStyleCastExpr, NoOp, MPI_Comm)
  23: [B2.2]([B2.5], [B2.7], [B2.9], [B2.13], [B2.17], [B2.22])
  24: int err = MPI_Exscan((const void *)v1, v2, v3, (MPI_Datatype)(v4.the_real_datatype), (MPI_Op)(v5.the_real_op), (MPI_Comm)this->the_real_comm);
  25: err
  26: [B2.25] (ImplicitCastExpr, LValueToRValue, int)
  27: [B2.26] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.27]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual MPI::Intercomm Accept(const char *v1, const MPI::Info &v2, int v3) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v5
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Intercomm)
   3: [B1.2] (CXXConstructExpr, class MPI::Intercomm)
   4: return [B1.3];
   5: [B3.2].~Intercomm() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1]) (ImplicitCastExpr, UncheckedDerivedToBase, const class MPI::Comm *)
   3: [B2.2]->Call_errhandler
   4: err
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B2.3]([B2.5])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Intercomm)
   2: MPI::Intercomm v5;
   3: MPI_Comm_accept
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const char *, MPI_Info, int, MPI_Comm, MPI_Comm *))
   5: v1
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, const char *)
   7: (const char *)[B3.6] (CStyleCastExpr, NoOp, const char *)
   8: v2
   9: [B3.8].the_real_info
  10: ([B3.9]) (ImplicitCastExpr, LValueToRValue, MPI_Info)
  11: (MPI_Info)[B3.10] (CStyleCastExpr, NoOp, MPI_Info)
  12: v3
  13: [B3.12] (ImplicitCastExpr, LValueToRValue, int)
  14: this
  15: [B3.14] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
  16: [B3.15]->the_real_comm
  17: [B3.16] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  18: (MPI_Comm)[B3.17] (CStyleCastExpr, NoOp, MPI_Comm)
  19: v5
  20: [B3.19] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm)
  21: [B3.20].the_real_comm
  22: &([B3.21])
  23: [B3.4]([B3.7], [B3.11], [B3.13], [B3.18], [B3.22])
  24: int err = MPI_Comm_accept((const char *)v1, (MPI_Info)(v2.the_real_info), v3, (MPI_Comm)this->the_real_comm, &(v5.the_real_comm));
  25: err
  26: [B3.25] (ImplicitCastExpr, LValueToRValue, int)
  27: [B3.26] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.27]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual MPI::Intercomm Connect(const char *v1, const MPI::Info &v2, int v3) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v5
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Intercomm)
   3: [B1.2] (CXXConstructExpr, class MPI::Intercomm)
   4: return [B1.3];
   5: [B3.2].~Intercomm() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1]) (ImplicitCastExpr, UncheckedDerivedToBase, const class MPI::Comm *)
   3: [B2.2]->Call_errhandler
   4: err
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B2.3]([B2.5])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Intercomm)
   2: MPI::Intercomm v5;
   3: MPI_Comm_connect
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const char *, MPI_Info, int, MPI_Comm, MPI_Comm *))
   5: v1
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, const char *)
   7: (const char *)[B3.6] (CStyleCastExpr, NoOp, const char *)
   8: v2
   9: [B3.8].the_real_info
  10: ([B3.9]) (ImplicitCastExpr, LValueToRValue, MPI_Info)
  11: (MPI_Info)[B3.10] (CStyleCastExpr, NoOp, MPI_Info)
  12: v3
  13: [B3.12] (ImplicitCastExpr, LValueToRValue, int)
  14: this
  15: [B3.14] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
  16: [B3.15]->the_real_comm
  17: [B3.16] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  18: (MPI_Comm)[B3.17] (CStyleCastExpr, NoOp, MPI_Comm)
  19: v5
  20: [B3.19] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm)
  21: [B3.20].the_real_comm
  22: &([B3.21])
  23: [B3.4]([B3.7], [B3.11], [B3.13], [B3.18], [B3.22])
  24: int err = MPI_Comm_connect((const char *)v1, (MPI_Info)(v2.the_real_info), v3, (MPI_Comm)this->the_real_comm, &(v5.the_real_comm));
  25: err
  26: [B3.25] (ImplicitCastExpr, LValueToRValue, int)
  27: [B3.26] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.27]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual MPI::Intracomm &Clone() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: MPI_Comm ncomm;
   2: MPI_Comm_dup
   3: [B1.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, MPI_Comm *))
   4: this
   5: [B1.4] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   6: [B1.5]->the_real_comm
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   8: (MPI_Comm)[B1.7] (CStyleCastExpr, NoOp, MPI_Comm)
   9: ncomm
  10: &[B1.9]
  11: [B1.3]([B1.8], [B1.10])
  12: CFGNewAllocator(MPI::Intracomm *)
  13: ncomm
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  15: [B1.14] (CXXConstructExpr, class MPI::Intracomm)
  16: new MPI::Intracomm([B1.15])
  17: MPI::Intracomm *clone = new MPI::Intracomm(ncomm);
  18: clone
  19: [B1.18] (ImplicitCastExpr, LValueToRValue, class MPI::Intracomm *)
  20: *[B1.19]
  21: return [B1.20];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

MPI::Intercomm Spawn(const char *command, const char *argv[], int maxprocs, const MPI::Info &info, int root) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: ic
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Intercomm)
   3: [B1.2] (CXXConstructExpr, class MPI::Intercomm)
   4: return [B1.3];
   5: [B3.2].~Intercomm() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1]) (ImplicitCastExpr, UncheckedDerivedToBase, const class MPI::Comm *)
   3: [B2.2]->Call_errhandler
   4: err
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B2.3]([B2.5])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Intercomm)
   2: MPI::Intercomm ic;
   3: MPI_Comm_spawn
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const char *, char **, int, MPI_Info, int, MPI_Comm, MPI_Comm *, int *))
   5: command
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, const char *)
   7: (char *)[B3.6] (CStyleCastExpr, NoOp, char *)
   8: [B3.7] (ImplicitCastExpr, NoOp, const char *)
   9: argv
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, const char **)
  11: (char **)[B3.10] (CStyleCastExpr, NoOp, char **)
  12: maxprocs
  13: [B3.12] (ImplicitCastExpr, LValueToRValue, int)
  14: info
  15: [B3.14].the_real_info
  16: [B3.15] (ImplicitCastExpr, LValueToRValue, MPI_Info)
  17: root
  18: [B3.17] (ImplicitCastExpr, LValueToRValue, int)
  19: this
  20: [B3.19] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
  21: [B3.20]->the_real_comm
  22: [B3.21] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  23: ic
  24: [B3.23] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm)
  25: [B3.24].the_real_comm
  26: &([B3.25])
  27: 0
  28: [B3.27] (ImplicitCastExpr, NullToPointer, int *)
  29: (int *)[B3.28] (CStyleCastExpr, NoOp, int *)
  30: [B3.4]([B3.8], [B3.11], [B3.13], [B3.16], [B3.18], [B3.22], [B3.26], [B3.29])
  31: int err = MPI_Comm_spawn((char *)command, (char **)argv, maxprocs, info.the_real_info, root, this->the_real_comm, &(ic.the_real_comm), (int *)0);
  32: err
  33: [B3.32] (ImplicitCastExpr, LValueToRValue, int)
  34: [B3.33] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.34]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

MPI::Intercomm Spawn(const char *command, const char *argv[], int maxprocs, const MPI::Info &info, int root, int array_of_errcodes[]) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: ic
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Intercomm)
   3: [B1.2] (CXXConstructExpr, class MPI::Intercomm)
   4: return [B1.3];
   5: [B3.2].~Intercomm() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1]) (ImplicitCastExpr, UncheckedDerivedToBase, const class MPI::Comm *)
   3: [B2.2]->Call_errhandler
   4: err
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B2.3]([B2.5])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Intercomm)
   2: MPI::Intercomm ic;
   3: MPI_Comm_spawn
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const char *, char **, int, MPI_Info, int, MPI_Comm, MPI_Comm *, int *))
   5: command
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, const char *)
   7: (char *)[B3.6] (CStyleCastExpr, NoOp, char *)
   8: [B3.7] (ImplicitCastExpr, NoOp, const char *)
   9: argv
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, const char **)
  11: (char **)[B3.10] (CStyleCastExpr, NoOp, char **)
  12: maxprocs
  13: [B3.12] (ImplicitCastExpr, LValueToRValue, int)
  14: info
  15: [B3.14].the_real_info
  16: [B3.15] (ImplicitCastExpr, LValueToRValue, MPI_Info)
  17: root
  18: [B3.17] (ImplicitCastExpr, LValueToRValue, int)
  19: this
  20: [B3.19] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
  21: [B3.20]->the_real_comm
  22: [B3.21] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  23: ic
  24: [B3.23] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm)
  25: [B3.24].the_real_comm
  26: &([B3.25])
  27: array_of_errcodes
  28: [B3.27] (ImplicitCastExpr, LValueToRValue, int *)
  29: [B3.4]([B3.8], [B3.11], [B3.13], [B3.16], [B3.18], [B3.22], [B3.26], [B3.28])
  30: int err = MPI_Comm_spawn((char *)command, (char **)argv, maxprocs, info.the_real_info, root, this->the_real_comm, &(ic.the_real_comm), array_of_errcodes);
  31: err
  32: [B3.31] (ImplicitCastExpr, LValueToRValue, int)
  33: [B3.32] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.33]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

MPI::Intercomm Spawn_multiple(int count, const char *array_of_commands[], const char **array_of_argv[], const int array_of_maxprocs[], const MPI::Info array_of_info[], int root)
 [B8 (ENTRY)]
   Succs (1): B7

 [B1]
   1: li
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Info *)
   3: delete [] [B1.2]
   4: ic
   5: [B1.4] (ImplicitCastExpr, NoOp, const class MPI::Intercomm)
   6: [B1.5] (CXXConstructExpr, class MPI::Intercomm)
   7: return [B1.6];
   8: [B7.2].~Intercomm() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1]) (ImplicitCastExpr, UncheckedDerivedToBase, const class MPI::Comm *)
   3: [B2.2]->Call_errhandler
   4: err
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B2.3]([B2.5])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: MPI_Comm_spawn_multiple
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, char **, char ***, const int *, const MPI_Info *, int, MPI_Comm, MPI_Comm *, int *))
   3: count
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: array_of_commands
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, const char **)
   7: (char **)[B3.6] (CStyleCastExpr, NoOp, char **)
   8: array_of_argv
   9: [B3.8] (ImplicitCastExpr, LValueToRValue, const char ***)
  10: (char ***)[B3.9] (CStyleCastExpr, NoOp, char ***)
  11: array_of_maxprocs
  12: [B3.11] (ImplicitCastExpr, LValueToRValue, const int *)
  13: (int *)[B3.12] (CStyleCastExpr, NoOp, int *)
  14: [B3.13] (ImplicitCastExpr, NoOp, const int *)
  15: li
  16: [B3.15] (ImplicitCastExpr, LValueToRValue, MPI_Info *)
  17: [B3.16] (ImplicitCastExpr, NoOp, const MPI_Info *)
  18: root
  19: [B3.18] (ImplicitCastExpr, LValueToRValue, int)
  20: this
  21: [B3.20] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
  22: [B3.21]->the_real_comm
  23: [B3.22] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  24: ic
  25: [B3.24] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm)
  26: [B3.25].the_real_comm
  27: &([B3.26])
  28: 0
  29: [B3.28] (ImplicitCastExpr, NullToPointer, int *)
  30: (int *)[B3.29] (CStyleCastExpr, NoOp, int *)
  31: [B3.2]([B3.4], [B3.7], [B3.10], [B3.14], [B3.17], [B3.19], [B3.23], [B3.27], [B3.30])
  32: int err = MPI_Comm_spawn_multiple(count, (char **)array_of_commands, (char ***)array_of_argv, (int *)array_of_maxprocs, li, root, this->the_real_comm, &(ic.the_real_comm), (int *)0);
  33: err
  34: [B3.33] (ImplicitCastExpr, LValueToRValue, int)
  35: [B3.34] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.35]
   Preds (1): B6
   Succs (2): B2 B1

 [B4]
   1: i
   2: [B4.1]++
   Preds (1): B5
   Succs (1): B6

 [B5]
   1: array_of_info
   2: [B5.1] (ImplicitCastExpr, LValueToRValue, const MPI::Info *)
   3: i
   4: [B5.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B5.2][[B5.4]]
   6: [B5.5].the_real_info
   7: [B5.6] (ImplicitCastExpr, LValueToRValue, MPI_Info)
   8: li
   9: [B5.8] (ImplicitCastExpr, LValueToRValue, MPI_Info *)
  10: i
  11: [B5.10] (ImplicitCastExpr, LValueToRValue, int)
  12: [B5.9][[B5.11]]
  13: [B5.12] = [B5.7]
   Preds (1): B6
   Succs (1): B4

 [B6]
   1: i
   2: [B6.1] (ImplicitCastExpr, LValueToRValue, int)
   3: count
   4: [B6.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B6.2] < [B6.4]
   T: for (...; [B6.5]; ...)
   Preds (2): B4 B7
   Succs (2): B5 B3

 [B7]
   1:  (CXXConstructExpr, class MPI::Intercomm)
   2: MPI::Intercomm ic;
   3: count
   4: [B7.3] (ImplicitCastExpr, LValueToRValue, int)
   5: CFGNewAllocator(MPI_Info *)
   6: new MPI_Info [[B7.4]]
   7: MPI_Info *li = new MPI_Info [count];
   8: int i;
   9: 0
  10: i
  11: [B7.10] = [B7.9]
   Preds (1): B8
   Succs (1): B6

 [B0 (EXIT)]
   Preds (1): B1

MPI::Intercomm Spawn_multiple(int count, const char *array_of_commands[], const char **array_of_argv[], const int array_of_maxprocs[], const MPI::Info array_of_info[], int root, int array_of_errcodes[])
 [B8 (ENTRY)]
   Succs (1): B7

 [B1]
   1: li
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Info *)
   3: delete [] [B1.2]
   4: ic
   5: [B1.4] (ImplicitCastExpr, NoOp, const class MPI::Intercomm)
   6: [B1.5] (CXXConstructExpr, class MPI::Intercomm)
   7: return [B1.6];
   8: [B7.2].~Intercomm() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1]) (ImplicitCastExpr, UncheckedDerivedToBase, const class MPI::Comm *)
   3: [B2.2]->Call_errhandler
   4: err
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B2.3]([B2.5])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: MPI_Comm_spawn_multiple
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, char **, char ***, const int *, const MPI_Info *, int, MPI_Comm, MPI_Comm *, int *))
   3: count
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: array_of_commands
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, const char **)
   7: (char **)[B3.6] (CStyleCastExpr, NoOp, char **)
   8: array_of_argv
   9: [B3.8] (ImplicitCastExpr, LValueToRValue, const char ***)
  10: (char ***)[B3.9] (CStyleCastExpr, NoOp, char ***)
  11: array_of_maxprocs
  12: [B3.11] (ImplicitCastExpr, LValueToRValue, const int *)
  13: (int *)[B3.12] (CStyleCastExpr, NoOp, int *)
  14: [B3.13] (ImplicitCastExpr, NoOp, const int *)
  15: li
  16: [B3.15] (ImplicitCastExpr, LValueToRValue, MPI_Info *)
  17: [B3.16] (ImplicitCastExpr, NoOp, const MPI_Info *)
  18: root
  19: [B3.18] (ImplicitCastExpr, LValueToRValue, int)
  20: this
  21: [B3.20] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
  22: [B3.21]->the_real_comm
  23: [B3.22] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  24: ic
  25: [B3.24] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm)
  26: [B3.25].the_real_comm
  27: &([B3.26])
  28: array_of_errcodes
  29: [B3.28] (ImplicitCastExpr, LValueToRValue, int *)
  30: [B3.2]([B3.4], [B3.7], [B3.10], [B3.14], [B3.17], [B3.19], [B3.23], [B3.27], [B3.29])
  31: int err = MPI_Comm_spawn_multiple(count, (char **)array_of_commands, (char ***)array_of_argv, (int *)array_of_maxprocs, li, root, this->the_real_comm, &(ic.the_real_comm), array_of_errcodes);
  32: err
  33: [B3.32] (ImplicitCastExpr, LValueToRValue, int)
  34: [B3.33] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.34]
   Preds (1): B6
   Succs (2): B2 B1

 [B4]
   1: i
   2: [B4.1]++
   Preds (1): B5
   Succs (1): B6

 [B5]
   1: array_of_info
   2: [B5.1] (ImplicitCastExpr, LValueToRValue, const MPI::Info *)
   3: i
   4: [B5.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B5.2][[B5.4]]
   6: [B5.5].the_real_info
   7: [B5.6] (ImplicitCastExpr, LValueToRValue, MPI_Info)
   8: li
   9: [B5.8] (ImplicitCastExpr, LValueToRValue, MPI_Info *)
  10: i
  11: [B5.10] (ImplicitCastExpr, LValueToRValue, int)
  12: [B5.9][[B5.11]]
  13: [B5.12] = [B5.7]
   Preds (1): B6
   Succs (1): B4

 [B6]
   1: i
   2: [B6.1] (ImplicitCastExpr, LValueToRValue, int)
   3: count
   4: [B6.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B6.2] < [B6.4]
   T: for (...; [B6.5]; ...)
   Preds (2): B4 B7
   Succs (2): B5 B3

 [B7]
   1:  (CXXConstructExpr, class MPI::Intercomm)
   2: MPI::Intercomm ic;
   3: count
   4: [B7.3] (ImplicitCastExpr, LValueToRValue, int)
   5: CFGNewAllocator(MPI_Info *)
   6: new MPI_Info [[B7.4]]
   7: MPI_Info *li = new MPI_Info [count];
   8: int i;
   9: 0
  10: i
  11: [B7.10] = [B7.9]
   Preds (1): B8
   Succs (1): B6

 [B0 (EXIT)]
   Preds (1): B1

inline Grequest(MPI_Request obj) : MPI::Request(obj) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   3: [B1.2] (CXXConstructExpr, class MPI::Request)
   4: Request([B1.3]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline Grequest() : MPI::Request() {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, class MPI::Request)
   2: Request([B1.1]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~MPI::Grequest() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ~Request() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

Grequest(const MPI::Grequest &obj) : MPI::Request(obj) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, DerivedToBase, const class MPI::Request)
   3: [B1.2] (CXXConstructExpr, class MPI::Request)
   4: Request([B1.3]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

MPI::Grequest &operator=(const MPI::Grequest &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Request)
   3: [B1.2].the_real_request
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   5: this
   6: [B1.5] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Request *)
   7: [B1.6]->the_real_request
   8: [B1.7] = [B1.4]
   9: this
  10: *[B1.9]
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator==(const MPI::Grequest &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Request *)
   3: [B1.2]->the_real_request
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   5: obj
   6: [B1.5] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Request)
   7: [B1.6].the_real_request
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   9: [B1.4] == [B1.8]
  10: return ([B1.9]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator!=(const MPI::Grequest &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Request *)
   3: [B1.2]->the_real_request
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   5: obj
   6: [B1.5] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Request)
   7: [B1.6].the_real_request
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   9: [B1.4] != [B1.8]
  10: return ([B1.9]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline operator MPI_Request *()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Request *)
   3: [B1.2]->the_real_request
   4: &[B1.3]
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline operator MPI_Request() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Request *)
   3: [B1.2]->the_real_request
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

MPI::Grequest &operator=(const MPI_Request &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   3: this
   4: [B1.3] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Request *)
   5: [B1.4]->the_real_request
   6: [B1.5] = [B1.2]
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual void Complete()
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: MPIR_Call_world_errhand
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Grequest_complete
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Request))
   3: this
   4: [B2.3] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Request *)
   5: [B2.4]->the_real_request
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, MPI_Request)
   7: (MPI_Request)[B2.6] (CStyleCastExpr, NoOp, MPI_Request)
   8: [B2.2]([B2.7])
   9: int err = MPI_Grequest_complete((MPI_Request)this->the_real_request);
  10: err
  11: [B2.10] (ImplicitCastExpr, LValueToRValue, int)
  12: [B2.11] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.12]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

inline Win(MPI_Win obj) : the_real_win(obj) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Win)
   3: the_real_win([B1.2]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline Win() : the_real_win((MPI_Win)536870912) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 536870912
   2: (MPI_Win)[B1.1] (CStyleCastExpr, NoOp, MPI_Win)
   3: the_real_win(([B1.2])) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~MPI::Win() noexcept
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

Win(const MPI::Win &obj) : the_real_win(obj.the_real_win) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1].the_real_win
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_Win)
   4: the_real_win([B1.3]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

MPI::Win &operator=(const MPI::Win &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1].the_real_win
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_Win)
   4: this
   5: [B1.4]->the_real_win
   6: [B1.5] = [B1.3]
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator==(const MPI::Win &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_win
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_Win)
   4: obj
   5: [B1.4].the_real_win
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, MPI_Win)
   7: [B1.3] == [B1.6]
   8: return ([B1.7]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator!=(const MPI::Win &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_win
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_Win)
   4: obj
   5: [B1.4].the_real_win
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, MPI_Win)
   7: [B1.3] != [B1.6]
   8: return ([B1.7]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline operator MPI_Win *()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_win
   3: &[B1.2]
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline operator MPI_Win() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_win
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_Win)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

MPI::Win &operator=(const MPI_Win &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Win)
   3: this
   4: [B1.3]->the_real_win
   5: [B1.4] = [B1.2]
   6: this
   7: *[B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual MPI::Group Get_group() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v2
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Group)
   3: [B1.2] (CXXConstructExpr, class MPI::Group)
   4: return [B1.3];
   5: [B3.2].~Group() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1])->Call_errhandler
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Group)
   2: MPI::Group v2;
   3: MPI_Win_get_group
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Win, MPI_Group *))
   5: this
   6: [B3.5]->the_real_win
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, MPI_Win)
   8: (MPI_Win)[B3.7] (CStyleCastExpr, NoOp, MPI_Win)
   9: v2
  10: [B3.9].the_real_group
  11: &([B3.10])
  12: [B3.4]([B3.8], [B3.11])
  13: int err = MPI_Win_get_group((MPI_Win)this->the_real_win, &(v2.the_real_group));
  14: err
  15: [B3.14] (ImplicitCastExpr, LValueToRValue, int)
  16: [B3.15] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.16]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual void Fence(int v1) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1])->Call_errhandler
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Win_fence
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, MPI_Win))
   3: v1
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: this
   6: [B2.5]->the_real_win
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, MPI_Win)
   8: (MPI_Win)[B2.7] (CStyleCastExpr, NoOp, MPI_Win)
   9: [B2.2]([B2.4], [B2.8])
  10: int err = MPI_Win_fence(v1, (MPI_Win)this->the_real_win);
  11: err
  12: [B2.11] (ImplicitCastExpr, LValueToRValue, int)
  13: [B2.12] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.13]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Start(const MPI::Group &v1, int v2) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1])->Call_errhandler
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Win_start
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Group, int, MPI_Win))
   3: v1
   4: [B2.3].the_real_group
   5: ([B2.4]) (ImplicitCastExpr, LValueToRValue, MPI_Group)
   6: (MPI_Group)[B2.5] (CStyleCastExpr, NoOp, MPI_Group)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, int)
   9: this
  10: [B2.9]->the_real_win
  11: [B2.10] (ImplicitCastExpr, LValueToRValue, MPI_Win)
  12: (MPI_Win)[B2.11] (CStyleCastExpr, NoOp, MPI_Win)
  13: [B2.2]([B2.6], [B2.8], [B2.12])
  14: int err = MPI_Win_start((MPI_Group)(v1.the_real_group), v2, (MPI_Win)this->the_real_win);
  15: err
  16: [B2.15] (ImplicitCastExpr, LValueToRValue, int)
  17: [B2.16] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.17]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Free()
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::Win *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Win_free
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Win *))
   3: this
   4: [B2.3]->the_real_win
   5: &[B2.4]
   6: (MPI_Win *)[B2.5] (CStyleCastExpr, NoOp, MPI_Win *)
   7: [B2.2]([B2.6])
   8: int err = MPI_Win_free((MPI_Win *)&this->the_real_win);
   9: err
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B2.10] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.11]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Put(const void *v1, int v2, const MPI::Datatype &v3, int v4, Aint v5, int v6, const MPI::Datatype &v7) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1])->Call_errhandler
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Put
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const void *, int, MPI_Datatype, int, MPI_Aint, int, MPI_Datatype, MPI_Win))
   3: v1
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, const void *)
   5: (const void *)[B2.4] (CStyleCastExpr, NoOp, const void *)
   6: v2
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, int)
   8: v3
   9: [B2.8].the_real_datatype
  10: ([B2.9]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  11: (MPI_Datatype)[B2.10] (CStyleCastExpr, NoOp, MPI_Datatype)
  12: v4
  13: [B2.12] (ImplicitCastExpr, LValueToRValue, int)
  14: v5
  15: [B2.14] (ImplicitCastExpr, LValueToRValue, Aint)
  16: v6
  17: [B2.16] (ImplicitCastExpr, LValueToRValue, int)
  18: v7
  19: [B2.18].the_real_datatype
  20: ([B2.19]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  21: (MPI_Datatype)[B2.20] (CStyleCastExpr, NoOp, MPI_Datatype)
  22: this
  23: [B2.22]->the_real_win
  24: [B2.23] (ImplicitCastExpr, LValueToRValue, MPI_Win)
  25: (MPI_Win)[B2.24] (CStyleCastExpr, NoOp, MPI_Win)
  26: [B2.2]([B2.5], [B2.7], [B2.11], [B2.13], [B2.15], [B2.17], [B2.21], [B2.25])
  27: int err = MPI_Put((const void *)v1, v2, (MPI_Datatype)(v3.the_real_datatype), v4, v5, v6, (MPI_Datatype)(v7.the_real_datatype), (MPI_Win)this->the_real_win);
  28: err
  29: [B2.28] (ImplicitCastExpr, LValueToRValue, int)
  30: [B2.29] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.30]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Wait() const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1])->Call_errhandler
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Win_wait
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Win))
   3: this
   4: [B2.3]->the_real_win
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_Win)
   6: (MPI_Win)[B2.5] (CStyleCastExpr, NoOp, MPI_Win)
   7: [B2.2]([B2.6])
   8: int err = MPI_Win_wait((MPI_Win)this->the_real_win);
   9: err
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B2.10] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.11]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual bool Test() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v2
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 0
   4: [B1.2] != [B1.3]
   5: return [B1.4];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1])->Call_errhandler
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: int v2;
   2: MPI_Win_test
   3: [B3.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Win, int *))
   4: this
   5: [B3.4]->the_real_win
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, MPI_Win)
   7: (MPI_Win)[B3.6] (CStyleCastExpr, NoOp, MPI_Win)
   8: v2
   9: &[B3.8]
  10: [B3.3]([B3.7], [B3.9])
  11: int err = MPI_Win_test((MPI_Win)this->the_real_win, &v2);
  12: err
  13: [B3.12] (ImplicitCastExpr, LValueToRValue, int)
  14: [B3.13] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.14]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual void Get(void *v1, int v2, const MPI::Datatype &v3, int v4, Aint v5, int v6, const MPI::Datatype &v7) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1])->Call_errhandler
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Get
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(void *, int, MPI_Datatype, int, MPI_Aint, int, MPI_Datatype, MPI_Win))
   3: v1
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, void *)
   5: v2
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, int)
   7: v3
   8: [B2.7].the_real_datatype
   9: ([B2.8]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  10: (MPI_Datatype)[B2.9] (CStyleCastExpr, NoOp, MPI_Datatype)
  11: v4
  12: [B2.11] (ImplicitCastExpr, LValueToRValue, int)
  13: v5
  14: [B2.13] (ImplicitCastExpr, LValueToRValue, Aint)
  15: v6
  16: [B2.15] (ImplicitCastExpr, LValueToRValue, int)
  17: v7
  18: [B2.17].the_real_datatype
  19: ([B2.18]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  20: (MPI_Datatype)[B2.19] (CStyleCastExpr, NoOp, MPI_Datatype)
  21: this
  22: [B2.21]->the_real_win
  23: [B2.22] (ImplicitCastExpr, LValueToRValue, MPI_Win)
  24: (MPI_Win)[B2.23] (CStyleCastExpr, NoOp, MPI_Win)
  25: [B2.2]([B2.4], [B2.6], [B2.10], [B2.12], [B2.14], [B2.16], [B2.20], [B2.24])
  26: int err = MPI_Get(v1, v2, (MPI_Datatype)(v3.the_real_datatype), v4, v5, v6, (MPI_Datatype)(v7.the_real_datatype), (MPI_Win)this->the_real_win);
  27: err
  28: [B2.27] (ImplicitCastExpr, LValueToRValue, int)
  29: [B2.28] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.29]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual bool Get_attr(int v2, void *v3) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v4
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 0
   4: [B1.2] != [B1.3]
   5: return [B1.4];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1])->Call_errhandler
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: int v4;
   2: MPI_Win_get_attr
   3: [B3.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Win, int, void *, int *))
   4: this
   5: [B3.4]->the_real_win
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, MPI_Win)
   7: (MPI_Win)[B3.6] (CStyleCastExpr, NoOp, MPI_Win)
   8: v2
   9: [B3.8] (ImplicitCastExpr, LValueToRValue, int)
  10: v3
  11: [B3.10] (ImplicitCastExpr, LValueToRValue, void *)
  12: v4
  13: &[B3.12]
  14: [B3.3]([B3.7], [B3.9], [B3.11], [B3.13])
  15: int err = MPI_Win_get_attr((MPI_Win)this->the_real_win, v2, v3, &v4);
  16: err
  17: [B3.16] (ImplicitCastExpr, LValueToRValue, int)
  18: [B3.17] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.18]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual void Set_attr(int v2, const void *v3)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::Win *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Win_set_attr
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Win, int, void *))
   3: this
   4: [B2.3]->the_real_win
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_Win)
   6: (MPI_Win)[B2.5] (CStyleCastExpr, NoOp, MPI_Win)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, int)
   9: v3
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, const void *)
  11: (void *)[B2.10] (CStyleCastExpr, NoOp, void *)
  12: [B2.2]([B2.6], [B2.8], [B2.11])
  13: int err = MPI_Win_set_attr((MPI_Win)this->the_real_win, v2, (void *)v3);
  14: err
  15: [B2.14] (ImplicitCastExpr, LValueToRValue, int)
  16: [B2.15] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.16]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Complete() const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1])->Call_errhandler
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Win_complete
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Win))
   3: this
   4: [B2.3]->the_real_win
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_Win)
   6: (MPI_Win)[B2.5] (CStyleCastExpr, NoOp, MPI_Win)
   7: [B2.2]([B2.6])
   8: int err = MPI_Win_complete((MPI_Win)this->the_real_win);
   9: err
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B2.10] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.11]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Set_errhandler(const MPI::Errhandler &v2)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::Win *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Win_set_errhandler
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Win, MPI_Errhandler))
   3: this
   4: [B2.3]->the_real_win
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_Win)
   6: (MPI_Win)[B2.5] (CStyleCastExpr, NoOp, MPI_Win)
   7: v2
   8: [B2.7].the_real_errhandler
   9: ([B2.8]) (ImplicitCastExpr, LValueToRValue, MPI_Errhandler)
  10: (MPI_Errhandler)[B2.9] (CStyleCastExpr, NoOp, MPI_Errhandler)
  11: [B2.2]([B2.6], [B2.10])
  12: int err = MPI_Win_set_errhandler((MPI_Win)this->the_real_win, (MPI_Errhandler)(v2.the_real_errhandler));
  13: err
  14: [B2.13] (ImplicitCastExpr, LValueToRValue, int)
  15: [B2.14] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.15]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Set_name(const char *v2)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::Win *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Win_set_name
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Win, const char *))
   3: this
   4: [B2.3]->the_real_win
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_Win)
   6: (MPI_Win)[B2.5] (CStyleCastExpr, NoOp, MPI_Win)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, const char *)
   9: (const char *)[B2.8] (CStyleCastExpr, NoOp, const char *)
  10: [B2.2]([B2.6], [B2.9])
  11: int err = MPI_Win_set_name((MPI_Win)this->the_real_win, (const char *)v2);
  12: err
  13: [B2.12] (ImplicitCastExpr, LValueToRValue, int)
  14: [B2.13] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.14]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Accumulate(const void *v1, int v2, const MPI::Datatype &v3, int v4, Aint v5, int v6, const MPI::Datatype &v7, const MPI::Op &v8) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1])->Call_errhandler
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Accumulate
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const void *, int, MPI_Datatype, int, MPI_Aint, int, MPI_Datatype, MPI_Op, MPI_Win))
   3: v1
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, const void *)
   5: (const void *)[B2.4] (CStyleCastExpr, NoOp, const void *)
   6: v2
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, int)
   8: v3
   9: [B2.8].the_real_datatype
  10: ([B2.9]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  11: (MPI_Datatype)[B2.10] (CStyleCastExpr, NoOp, MPI_Datatype)
  12: v4
  13: [B2.12] (ImplicitCastExpr, LValueToRValue, int)
  14: v5
  15: [B2.14] (ImplicitCastExpr, LValueToRValue, Aint)
  16: v6
  17: [B2.16] (ImplicitCastExpr, LValueToRValue, int)
  18: v7
  19: [B2.18].the_real_datatype
  20: ([B2.19]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  21: (MPI_Datatype)[B2.20] (CStyleCastExpr, NoOp, MPI_Datatype)
  22: v8
  23: [B2.22].the_real_op
  24: ([B2.23]) (ImplicitCastExpr, LValueToRValue, MPI_Op)
  25: (MPI_Op)[B2.24] (CStyleCastExpr, NoOp, MPI_Op)
  26: this
  27: [B2.26]->the_real_win
  28: [B2.27] (ImplicitCastExpr, LValueToRValue, MPI_Win)
  29: (MPI_Win)[B2.28] (CStyleCastExpr, NoOp, MPI_Win)
  30: [B2.2]([B2.5], [B2.7], [B2.11], [B2.13], [B2.15], [B2.17], [B2.21], [B2.25], [B2.29])
  31: int err = MPI_Accumulate((const void *)v1, v2, (MPI_Datatype)(v3.the_real_datatype), v4, v5, v6, (MPI_Datatype)(v7.the_real_datatype), (MPI_Op)(v8.the_real_op), (MPI_Win)this->the_real_win);
  32: err
  33: [B2.32] (ImplicitCastExpr, LValueToRValue, int)
  34: [B2.33] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.34]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

static MPI::Win Create(const void *v1, Aint v2, int v3, const MPI::Info &v4, const MPI::Intracomm &v5)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v6
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Win)
   3: [B1.2] (CXXConstructExpr, class MPI::Win)
   4: return [B1.3];
   5: [B3.2].~Win() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: v5
   2: ([B2.1]) (ImplicitCastExpr, UncheckedDerivedToBase, const class MPI::Comm)
   3: [B2.2].Call_errhandler
   4: err
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B2.3]([B2.5])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Win)
   2: MPI::Win v6;
   3: MPI_Win_create
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(void *, MPI_Aint, int, MPI_Info, MPI_Comm, MPI_Win *))
   5: v1
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, const void *)
   7: (void *)[B3.6] (CStyleCastExpr, NoOp, void *)
   8: v2
   9: [B3.8] (ImplicitCastExpr, LValueToRValue, Aint)
  10: v3
  11: [B3.10] (ImplicitCastExpr, LValueToRValue, int)
  12: v4
  13: [B3.12].the_real_info
  14: ([B3.13]) (ImplicitCastExpr, LValueToRValue, MPI_Info)
  15: (MPI_Info)[B3.14] (CStyleCastExpr, NoOp, MPI_Info)
  16: v5
  17: [B3.16] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm)
  18: [B3.17].the_real_comm
  19: ([B3.18]) (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  20: (MPI_Comm)[B3.19] (CStyleCastExpr, NoOp, MPI_Comm)
  21: v6
  22: [B3.21].the_real_win
  23: &([B3.22])
  24: [B3.4]([B3.7], [B3.9], [B3.11], [B3.15], [B3.20], [B3.23])
  25: int err = MPI_Win_create((void *)v1, v2, v3, (MPI_Info)(v4.the_real_info), (MPI_Comm)(v5.the_real_comm), &(v6.the_real_win));
  26: err
  27: [B3.26] (ImplicitCastExpr, LValueToRValue, int)
  28: [B3.27] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.28]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

static void Free_keyval(int &v1)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: MPIR_Call_world_errhand
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(int))
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Win_free_keyval
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int *))
   3: v1
   4: &[B2.3]
   5: [B2.2]([B2.4])
   6: int err = MPI_Win_free_keyval(&v1);
   7: err
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, int)
   9: [B2.8] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.9]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Post(const MPI::Group &v1, int v2) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1])->Call_errhandler
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Win_post
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Group, int, MPI_Win))
   3: v1
   4: [B2.3].the_real_group
   5: ([B2.4]) (ImplicitCastExpr, LValueToRValue, MPI_Group)
   6: (MPI_Group)[B2.5] (CStyleCastExpr, NoOp, MPI_Group)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, int)
   9: this
  10: [B2.9]->the_real_win
  11: [B2.10] (ImplicitCastExpr, LValueToRValue, MPI_Win)
  12: (MPI_Win)[B2.11] (CStyleCastExpr, NoOp, MPI_Win)
  13: [B2.2]([B2.6], [B2.8], [B2.12])
  14: int err = MPI_Win_post((MPI_Group)(v1.the_real_group), v2, (MPI_Win)this->the_real_win);
  15: err
  16: [B2.15] (ImplicitCastExpr, LValueToRValue, int)
  17: [B2.16] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.17]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Unlock(int v1) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1])->Call_errhandler
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Win_unlock
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, MPI_Win))
   3: v1
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: this
   6: [B2.5]->the_real_win
   7: [B2.6] (ImplicitCastExpr, LValueToRValue, MPI_Win)
   8: (MPI_Win)[B2.7] (CStyleCastExpr, NoOp, MPI_Win)
   9: [B2.2]([B2.4], [B2.8])
  10: int err = MPI_Win_unlock(v1, (MPI_Win)this->the_real_win);
  11: err
  12: [B2.11] (ImplicitCastExpr, LValueToRValue, int)
  13: [B2.12] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.13]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Delete_attr(int v2)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::Win *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Win_delete_attr
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Win, int))
   3: this
   4: [B2.3]->the_real_win
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_Win)
   6: (MPI_Win)[B2.5] (CStyleCastExpr, NoOp, MPI_Win)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, int)
   9: [B2.2]([B2.6], [B2.8])
  10: int err = MPI_Win_delete_attr((MPI_Win)this->the_real_win, v2);
  11: err
  12: [B2.11] (ImplicitCastExpr, LValueToRValue, int)
  13: [B2.12] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.13]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Lock(int v1, int v2, int v3) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1])->Call_errhandler
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Win_lock
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, int, int, MPI_Win))
   3: v1
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: v2
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, int)
   7: v3
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, int)
   9: this
  10: [B2.9]->the_real_win
  11: [B2.10] (ImplicitCastExpr, LValueToRValue, MPI_Win)
  12: (MPI_Win)[B2.11] (CStyleCastExpr, NoOp, MPI_Win)
  13: [B2.2]([B2.4], [B2.6], [B2.8], [B2.12])
  14: int err = MPI_Win_lock(v1, v2, v3, (MPI_Win)this->the_real_win);
  15: err
  16: [B2.15] (ImplicitCastExpr, LValueToRValue, int)
  17: [B2.16] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.17]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual MPI::Errhandler Get_errhandler() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v2
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Errhandler)
   3: [B1.2] (CXXConstructExpr, class MPI::Errhandler)
   4: return [B1.3];
   5: [B3.2].~Errhandler() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1])->Call_errhandler
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Errhandler)
   2: MPI::Errhandler v2;
   3: MPI_Win_get_errhandler
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Win, MPI_Errhandler *))
   5: this
   6: [B3.5]->the_real_win
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, MPI_Win)
   8: (MPI_Win)[B3.7] (CStyleCastExpr, NoOp, MPI_Win)
   9: v2
  10: [B3.9].the_real_errhandler
  11: &([B3.10])
  12: [B3.4]([B3.8], [B3.11])
  13: int err = MPI_Win_get_errhandler((MPI_Win)this->the_real_win, &(v2.the_real_errhandler));
  14: err
  15: [B3.14] (ImplicitCastExpr, LValueToRValue, int)
  16: [B3.15] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.16]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual void Get_name(char *v2, int &v3) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1])->Call_errhandler
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Win_get_name
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Win, char *, int *))
   3: this
   4: [B2.3]->the_real_win
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_Win)
   6: (MPI_Win)[B2.5] (CStyleCastExpr, NoOp, MPI_Win)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, char *)
   9: v3
  10: &[B2.9]
  11: [B2.2]([B2.6], [B2.8], [B2.10])
  12: int err = MPI_Win_get_name((MPI_Win)this->the_real_win, v2, &v3);
  13: err
  14: [B2.13] (ImplicitCastExpr, LValueToRValue, int)
  15: [B2.14] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.15]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

static int NULL_COPY_FN(const MPI::Win &oldwin, int keyval, void *ex, void *attr_in, void *attr_out, bool &flag)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 1
   2: [B1.1] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   3: flag
   4: [B1.3] = [B1.2]
   5: 0
   6: return [B1.5];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static int NULL_DELETE_FN(MPI::Win &win, int keyval, void *attr, void *ex)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 0
   2: return [B1.1];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

static int DUP_FN(const MPI::Win &oldwin, int keyval, void *ex, void *attr_in, void *attr_out, bool &flag)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 1
   2: [B1.1] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   3: flag
   4: [B1.3] = [B1.2]
   5: attr_in
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, void *)
   7: attr_out
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, void *)
   9: (void **)[B1.8] (CStyleCastExpr, BitCast, void **)
  10: *[B1.9]
  11: [B1.10] = [B1.6]
  12: 0
  13: return [B1.12];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline File(MPI_File obj) : the_real_file(obj) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_File)
   3: the_real_file([B1.2]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline File() : the_real_file((MPI_File)0) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 0
   2: [B1.1] (ImplicitCastExpr, NullToPointer, MPI_File)
   3: (MPI_File)[B1.2] (CStyleCastExpr, NoOp, MPI_File)
   4: the_real_file(([B1.3])) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~MPI::File() noexcept
 [B1 (ENTRY)]
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

File(const MPI::File &obj) : the_real_file(obj.the_real_file) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1].the_real_file
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_File)
   4: the_real_file([B1.3]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

MPI::File &operator=(const MPI::File &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1].the_real_file
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_File)
   4: this
   5: [B1.4]->the_real_file
   6: [B1.5] = [B1.3]
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator==(const MPI::File &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_file
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_File)
   4: obj
   5: [B1.4].the_real_file
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, MPI_File)
   7: [B1.3] == [B1.6]
   8: return ([B1.7]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

bool operator!=(const MPI::File &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_file
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_File)
   4: obj
   5: [B1.4].the_real_file
   6: [B1.5] (ImplicitCastExpr, LValueToRValue, MPI_File)
   7: [B1.3] != [B1.6]
   8: return ([B1.7]);
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline operator MPI_File *()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_file
   3: &[B1.2]
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline operator MPI_File() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->the_real_file
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, MPI_File)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

MPI::File &operator=(const MPI_File &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_File)
   3: this
   4: [B1.3]->the_real_file
   5: [B1.4] = [B1.2]
   6: this
   7: *[B1.6]
   8: return [B1.7];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual Aint Get_type_extent(const MPI::Datatype &v2) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v3
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Aint)
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1])->Call_errhandler
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: MPI_Aint v3;
   2: MPI_File_get_type_extent
   3: [B3.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, MPI_Datatype, MPI_Aint *))
   4: this
   5: [B3.4]->the_real_file
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, MPI_File)
   7: (MPI_File)[B3.6] (CStyleCastExpr, NoOp, MPI_File)
   8: v2
   9: [B3.8].the_real_datatype
  10: ([B3.9]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  11: (MPI_Datatype)[B3.10] (CStyleCastExpr, NoOp, MPI_Datatype)
  12: v3
  13: &[B3.12]
  14: [B3.3]([B3.7], [B3.11], [B3.13])
  15: int err = MPI_File_get_type_extent((MPI_File)this->the_real_file, (MPI_Datatype)(v2.the_real_datatype), &v3);
  16: err
  17: [B3.16] (ImplicitCastExpr, LValueToRValue, int)
  18: [B3.17] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.18]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual void Read_ordered_end(void *v2, MPI::Status &v3)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_read_ordered_end
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, void *, MPI_Status *))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, void *)
   9: v3
  10: [B2.9].the_real_status
  11: &([B2.10])
  12: (MPI_Status *)[B2.11] (CStyleCastExpr, NoOp, MPI_Status *)
  13: [B2.2]([B2.6], [B2.8], [B2.12])
  14: int err = MPI_File_read_ordered_end((MPI_File)this->the_real_file, v2, (MPI_Status *)&(v3.the_real_status));
  15: err
  16: [B2.15] (ImplicitCastExpr, LValueToRValue, int)
  17: [B2.16] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.17]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Read_ordered_end(void *v2)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_read_ordered_end
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, void *, MPI_Status *))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, void *)
   9: 1
  10: (MPI_Status *)[B2.9] (CStyleCastExpr, IntegralToPointer, MPI_Status *)
  11: [B2.2]([B2.6], [B2.8], [B2.10])
  12: int err = MPI_File_read_ordered_end((MPI_File)this->the_real_file, v2, (MPI_Status *)1);
  13: err
  14: [B2.13] (ImplicitCastExpr, LValueToRValue, int)
  15: [B2.14] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.15]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Seek_shared(Offset v2, int v3)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_seek_shared
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, MPI_Offset, int))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, Offset)
   9: v3
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B2.2]([B2.6], [B2.8], [B2.10])
  12: int err = MPI_File_seek_shared((MPI_File)this->the_real_file, v2, v3);
  13: err
  14: [B2.13] (ImplicitCastExpr, LValueToRValue, int)
  15: [B2.14] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.15]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Read_ordered(void *v2, int v3, const MPI::Datatype &v4, MPI::Status &v5)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_read_ordered
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, void *, int, MPI_Datatype, MPI_Status *))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, void *)
   9: v3
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, int)
  11: v4
  12: [B2.11].the_real_datatype
  13: ([B2.12]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  14: (MPI_Datatype)[B2.13] (CStyleCastExpr, NoOp, MPI_Datatype)
  15: v5
  16: [B2.15].the_real_status
  17: &([B2.16])
  18: (MPI_Status *)[B2.17] (CStyleCastExpr, NoOp, MPI_Status *)
  19: [B2.2]([B2.6], [B2.8], [B2.10], [B2.14], [B2.18])
  20: int err = MPI_File_read_ordered((MPI_File)this->the_real_file, v2, v3, (MPI_Datatype)(v4.the_real_datatype), (MPI_Status *)&(v5.the_real_status));
  21: err
  22: [B2.21] (ImplicitCastExpr, LValueToRValue, int)
  23: [B2.22] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.23]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Read_ordered(void *v2, int v3, const MPI::Datatype &v4)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_read_ordered
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, void *, int, MPI_Datatype, MPI_Status *))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, void *)
   9: v3
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, int)
  11: v4
  12: [B2.11].the_real_datatype
  13: ([B2.12]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  14: (MPI_Datatype)[B2.13] (CStyleCastExpr, NoOp, MPI_Datatype)
  15: 1
  16: (MPI_Status *)[B2.15] (CStyleCastExpr, IntegralToPointer, MPI_Status *)
  17: [B2.2]([B2.6], [B2.8], [B2.10], [B2.14], [B2.16])
  18: int err = MPI_File_read_ordered((MPI_File)this->the_real_file, v2, v3, (MPI_Datatype)(v4.the_real_datatype), (MPI_Status *)1);
  19: err
  20: [B2.19] (ImplicitCastExpr, LValueToRValue, int)
  21: [B2.20] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.21]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual MPI::Request Iread_shared(void *v2, int v3, const MPI::Datatype &v4)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v5
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Request)
   3: [B1.2] (CXXConstructExpr, class MPI::Request)
   4: return [B1.3];
   5: [B3.2].~Request() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B2.2]->Call_errhandler
   4: err
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B2.3]([B2.5])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Request)
   2: MPI::Request v5;
   3: MPI_File_iread_shared
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, void *, int, MPI_Datatype, MPI_Request *))
   5: this
   6: [B3.5]->the_real_file
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, MPI_File)
   8: (MPI_File)[B3.7] (CStyleCastExpr, NoOp, MPI_File)
   9: v2
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, void *)
  11: v3
  12: [B3.11] (ImplicitCastExpr, LValueToRValue, int)
  13: v4
  14: [B3.13].the_real_datatype
  15: ([B3.14]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  16: (MPI_Datatype)[B3.15] (CStyleCastExpr, NoOp, MPI_Datatype)
  17: v5
  18: [B3.17].the_real_request
  19: &([B3.18])
  20: (MPI_Request *)[B3.19] (CStyleCastExpr, NoOp, MPI_Request *)
  21: [B3.4]([B3.8], [B3.10], [B3.12], [B3.16], [B3.20])
  22: int err = MPI_File_iread_shared((MPI_File)this->the_real_file, v2, v3, (MPI_Datatype)(v4.the_real_datatype), (MPI_Request *)&(v5.the_real_request));
  23: err
  24: [B3.23] (ImplicitCastExpr, LValueToRValue, int)
  25: [B3.24] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.25]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual MPI::Info Get_info() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v2
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Info)
   3: [B1.2] (CXXConstructExpr, class MPI::Info)
   4: return [B1.3];
   5: [B3.2].~Info() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1])->Call_errhandler
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Info)
   2: MPI::Info v2;
   3: MPI_File_get_info
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, MPI_Info *))
   5: this
   6: [B3.5]->the_real_file
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, MPI_File)
   8: (MPI_File)[B3.7] (CStyleCastExpr, NoOp, MPI_File)
   9: v2
  10: [B3.9].the_real_info
  11: &([B3.10])
  12: [B3.4]([B3.8], [B3.11])
  13: int err = MPI_File_get_info((MPI_File)this->the_real_file, &(v2.the_real_info));
  14: err
  15: [B3.14] (ImplicitCastExpr, LValueToRValue, int)
  16: [B3.15] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.16]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual void Write_ordered_begin(const void *v2, int v3, const MPI::Datatype &v4)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_write_ordered_begin
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, const void *, int, MPI_Datatype))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, const void *)
   9: (const void *)[B2.8] (CStyleCastExpr, NoOp, const void *)
  10: v3
  11: [B2.10] (ImplicitCastExpr, LValueToRValue, int)
  12: v4
  13: [B2.12].the_real_datatype
  14: ([B2.13]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  15: (MPI_Datatype)[B2.14] (CStyleCastExpr, NoOp, MPI_Datatype)
  16: [B2.2]([B2.6], [B2.9], [B2.11], [B2.15])
  17: int err = MPI_File_write_ordered_begin((MPI_File)this->the_real_file, (const void *)v2, v3, (MPI_Datatype)(v4.the_real_datatype));
  18: err
  19: [B2.18] (ImplicitCastExpr, LValueToRValue, int)
  20: [B2.19] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.20]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Set_info(const MPI::Info &v2)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_set_info
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, MPI_Info))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7].the_real_info
   9: ([B2.8]) (ImplicitCastExpr, LValueToRValue, MPI_Info)
  10: (MPI_Info)[B2.9] (CStyleCastExpr, NoOp, MPI_Info)
  11: [B2.2]([B2.6], [B2.10])
  12: int err = MPI_File_set_info((MPI_File)this->the_real_file, (MPI_Info)(v2.the_real_info));
  13: err
  14: [B2.13] (ImplicitCastExpr, LValueToRValue, int)
  15: [B2.14] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.15]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Write_ordered(const void *v2, int v3, const MPI::Datatype &v4, MPI::Status &v5)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_write_ordered
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, const void *, int, MPI_Datatype, MPI_Status *))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, const void *)
   9: (const void *)[B2.8] (CStyleCastExpr, NoOp, const void *)
  10: v3
  11: [B2.10] (ImplicitCastExpr, LValueToRValue, int)
  12: v4
  13: [B2.12].the_real_datatype
  14: ([B2.13]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  15: (MPI_Datatype)[B2.14] (CStyleCastExpr, NoOp, MPI_Datatype)
  16: v5
  17: [B2.16].the_real_status
  18: &([B2.17])
  19: (MPI_Status *)[B2.18] (CStyleCastExpr, NoOp, MPI_Status *)
  20: [B2.2]([B2.6], [B2.9], [B2.11], [B2.15], [B2.19])
  21: int err = MPI_File_write_ordered((MPI_File)this->the_real_file, (const void *)v2, v3, (MPI_Datatype)(v4.the_real_datatype), (MPI_Status *)&(v5.the_real_status));
  22: err
  23: [B2.22] (ImplicitCastExpr, LValueToRValue, int)
  24: [B2.23] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.24]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Write_ordered(const void *v2, int v3, const MPI::Datatype &v4)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_write_ordered
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, const void *, int, MPI_Datatype, MPI_Status *))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, const void *)
   9: (const void *)[B2.8] (CStyleCastExpr, NoOp, const void *)
  10: v3
  11: [B2.10] (ImplicitCastExpr, LValueToRValue, int)
  12: v4
  13: [B2.12].the_real_datatype
  14: ([B2.13]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  15: (MPI_Datatype)[B2.14] (CStyleCastExpr, NoOp, MPI_Datatype)
  16: 1
  17: (MPI_Status *)[B2.16] (CStyleCastExpr, IntegralToPointer, MPI_Status *)
  18: [B2.2]([B2.6], [B2.9], [B2.11], [B2.15], [B2.17])
  19: int err = MPI_File_write_ordered((MPI_File)this->the_real_file, (const void *)v2, v3, (MPI_Datatype)(v4.the_real_datatype), (MPI_Status *)1);
  20: err
  21: [B2.20] (ImplicitCastExpr, LValueToRValue, int)
  22: [B2.21] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.22]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Sync()
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_sync
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: [B2.2]([B2.6])
   8: int err = MPI_File_sync((MPI_File)this->the_real_file);
   9: err
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B2.10] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.11]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Read(void *v2, int v3, const MPI::Datatype &v4, MPI::Status &v5)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_read
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, void *, int, MPI_Datatype, MPI_Status *))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, void *)
   9: v3
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, int)
  11: v4
  12: [B2.11].the_real_datatype
  13: ([B2.12]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  14: (MPI_Datatype)[B2.13] (CStyleCastExpr, NoOp, MPI_Datatype)
  15: v5
  16: [B2.15].the_real_status
  17: &([B2.16])
  18: (MPI_Status *)[B2.17] (CStyleCastExpr, NoOp, MPI_Status *)
  19: [B2.2]([B2.6], [B2.8], [B2.10], [B2.14], [B2.18])
  20: int err = MPI_File_read((MPI_File)this->the_real_file, v2, v3, (MPI_Datatype)(v4.the_real_datatype), (MPI_Status *)&(v5.the_real_status));
  21: err
  22: [B2.21] (ImplicitCastExpr, LValueToRValue, int)
  23: [B2.22] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.23]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Read(void *v2, int v3, const MPI::Datatype &v4)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_read
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, void *, int, MPI_Datatype, MPI_Status *))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, void *)
   9: v3
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, int)
  11: v4
  12: [B2.11].the_real_datatype
  13: ([B2.12]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  14: (MPI_Datatype)[B2.13] (CStyleCastExpr, NoOp, MPI_Datatype)
  15: 1
  16: (MPI_Status *)[B2.15] (CStyleCastExpr, IntegralToPointer, MPI_Status *)
  17: [B2.2]([B2.6], [B2.8], [B2.10], [B2.14], [B2.16])
  18: int err = MPI_File_read((MPI_File)this->the_real_file, v2, v3, (MPI_Datatype)(v4.the_real_datatype), (MPI_Status *)1);
  19: err
  20: [B2.19] (ImplicitCastExpr, LValueToRValue, int)
  21: [B2.20] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.21]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Write_all(const void *v2, int v3, const MPI::Datatype &v4, MPI::Status &v5)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_write_all
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, const void *, int, MPI_Datatype, MPI_Status *))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, const void *)
   9: (const void *)[B2.8] (CStyleCastExpr, NoOp, const void *)
  10: v3
  11: [B2.10] (ImplicitCastExpr, LValueToRValue, int)
  12: v4
  13: [B2.12].the_real_datatype
  14: ([B2.13]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  15: (MPI_Datatype)[B2.14] (CStyleCastExpr, NoOp, MPI_Datatype)
  16: v5
  17: [B2.16].the_real_status
  18: &([B2.17])
  19: (MPI_Status *)[B2.18] (CStyleCastExpr, NoOp, MPI_Status *)
  20: [B2.2]([B2.6], [B2.9], [B2.11], [B2.15], [B2.19])
  21: int err = MPI_File_write_all((MPI_File)this->the_real_file, (const void *)v2, v3, (MPI_Datatype)(v4.the_real_datatype), (MPI_Status *)&(v5.the_real_status));
  22: err
  23: [B2.22] (ImplicitCastExpr, LValueToRValue, int)
  24: [B2.23] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.24]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Write_all(const void *v2, int v3, const MPI::Datatype &v4)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_write_all
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, const void *, int, MPI_Datatype, MPI_Status *))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, const void *)
   9: (const void *)[B2.8] (CStyleCastExpr, NoOp, const void *)
  10: v3
  11: [B2.10] (ImplicitCastExpr, LValueToRValue, int)
  12: v4
  13: [B2.12].the_real_datatype
  14: ([B2.13]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  15: (MPI_Datatype)[B2.14] (CStyleCastExpr, NoOp, MPI_Datatype)
  16: 1
  17: (MPI_Status *)[B2.16] (CStyleCastExpr, IntegralToPointer, MPI_Status *)
  18: [B2.2]([B2.6], [B2.9], [B2.11], [B2.15], [B2.17])
  19: int err = MPI_File_write_all((MPI_File)this->the_real_file, (const void *)v2, v3, (MPI_Datatype)(v4.the_real_datatype), (MPI_Status *)1);
  20: err
  21: [B2.20] (ImplicitCastExpr, LValueToRValue, int)
  22: [B2.21] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.22]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual Offset Get_size() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v2
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Offset)
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1])->Call_errhandler
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: MPI_Offset v2;
   2: MPI_File_get_size
   3: [B3.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, MPI_Offset *))
   4: this
   5: [B3.4]->the_real_file
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, MPI_File)
   7: (MPI_File)[B3.6] (CStyleCastExpr, NoOp, MPI_File)
   8: v2
   9: &[B3.8]
  10: [B3.3]([B3.7], [B3.9])
  11: int err = MPI_File_get_size((MPI_File)this->the_real_file, &v2);
  12: err
  13: [B3.12] (ImplicitCastExpr, LValueToRValue, int)
  14: [B3.13] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.14]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual void Write_all_end(const void *v2, MPI::Status &v3)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_write_all_end
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, const void *, MPI_Status *))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, const void *)
   9: (const void *)[B2.8] (CStyleCastExpr, NoOp, const void *)
  10: v3
  11: [B2.10].the_real_status
  12: &([B2.11])
  13: (MPI_Status *)[B2.12] (CStyleCastExpr, NoOp, MPI_Status *)
  14: [B2.2]([B2.6], [B2.9], [B2.13])
  15: int err = MPI_File_write_all_end((MPI_File)this->the_real_file, (const void *)v2, (MPI_Status *)&(v3.the_real_status));
  16: err
  17: [B2.16] (ImplicitCastExpr, LValueToRValue, int)
  18: [B2.17] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.18]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Write_all_end(const void *v2)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_write_all_end
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, const void *, MPI_Status *))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, const void *)
   9: (const void *)[B2.8] (CStyleCastExpr, NoOp, const void *)
  10: 1
  11: (MPI_Status *)[B2.10] (CStyleCastExpr, IntegralToPointer, MPI_Status *)
  12: [B2.2]([B2.6], [B2.9], [B2.11])
  13: int err = MPI_File_write_all_end((MPI_File)this->the_real_file, (const void *)v2, (MPI_Status *)1);
  14: err
  15: [B2.14] (ImplicitCastExpr, LValueToRValue, int)
  16: [B2.15] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.16]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

static void Delete(const char *v1, const MPI::Info &v2)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: FILE_NULL
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File)
   3: [B1.2].Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_delete
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const char *, MPI_Info))
   3: v1
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, const char *)
   5: (const char *)[B2.4] (CStyleCastExpr, NoOp, const char *)
   6: v2
   7: [B2.6].the_real_info
   8: ([B2.7]) (ImplicitCastExpr, LValueToRValue, MPI_Info)
   9: (MPI_Info)[B2.8] (CStyleCastExpr, NoOp, MPI_Info)
  10: [B2.2]([B2.5], [B2.9])
  11: int err = MPI_File_delete((const char *)v1, (MPI_Info)(v2.the_real_info));
  12: err
  13: [B2.12] (ImplicitCastExpr, LValueToRValue, int)
  14: [B2.13] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.14]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Read_ordered_begin(void *v2, int v3, const MPI::Datatype &v4)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_read_ordered_begin
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, void *, int, MPI_Datatype))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, void *)
   9: v3
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, int)
  11: v4
  12: [B2.11].the_real_datatype
  13: ([B2.12]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  14: (MPI_Datatype)[B2.13] (CStyleCastExpr, NoOp, MPI_Datatype)
  15: [B2.2]([B2.6], [B2.8], [B2.10], [B2.14])
  16: int err = MPI_File_read_ordered_begin((MPI_File)this->the_real_file, v2, v3, (MPI_Datatype)(v4.the_real_datatype));
  17: err
  18: [B2.17] (ImplicitCastExpr, LValueToRValue, int)
  19: [B2.18] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.19]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual MPI::Request Iread_at(Offset v2, void *v3, int v4, const MPI::Datatype &v5)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v6
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Request)
   3: [B1.2] (CXXConstructExpr, class MPI::Request)
   4: return [B1.3];
   5: [B3.2].~Request() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B2.2]->Call_errhandler
   4: err
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B2.3]([B2.5])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Request)
   2: MPI::Request v6;
   3: MPI_File_iread_at
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, MPI_Offset, void *, int, MPI_Datatype, MPI_Request *))
   5: this
   6: [B3.5]->the_real_file
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, MPI_File)
   8: (MPI_File)[B3.7] (CStyleCastExpr, NoOp, MPI_File)
   9: v2
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, Offset)
  11: v3
  12: [B3.11] (ImplicitCastExpr, LValueToRValue, void *)
  13: v4
  14: [B3.13] (ImplicitCastExpr, LValueToRValue, int)
  15: v5
  16: [B3.15].the_real_datatype
  17: ([B3.16]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  18: (MPI_Datatype)[B3.17] (CStyleCastExpr, NoOp, MPI_Datatype)
  19: v6
  20: [B3.19].the_real_request
  21: &([B3.20])
  22: (MPI_Request *)[B3.21] (CStyleCastExpr, NoOp, MPI_Request *)
  23: [B3.4]([B3.8], [B3.10], [B3.12], [B3.14], [B3.18], [B3.22])
  24: int err = MPI_File_iread_at((MPI_File)this->the_real_file, v2, v3, v4, (MPI_Datatype)(v5.the_real_datatype), (MPI_Request *)&(v6.the_real_request));
  25: err
  26: [B3.25] (ImplicitCastExpr, LValueToRValue, int)
  27: [B3.26] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.27]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual void Write_at_all_end(const void *v2, MPI::Status &v3)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_write_at_all_end
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, const void *, MPI_Status *))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, const void *)
   9: (const void *)[B2.8] (CStyleCastExpr, NoOp, const void *)
  10: v3
  11: [B2.10].the_real_status
  12: &([B2.11])
  13: (MPI_Status *)[B2.12] (CStyleCastExpr, NoOp, MPI_Status *)
  14: [B2.2]([B2.6], [B2.9], [B2.13])
  15: int err = MPI_File_write_at_all_end((MPI_File)this->the_real_file, (const void *)v2, (MPI_Status *)&(v3.the_real_status));
  16: err
  17: [B2.16] (ImplicitCastExpr, LValueToRValue, int)
  18: [B2.17] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.18]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Write_at_all_end(const void *v2)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_write_at_all_end
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, const void *, MPI_Status *))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, const void *)
   9: (const void *)[B2.8] (CStyleCastExpr, NoOp, const void *)
  10: 1
  11: (MPI_Status *)[B2.10] (CStyleCastExpr, IntegralToPointer, MPI_Status *)
  12: [B2.2]([B2.6], [B2.9], [B2.11])
  13: int err = MPI_File_write_at_all_end((MPI_File)this->the_real_file, (const void *)v2, (MPI_Status *)1);
  14: err
  15: [B2.14] (ImplicitCastExpr, LValueToRValue, int)
  16: [B2.15] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.16]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual Offset Get_position_shared() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v2
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Offset)
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1])->Call_errhandler
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: MPI_Offset v2;
   2: MPI_File_get_position_shared
   3: [B3.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, MPI_Offset *))
   4: this
   5: [B3.4]->the_real_file
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, MPI_File)
   7: (MPI_File)[B3.6] (CStyleCastExpr, NoOp, MPI_File)
   8: v2
   9: &[B3.8]
  10: [B3.3]([B3.7], [B3.9])
  11: int err = MPI_File_get_position_shared((MPI_File)this->the_real_file, &v2);
  12: err
  13: [B3.12] (ImplicitCastExpr, LValueToRValue, int)
  14: [B3.13] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.14]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual void Write_shared(const void *v2, int v3, const MPI::Datatype &v4, MPI::Status &v5)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_write_shared
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, const void *, int, MPI_Datatype, MPI_Status *))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, const void *)
   9: (const void *)[B2.8] (CStyleCastExpr, NoOp, const void *)
  10: v3
  11: [B2.10] (ImplicitCastExpr, LValueToRValue, int)
  12: v4
  13: [B2.12].the_real_datatype
  14: ([B2.13]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  15: (MPI_Datatype)[B2.14] (CStyleCastExpr, NoOp, MPI_Datatype)
  16: v5
  17: [B2.16].the_real_status
  18: &([B2.17])
  19: (MPI_Status *)[B2.18] (CStyleCastExpr, NoOp, MPI_Status *)
  20: [B2.2]([B2.6], [B2.9], [B2.11], [B2.15], [B2.19])
  21: int err = MPI_File_write_shared((MPI_File)this->the_real_file, (const void *)v2, v3, (MPI_Datatype)(v4.the_real_datatype), (MPI_Status *)&(v5.the_real_status));
  22: err
  23: [B2.22] (ImplicitCastExpr, LValueToRValue, int)
  24: [B2.23] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.24]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Write_shared(const void *v2, int v3, const MPI::Datatype &v4)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_write_shared
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, const void *, int, MPI_Datatype, MPI_Status *))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, const void *)
   9: (const void *)[B2.8] (CStyleCastExpr, NoOp, const void *)
  10: v3
  11: [B2.10] (ImplicitCastExpr, LValueToRValue, int)
  12: v4
  13: [B2.12].the_real_datatype
  14: ([B2.13]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  15: (MPI_Datatype)[B2.14] (CStyleCastExpr, NoOp, MPI_Datatype)
  16: 1
  17: (MPI_Status *)[B2.16] (CStyleCastExpr, IntegralToPointer, MPI_Status *)
  18: [B2.2]([B2.6], [B2.9], [B2.11], [B2.15], [B2.17])
  19: int err = MPI_File_write_shared((MPI_File)this->the_real_file, (const void *)v2, v3, (MPI_Datatype)(v4.the_real_datatype), (MPI_Status *)1);
  20: err
  21: [B2.20] (ImplicitCastExpr, LValueToRValue, int)
  22: [B2.21] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.22]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual MPI::Request Iwrite_at(Offset v2, const void *v3, int v4, const MPI::Datatype &v5)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v6
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Request)
   3: [B1.2] (CXXConstructExpr, class MPI::Request)
   4: return [B1.3];
   5: [B3.2].~Request() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B2.2]->Call_errhandler
   4: err
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B2.3]([B2.5])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Request)
   2: MPI::Request v6;
   3: MPI_File_iwrite_at
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, MPI_Offset, const void *, int, MPI_Datatype, MPI_Request *))
   5: this
   6: [B3.5]->the_real_file
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, MPI_File)
   8: (MPI_File)[B3.7] (CStyleCastExpr, NoOp, MPI_File)
   9: v2
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, Offset)
  11: (MPI_Offset)[B3.10] (CStyleCastExpr, NoOp, MPI_Offset)
  12: v3
  13: [B3.12] (ImplicitCastExpr, LValueToRValue, const void *)
  14: (const void *)[B3.13] (CStyleCastExpr, NoOp, const void *)
  15: v4
  16: [B3.15] (ImplicitCastExpr, LValueToRValue, int)
  17: v5
  18: [B3.17].the_real_datatype
  19: ([B3.18]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  20: (MPI_Datatype)[B3.19] (CStyleCastExpr, NoOp, MPI_Datatype)
  21: v6
  22: [B3.21].the_real_request
  23: &([B3.22])
  24: (MPI_Request *)[B3.23] (CStyleCastExpr, NoOp, MPI_Request *)
  25: [B3.4]([B3.8], [B3.11], [B3.14], [B3.16], [B3.20], [B3.24])
  26: int err = MPI_File_iwrite_at((MPI_File)this->the_real_file, (MPI_Offset)v2, (const void *)v3, v4, (MPI_Datatype)(v5.the_real_datatype), (MPI_Request *)&(v6.the_real_request));
  27: err
  28: [B3.27] (ImplicitCastExpr, LValueToRValue, int)
  29: [B3.28] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.29]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual void Get_view(Offset &v2, MPI::Datatype &v3, MPI::Datatype &v4, char *v5) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1])->Call_errhandler
   3: err
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2]([B1.4])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_get_view
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, MPI_Offset *, MPI_Datatype *, MPI_Datatype *, char *))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: &[B2.7]
   9: v3
  10: [B2.9].the_real_datatype
  11: &([B2.10])
  12: (MPI_Datatype *)[B2.11] (CStyleCastExpr, NoOp, MPI_Datatype *)
  13: v4
  14: [B2.13].the_real_datatype
  15: &([B2.14])
  16: (MPI_Datatype *)[B2.15] (CStyleCastExpr, NoOp, MPI_Datatype *)
  17: v5
  18: [B2.17] (ImplicitCastExpr, LValueToRValue, char *)
  19: [B2.2]([B2.6], [B2.8], [B2.12], [B2.16], [B2.18])
  20: int err = MPI_File_get_view((MPI_File)this->the_real_file, &v2, (MPI_Datatype *)&(v3.the_real_datatype), (MPI_Datatype *)&(v4.the_real_datatype), v5);
  21: err
  22: [B2.21] (ImplicitCastExpr, LValueToRValue, int)
  23: [B2.22] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.23]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Write_all_begin(const void *v2, int v3, const MPI::Datatype &v4)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_write_all_begin
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, const void *, int, MPI_Datatype))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, const void *)
   9: (const void *)[B2.8] (CStyleCastExpr, NoOp, const void *)
  10: v3
  11: [B2.10] (ImplicitCastExpr, LValueToRValue, int)
  12: v4
  13: [B2.12].the_real_datatype
  14: ([B2.13]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  15: (MPI_Datatype)[B2.14] (CStyleCastExpr, NoOp, MPI_Datatype)
  16: [B2.2]([B2.6], [B2.9], [B2.11], [B2.15])
  17: int err = MPI_File_write_all_begin((MPI_File)this->the_real_file, (const void *)v2, v3, (MPI_Datatype)(v4.the_real_datatype));
  18: err
  19: [B2.18] (ImplicitCastExpr, LValueToRValue, int)
  20: [B2.19] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.20]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Read_all_end(void *v2, MPI::Status &v3)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_read_all_end
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, void *, MPI_Status *))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, void *)
   9: v3
  10: [B2.9].the_real_status
  11: &([B2.10])
  12: (MPI_Status *)[B2.11] (CStyleCastExpr, NoOp, MPI_Status *)
  13: [B2.2]([B2.6], [B2.8], [B2.12])
  14: int err = MPI_File_read_all_end((MPI_File)this->the_real_file, v2, (MPI_Status *)&(v3.the_real_status));
  15: err
  16: [B2.15] (ImplicitCastExpr, LValueToRValue, int)
  17: [B2.16] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.17]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Read_all_end(void *v2)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_read_all_end
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, void *, MPI_Status *))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, void *)
   9: 1
  10: (MPI_Status *)[B2.9] (CStyleCastExpr, IntegralToPointer, MPI_Status *)
  11: [B2.2]([B2.6], [B2.8], [B2.10])
  12: int err = MPI_File_read_all_end((MPI_File)this->the_real_file, v2, (MPI_Status *)1);
  13: err
  14: [B2.13] (ImplicitCastExpr, LValueToRValue, int)
  15: [B2.14] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.15]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual Offset Get_byte_offset(const Offset v2) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v3
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Offset)
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1])->Call_errhandler
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: MPI_Offset v3;
   2: MPI_File_get_byte_offset
   3: [B3.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, MPI_Offset, MPI_Offset *))
   4: this
   5: [B3.4]->the_real_file
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, MPI_File)
   7: (MPI_File)[B3.6] (CStyleCastExpr, NoOp, MPI_File)
   8: v2
   9: [B3.8] (ImplicitCastExpr, LValueToRValue, Offset)
  10: (MPI_Offset)[B3.9] (CStyleCastExpr, NoOp, MPI_Offset)
  11: v3
  12: &[B3.11]
  13: [B3.3]([B3.7], [B3.10], [B3.12])
  14: int err = MPI_File_get_byte_offset((MPI_File)this->the_real_file, (MPI_Offset)v2, &v3);
  15: err
  16: [B3.15] (ImplicitCastExpr, LValueToRValue, int)
  17: [B3.16] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.17]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual MPI::Request Iread(void *v2, int v3, const MPI::Datatype &v4)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v5
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Request)
   3: [B1.2] (CXXConstructExpr, class MPI::Request)
   4: return [B1.3];
   5: [B3.2].~Request() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B2.2]->Call_errhandler
   4: err
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B2.3]([B2.5])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Request)
   2: MPI::Request v5;
   3: MPI_File_iread
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, void *, int, MPI_Datatype, MPI_Request *))
   5: this
   6: [B3.5]->the_real_file
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, MPI_File)
   8: (MPI_File)[B3.7] (CStyleCastExpr, NoOp, MPI_File)
   9: v2
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, void *)
  11: v3
  12: [B3.11] (ImplicitCastExpr, LValueToRValue, int)
  13: v4
  14: [B3.13].the_real_datatype
  15: ([B3.14]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  16: (MPI_Datatype)[B3.15] (CStyleCastExpr, NoOp, MPI_Datatype)
  17: v5
  18: [B3.17].the_real_request
  19: &([B3.18])
  20: (MPI_Request *)[B3.19] (CStyleCastExpr, NoOp, MPI_Request *)
  21: [B3.4]([B3.8], [B3.10], [B3.12], [B3.16], [B3.20])
  22: int err = MPI_File_iread((MPI_File)this->the_real_file, v2, v3, (MPI_Datatype)(v4.the_real_datatype), (MPI_Request *)&(v5.the_real_request));
  23: err
  24: [B3.23] (ImplicitCastExpr, LValueToRValue, int)
  25: [B3.24] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.25]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual void Read_at_all_end(void *v2, MPI::Status &v3)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_read_at_all_end
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, void *, MPI_Status *))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, void *)
   9: v3
  10: [B2.9].the_real_status
  11: &([B2.10])
  12: (MPI_Status *)[B2.11] (CStyleCastExpr, NoOp, MPI_Status *)
  13: [B2.2]([B2.6], [B2.8], [B2.12])
  14: int err = MPI_File_read_at_all_end((MPI_File)this->the_real_file, v2, (MPI_Status *)&(v3.the_real_status));
  15: err
  16: [B2.15] (ImplicitCastExpr, LValueToRValue, int)
  17: [B2.16] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.17]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Read_at_all_end(void *v2)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_read_at_all_end
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, void *, MPI_Status *))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, void *)
   9: 1
  10: (MPI_Status *)[B2.9] (CStyleCastExpr, IntegralToPointer, MPI_Status *)
  11: [B2.2]([B2.6], [B2.8], [B2.10])
  12: int err = MPI_File_read_at_all_end((MPI_File)this->the_real_file, v2, (MPI_Status *)1);
  13: err
  14: [B2.13] (ImplicitCastExpr, LValueToRValue, int)
  15: [B2.14] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.15]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Write_at(Offset v2, const void *v3, int v4, const MPI::Datatype &v5, MPI::Status &v6)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_write_at
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, MPI_Offset, const void *, int, MPI_Datatype, MPI_Status *))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, Offset)
   9: v3
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, const void *)
  11: (const void *)[B2.10] (CStyleCastExpr, NoOp, const void *)
  12: v4
  13: [B2.12] (ImplicitCastExpr, LValueToRValue, int)
  14: v5
  15: [B2.14].the_real_datatype
  16: ([B2.15]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  17: (MPI_Datatype)[B2.16] (CStyleCastExpr, NoOp, MPI_Datatype)
  18: v6
  19: [B2.18].the_real_status
  20: &([B2.19])
  21: (MPI_Status *)[B2.20] (CStyleCastExpr, NoOp, MPI_Status *)
  22: [B2.2]([B2.6], [B2.8], [B2.11], [B2.13], [B2.17], [B2.21])
  23: int err = MPI_File_write_at((MPI_File)this->the_real_file, v2, (const void *)v3, v4, (MPI_Datatype)(v5.the_real_datatype), (MPI_Status *)&(v6.the_real_status));
  24: err
  25: [B2.24] (ImplicitCastExpr, LValueToRValue, int)
  26: [B2.25] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.26]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Write_at(Offset v2, const void *v3, int v4, const MPI::Datatype &v5)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_write_at
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, MPI_Offset, const void *, int, MPI_Datatype, MPI_Status *))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, Offset)
   9: v3
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, const void *)
  11: (const void *)[B2.10] (CStyleCastExpr, NoOp, const void *)
  12: v4
  13: [B2.12] (ImplicitCastExpr, LValueToRValue, int)
  14: v5
  15: [B2.14].the_real_datatype
  16: ([B2.15]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  17: (MPI_Datatype)[B2.16] (CStyleCastExpr, NoOp, MPI_Datatype)
  18: 1
  19: (MPI_Status *)[B2.18] (CStyleCastExpr, IntegralToPointer, MPI_Status *)
  20: [B2.2]([B2.6], [B2.8], [B2.11], [B2.13], [B2.17], [B2.19])
  21: int err = MPI_File_write_at((MPI_File)this->the_real_file, v2, (const void *)v3, v4, (MPI_Datatype)(v5.the_real_datatype), (MPI_Status *)1);
  22: err
  23: [B2.22] (ImplicitCastExpr, LValueToRValue, int)
  24: [B2.23] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.24]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Write_at_all_begin(Offset v2, const void *v3, int v4, const MPI::Datatype &v5)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_write_at_all_begin
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, MPI_Offset, const void *, int, MPI_Datatype))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, Offset)
   9: v3
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, const void *)
  11: (const void *)[B2.10] (CStyleCastExpr, NoOp, const void *)
  12: v4
  13: [B2.12] (ImplicitCastExpr, LValueToRValue, int)
  14: v5
  15: [B2.14].the_real_datatype
  16: ([B2.15]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  17: (MPI_Datatype)[B2.16] (CStyleCastExpr, NoOp, MPI_Datatype)
  18: [B2.2]([B2.6], [B2.8], [B2.11], [B2.13], [B2.17])
  19: int err = MPI_File_write_at_all_begin((MPI_File)this->the_real_file, v2, (const void *)v3, v4, (MPI_Datatype)(v5.the_real_datatype));
  20: err
  21: [B2.20] (ImplicitCastExpr, LValueToRValue, int)
  22: [B2.21] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.22]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual MPI::Errhandler Get_errhandler() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v2
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Errhandler)
   3: [B1.2] (CXXConstructExpr, class MPI::Errhandler)
   4: return [B1.3];
   5: [B3.2].~Errhandler() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1])->Call_errhandler
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Errhandler)
   2: MPI::Errhandler v2;
   3: MPI_File_get_errhandler
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, MPI_Errhandler *))
   5: this
   6: [B3.5]->the_real_file
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, MPI_File)
   8: (MPI_File)[B3.7] (CStyleCastExpr, NoOp, MPI_File)
   9: v2
  10: [B3.9].the_real_errhandler
  11: &([B3.10])
  12: [B3.4]([B3.8], [B3.11])
  13: int err = MPI_File_get_errhandler((MPI_File)this->the_real_file, &(v2.the_real_errhandler));
  14: err
  15: [B3.14] (ImplicitCastExpr, LValueToRValue, int)
  16: [B3.15] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.16]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual int Get_amode() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v2
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1])->Call_errhandler
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: int v2;
   2: MPI_File_get_amode
   3: [B3.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, int *))
   4: this
   5: [B3.4]->the_real_file
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, MPI_File)
   7: (MPI_File)[B3.6] (CStyleCastExpr, NoOp, MPI_File)
   8: v2
   9: &[B3.8]
  10: [B3.3]([B3.7], [B3.9])
  11: int err = MPI_File_get_amode((MPI_File)this->the_real_file, &v2);
  12: err
  13: [B3.12] (ImplicitCastExpr, LValueToRValue, int)
  14: [B3.13] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.14]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual void Set_atomicity(bool v2)
 [B6 (ENTRY)]
   Succs (1): B5

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: ([B5.7]) ? [B3.1] : [B4.1]
   2: l2
   3: [B2.2] = [B2.1]
   4: MPI_File_set_atomicity
   5: [B2.4] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, int))
   6: this
   7: [B2.6]->the_real_file
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, MPI_File)
   9: (MPI_File)[B2.8] (CStyleCastExpr, NoOp, MPI_File)
  10: l2
  11: [B2.10] (ImplicitCastExpr, LValueToRValue, int)
  12: [B2.5]([B2.9], [B2.11])
  13: int err = MPI_File_set_atomicity((MPI_File)this->the_real_file, l2);
  14: err
  15: [B2.14] (ImplicitCastExpr, LValueToRValue, int)
  16: [B2.15] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.16]
   Preds (2): B3 B4
   Succs (2): B1 B0

 [B3]
   1: 1
   Preds (1): B5
   Succs (1): B2

 [B4]
   1: 0
   Preds (1): B5
   Succs (1): B2

 [B5]
   1: int l2;
   2: v2
   3: [B5.2] (ImplicitCastExpr, LValueToRValue, _Bool)
   4: [B5.3] (ImplicitCastExpr, IntegralCast, int)
   5: true
   6: [B5.5] (ImplicitCastExpr, IntegralCast, int)
   7: [B5.4] == [B5.6]
   T: ([B5.7]) ? ... : ...
   Preds (1): B6
   Succs (2): B3 B4

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual MPI::Group Get_group() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v2
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Group)
   3: [B1.2] (CXXConstructExpr, class MPI::Group)
   4: return [B1.3];
   5: [B3.2].~Group() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1])->Call_errhandler
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Group)
   2: MPI::Group v2;
   3: MPI_File_get_group
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, MPI_Group *))
   5: this
   6: [B3.5]->the_real_file
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, MPI_File)
   8: (MPI_File)[B3.7] (CStyleCastExpr, NoOp, MPI_File)
   9: v2
  10: [B3.9].the_real_group
  11: &([B3.10])
  12: [B3.4]([B3.8], [B3.11])
  13: int err = MPI_File_get_group((MPI_File)this->the_real_file, &(v2.the_real_group));
  14: err
  15: [B3.14] (ImplicitCastExpr, LValueToRValue, int)
  16: [B3.15] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.16]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual Offset Get_position() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v2
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Offset)
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1])->Call_errhandler
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: MPI_Offset v2;
   2: MPI_File_get_position
   3: [B3.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, MPI_Offset *))
   4: this
   5: [B3.4]->the_real_file
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, MPI_File)
   7: (MPI_File)[B3.6] (CStyleCastExpr, NoOp, MPI_File)
   8: v2
   9: &[B3.8]
  10: [B3.3]([B3.7], [B3.9])
  11: int err = MPI_File_get_position((MPI_File)this->the_real_file, &v2);
  12: err
  13: [B3.12] (ImplicitCastExpr, LValueToRValue, int)
  14: [B3.13] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.14]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

static MPI::File Open(const MPI::Intracomm &v1, const char *v2, int v3, const MPI::Info &v4)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v5
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::File)
   3: [B1.2] (CXXConstructExpr, class MPI::File)
   4: return [B1.3];
   5: [B3.2].~File() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: FILE_NULL
   2: ([B2.1]) (ImplicitCastExpr, NoOp, const class MPI::File)
   3: [B2.2].Call_errhandler
   4: err
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B2.3]([B2.5])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::File)
   2: MPI::File v5;
   3: MPI_File_open
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, const char *, int, MPI_Info, MPI_File *))
   5: v1
   6: [B3.5] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm)
   7: [B3.6].the_real_comm
   8: ([B3.7]) (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   9: (MPI_Comm)[B3.8] (CStyleCastExpr, NoOp, MPI_Comm)
  10: v2
  11: [B3.10] (ImplicitCastExpr, LValueToRValue, const char *)
  12: (const char *)[B3.11] (CStyleCastExpr, NoOp, const char *)
  13: v3
  14: [B3.13] (ImplicitCastExpr, LValueToRValue, int)
  15: v4
  16: [B3.15].the_real_info
  17: ([B3.16]) (ImplicitCastExpr, LValueToRValue, MPI_Info)
  18: (MPI_Info)[B3.17] (CStyleCastExpr, NoOp, MPI_Info)
  19: v5
  20: [B3.19].the_real_file
  21: &([B3.20])
  22: [B3.4]([B3.9], [B3.12], [B3.14], [B3.18], [B3.21])
  23: int err = MPI_File_open((MPI_Comm)(v1.the_real_comm), (const char *)v2, v3, (MPI_Info)(v4.the_real_info), &(v5.the_real_file));
  24: err
  25: [B3.24] (ImplicitCastExpr, LValueToRValue, int)
  26: [B3.25] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.26]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual void Seek(Offset v2, int v3)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_seek
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, MPI_Offset, int))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, Offset)
   9: v3
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B2.2]([B2.6], [B2.8], [B2.10])
  12: int err = MPI_File_seek((MPI_File)this->the_real_file, v2, v3);
  13: err
  14: [B2.13] (ImplicitCastExpr, LValueToRValue, int)
  15: [B2.14] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.15]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Read_all_begin(void *v2, int v3, const MPI::Datatype &v4)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_read_all_begin
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, void *, int, MPI_Datatype))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, void *)
   9: v3
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, int)
  11: v4
  12: [B2.11].the_real_datatype
  13: ([B2.12]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  14: (MPI_Datatype)[B2.13] (CStyleCastExpr, NoOp, MPI_Datatype)
  15: [B2.2]([B2.6], [B2.8], [B2.10], [B2.14])
  16: int err = MPI_File_read_all_begin((MPI_File)this->the_real_file, v2, v3, (MPI_Datatype)(v4.the_real_datatype));
  17: err
  18: [B2.17] (ImplicitCastExpr, LValueToRValue, int)
  19: [B2.18] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.19]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Read_at_all_begin(Offset v2, void *v3, int v4, const MPI::Datatype &v5)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_read_at_all_begin
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, MPI_Offset, void *, int, MPI_Datatype))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, Offset)
   9: v3
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, void *)
  11: v4
  12: [B2.11] (ImplicitCastExpr, LValueToRValue, int)
  13: v5
  14: [B2.13].the_real_datatype
  15: ([B2.14]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  16: (MPI_Datatype)[B2.15] (CStyleCastExpr, NoOp, MPI_Datatype)
  17: [B2.2]([B2.6], [B2.8], [B2.10], [B2.12], [B2.16])
  18: int err = MPI_File_read_at_all_begin((MPI_File)this->the_real_file, v2, v3, v4, (MPI_Datatype)(v5.the_real_datatype));
  19: err
  20: [B2.19] (ImplicitCastExpr, LValueToRValue, int)
  21: [B2.20] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.21]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Read_all(void *v2, int v3, const MPI::Datatype &v4, MPI::Status &v5)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_read_all
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, void *, int, MPI_Datatype, MPI_Status *))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, void *)
   9: v3
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, int)
  11: v4
  12: [B2.11].the_real_datatype
  13: ([B2.12]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  14: (MPI_Datatype)[B2.13] (CStyleCastExpr, NoOp, MPI_Datatype)
  15: v5
  16: [B2.15].the_real_status
  17: &([B2.16])
  18: (MPI_Status *)[B2.17] (CStyleCastExpr, NoOp, MPI_Status *)
  19: [B2.2]([B2.6], [B2.8], [B2.10], [B2.14], [B2.18])
  20: int err = MPI_File_read_all((MPI_File)this->the_real_file, v2, v3, (MPI_Datatype)(v4.the_real_datatype), (MPI_Status *)&(v5.the_real_status));
  21: err
  22: [B2.21] (ImplicitCastExpr, LValueToRValue, int)
  23: [B2.22] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.23]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Read_all(void *v2, int v3, const MPI::Datatype &v4)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_read_all
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, void *, int, MPI_Datatype, MPI_Status *))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, void *)
   9: v3
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, int)
  11: v4
  12: [B2.11].the_real_datatype
  13: ([B2.12]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  14: (MPI_Datatype)[B2.13] (CStyleCastExpr, NoOp, MPI_Datatype)
  15: 1
  16: (MPI_Status *)[B2.15] (CStyleCastExpr, IntegralToPointer, MPI_Status *)
  17: [B2.2]([B2.6], [B2.8], [B2.10], [B2.14], [B2.16])
  18: int err = MPI_File_read_all((MPI_File)this->the_real_file, v2, v3, (MPI_Datatype)(v4.the_real_datatype), (MPI_Status *)1);
  19: err
  20: [B2.19] (ImplicitCastExpr, LValueToRValue, int)
  21: [B2.20] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.21]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Preallocate(Offset v2)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_preallocate
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, MPI_Offset))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, Offset)
   9: [B2.2]([B2.6], [B2.8])
  10: int err = MPI_File_preallocate((MPI_File)this->the_real_file, v2);
  11: err
  12: [B2.11] (ImplicitCastExpr, LValueToRValue, int)
  13: [B2.12] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.13]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Read_at_all(Offset v2, void *v3, int v4, const MPI::Datatype &v5, MPI::Status &v6)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_read_at_all
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, MPI_Offset, void *, int, MPI_Datatype, MPI_Status *))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, Offset)
   9: v3
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, void *)
  11: v4
  12: [B2.11] (ImplicitCastExpr, LValueToRValue, int)
  13: v5
  14: [B2.13].the_real_datatype
  15: ([B2.14]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  16: (MPI_Datatype)[B2.15] (CStyleCastExpr, NoOp, MPI_Datatype)
  17: v6
  18: [B2.17].the_real_status
  19: &([B2.18])
  20: (MPI_Status *)[B2.19] (CStyleCastExpr, NoOp, MPI_Status *)
  21: [B2.2]([B2.6], [B2.8], [B2.10], [B2.12], [B2.16], [B2.20])
  22: int err = MPI_File_read_at_all((MPI_File)this->the_real_file, v2, v3, v4, (MPI_Datatype)(v5.the_real_datatype), (MPI_Status *)&(v6.the_real_status));
  23: err
  24: [B2.23] (ImplicitCastExpr, LValueToRValue, int)
  25: [B2.24] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.25]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Read_at_all(Offset v2, void *v3, int v4, const MPI::Datatype &v5)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_read_at_all
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, MPI_Offset, void *, int, MPI_Datatype, MPI_Status *))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, Offset)
   9: v3
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, void *)
  11: v4
  12: [B2.11] (ImplicitCastExpr, LValueToRValue, int)
  13: v5
  14: [B2.13].the_real_datatype
  15: ([B2.14]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  16: (MPI_Datatype)[B2.15] (CStyleCastExpr, NoOp, MPI_Datatype)
  17: 1
  18: (MPI_Status *)[B2.17] (CStyleCastExpr, IntegralToPointer, MPI_Status *)
  19: [B2.2]([B2.6], [B2.8], [B2.10], [B2.12], [B2.16], [B2.18])
  20: int err = MPI_File_read_at_all((MPI_File)this->the_real_file, v2, v3, v4, (MPI_Datatype)(v5.the_real_datatype), (MPI_Status *)1);
  21: err
  22: [B2.21] (ImplicitCastExpr, LValueToRValue, int)
  23: [B2.22] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.23]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Read_shared(void *v2, int v3, const MPI::Datatype &v4, MPI::Status &v5)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_read_shared
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, void *, int, MPI_Datatype, MPI_Status *))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, void *)
   9: v3
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, int)
  11: v4
  12: [B2.11].the_real_datatype
  13: ([B2.12]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  14: (MPI_Datatype)[B2.13] (CStyleCastExpr, NoOp, MPI_Datatype)
  15: v5
  16: [B2.15].the_real_status
  17: &([B2.16])
  18: (MPI_Status *)[B2.17] (CStyleCastExpr, NoOp, MPI_Status *)
  19: [B2.2]([B2.6], [B2.8], [B2.10], [B2.14], [B2.18])
  20: int err = MPI_File_read_shared((MPI_File)this->the_real_file, v2, v3, (MPI_Datatype)(v4.the_real_datatype), (MPI_Status *)&(v5.the_real_status));
  21: err
  22: [B2.21] (ImplicitCastExpr, LValueToRValue, int)
  23: [B2.22] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.23]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Read_shared(void *v2, int v3, const MPI::Datatype &v4)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_read_shared
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, void *, int, MPI_Datatype, MPI_Status *))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, void *)
   9: v3
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, int)
  11: v4
  12: [B2.11].the_real_datatype
  13: ([B2.12]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  14: (MPI_Datatype)[B2.13] (CStyleCastExpr, NoOp, MPI_Datatype)
  15: 1
  16: (MPI_Status *)[B2.15] (CStyleCastExpr, IntegralToPointer, MPI_Status *)
  17: [B2.2]([B2.6], [B2.8], [B2.10], [B2.14], [B2.16])
  18: int err = MPI_File_read_shared((MPI_File)this->the_real_file, v2, v3, (MPI_Datatype)(v4.the_real_datatype), (MPI_Status *)1);
  19: err
  20: [B2.19] (ImplicitCastExpr, LValueToRValue, int)
  21: [B2.20] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.21]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual MPI::Request Iwrite(const void *v2, int v3, const MPI::Datatype &v4)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v5
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Request)
   3: [B1.2] (CXXConstructExpr, class MPI::Request)
   4: return [B1.3];
   5: [B3.2].~Request() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B2.2]->Call_errhandler
   4: err
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B2.3]([B2.5])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Request)
   2: MPI::Request v5;
   3: MPI_File_iwrite
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, const void *, int, MPI_Datatype, MPI_Request *))
   5: this
   6: [B3.5]->the_real_file
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, MPI_File)
   8: (MPI_File)[B3.7] (CStyleCastExpr, NoOp, MPI_File)
   9: v2
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, const void *)
  11: (const void *)[B3.10] (CStyleCastExpr, NoOp, const void *)
  12: v3
  13: [B3.12] (ImplicitCastExpr, LValueToRValue, int)
  14: v4
  15: [B3.14].the_real_datatype
  16: ([B3.15]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  17: (MPI_Datatype)[B3.16] (CStyleCastExpr, NoOp, MPI_Datatype)
  18: v5
  19: [B3.18].the_real_request
  20: &([B3.19])
  21: (MPI_Request *)[B3.20] (CStyleCastExpr, NoOp, MPI_Request *)
  22: [B3.4]([B3.8], [B3.11], [B3.13], [B3.17], [B3.21])
  23: int err = MPI_File_iwrite((MPI_File)this->the_real_file, (const void *)v2, v3, (MPI_Datatype)(v4.the_real_datatype), (MPI_Request *)&(v5.the_real_request));
  24: err
  25: [B3.24] (ImplicitCastExpr, LValueToRValue, int)
  26: [B3.25] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.26]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual MPI::Request Iwrite_shared(const void *v2, int v3, const MPI::Datatype &v4)
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v5
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Request)
   3: [B1.2] (CXXConstructExpr, class MPI::Request)
   4: return [B1.3];
   5: [B3.2].~Request() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B2.2]->Call_errhandler
   4: err
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B2.3]([B2.5])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Request)
   2: MPI::Request v5;
   3: MPI_File_iwrite_shared
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, const void *, int, MPI_Datatype, MPI_Request *))
   5: this
   6: [B3.5]->the_real_file
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, MPI_File)
   8: (MPI_File)[B3.7] (CStyleCastExpr, NoOp, MPI_File)
   9: v2
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, const void *)
  11: (const void *)[B3.10] (CStyleCastExpr, NoOp, const void *)
  12: v3
  13: [B3.12] (ImplicitCastExpr, LValueToRValue, int)
  14: v4
  15: [B3.14].the_real_datatype
  16: ([B3.15]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  17: (MPI_Datatype)[B3.16] (CStyleCastExpr, NoOp, MPI_Datatype)
  18: v5
  19: [B3.18].the_real_request
  20: &([B3.19])
  21: (MPI_Request *)[B3.20] (CStyleCastExpr, NoOp, MPI_Request *)
  22: [B3.4]([B3.8], [B3.11], [B3.13], [B3.17], [B3.21])
  23: int err = MPI_File_iwrite_shared((MPI_File)this->the_real_file, (const void *)v2, v3, (MPI_Datatype)(v4.the_real_datatype), (MPI_Request *)&(v5.the_real_request));
  24: err
  25: [B3.24] (ImplicitCastExpr, LValueToRValue, int)
  26: [B3.25] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.26]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual void Set_errhandler(const MPI::Errhandler &v2)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_set_errhandler
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, MPI_Errhandler))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7].the_real_errhandler
   9: ([B2.8]) (ImplicitCastExpr, LValueToRValue, MPI_Errhandler)
  10: (MPI_Errhandler)[B2.9] (CStyleCastExpr, NoOp, MPI_Errhandler)
  11: [B2.2]([B2.6], [B2.10])
  12: int err = MPI_File_set_errhandler((MPI_File)this->the_real_file, (MPI_Errhandler)(v2.the_real_errhandler));
  13: err
  14: [B2.13] (ImplicitCastExpr, LValueToRValue, int)
  15: [B2.14] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.15]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Write_at_all(Offset v2, const void *v3, int v4, const MPI::Datatype &v5, MPI::Status &v6)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_write_at_all
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, MPI_Offset, const void *, int, MPI_Datatype, MPI_Status *))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, Offset)
   9: v3
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, const void *)
  11: (const void *)[B2.10] (CStyleCastExpr, NoOp, const void *)
  12: v4
  13: [B2.12] (ImplicitCastExpr, LValueToRValue, int)
  14: v5
  15: [B2.14].the_real_datatype
  16: ([B2.15]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  17: (MPI_Datatype)[B2.16] (CStyleCastExpr, NoOp, MPI_Datatype)
  18: v6
  19: [B2.18].the_real_status
  20: &([B2.19])
  21: (MPI_Status *)[B2.20] (CStyleCastExpr, NoOp, MPI_Status *)
  22: [B2.2]([B2.6], [B2.8], [B2.11], [B2.13], [B2.17], [B2.21])
  23: int err = MPI_File_write_at_all((MPI_File)this->the_real_file, v2, (const void *)v3, v4, (MPI_Datatype)(v5.the_real_datatype), (MPI_Status *)&(v6.the_real_status));
  24: err
  25: [B2.24] (ImplicitCastExpr, LValueToRValue, int)
  26: [B2.25] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.26]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Write_at_all(Offset v2, const void *v3, int v4, const MPI::Datatype &v5)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_write_at_all
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, MPI_Offset, const void *, int, MPI_Datatype, MPI_Status *))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, Offset)
   9: v3
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, const void *)
  11: (const void *)[B2.10] (CStyleCastExpr, NoOp, const void *)
  12: v4
  13: [B2.12] (ImplicitCastExpr, LValueToRValue, int)
  14: v5
  15: [B2.14].the_real_datatype
  16: ([B2.15]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  17: (MPI_Datatype)[B2.16] (CStyleCastExpr, NoOp, MPI_Datatype)
  18: 1
  19: (MPI_Status *)[B2.18] (CStyleCastExpr, IntegralToPointer, MPI_Status *)
  20: [B2.2]([B2.6], [B2.8], [B2.11], [B2.13], [B2.17], [B2.19])
  21: int err = MPI_File_write_at_all((MPI_File)this->the_real_file, v2, (const void *)v3, v4, (MPI_Datatype)(v5.the_real_datatype), (MPI_Status *)1);
  22: err
  23: [B2.22] (ImplicitCastExpr, LValueToRValue, int)
  24: [B2.23] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.24]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Set_size(Offset v2)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_set_size
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, MPI_Offset))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, Offset)
   9: [B2.2]([B2.6], [B2.8])
  10: int err = MPI_File_set_size((MPI_File)this->the_real_file, v2);
  11: err
  12: [B2.11] (ImplicitCastExpr, LValueToRValue, int)
  13: [B2.12] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.13]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Set_view(Offset v2, const MPI::Datatype &v3, const MPI::Datatype v4, const char *v5, const MPI::Info &v6)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_set_view
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, MPI_Offset, MPI_Datatype, MPI_Datatype, const char *, MPI_Info))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, Offset)
   9: v3
  10: [B2.9].the_real_datatype
  11: ([B2.10]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  12: (MPI_Datatype)[B2.11] (CStyleCastExpr, NoOp, MPI_Datatype)
  13: v4
  14: [B2.13].operator int
  15: [B2.13]
  16: [B2.15] (ImplicitCastExpr, UserDefinedConversion, MPI_Datatype)
  17: (MPI_Datatype)[B2.16] (CStyleCastExpr, NoOp, MPI_Datatype)
  18: v5
  19: [B2.18] (ImplicitCastExpr, LValueToRValue, const char *)
  20: (const char *)[B2.19] (CStyleCastExpr, NoOp, const char *)
  21: v6
  22: [B2.21].the_real_info
  23: ([B2.22]) (ImplicitCastExpr, LValueToRValue, MPI_Info)
  24: (MPI_Info)[B2.23] (CStyleCastExpr, NoOp, MPI_Info)
  25: [B2.2]([B2.6], [B2.8], [B2.12], [B2.17], [B2.20], [B2.24])
  26: int err = MPI_File_set_view((MPI_File)this->the_real_file, v2, (MPI_Datatype)(v3.the_real_datatype), (MPI_Datatype)v4, (const char *)v5, (MPI_Info)(v6.the_real_info));
  27: err
  28: [B2.27] (ImplicitCastExpr, LValueToRValue, int)
  29: [B2.28] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.29]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Read_at(Offset v2, void *v3, int v4, const MPI::Datatype &v5, MPI::Status &v6)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_read_at
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, MPI_Offset, void *, int, MPI_Datatype, MPI_Status *))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, Offset)
   9: v3
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, void *)
  11: v4
  12: [B2.11] (ImplicitCastExpr, LValueToRValue, int)
  13: v5
  14: [B2.13].the_real_datatype
  15: ([B2.14]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  16: (MPI_Datatype)[B2.15] (CStyleCastExpr, NoOp, MPI_Datatype)
  17: v6
  18: [B2.17].the_real_status
  19: &([B2.18])
  20: (MPI_Status *)[B2.19] (CStyleCastExpr, NoOp, MPI_Status *)
  21: [B2.2]([B2.6], [B2.8], [B2.10], [B2.12], [B2.16], [B2.20])
  22: int err = MPI_File_read_at((MPI_File)this->the_real_file, v2, v3, v4, (MPI_Datatype)(v5.the_real_datatype), (MPI_Status *)&(v6.the_real_status));
  23: err
  24: [B2.23] (ImplicitCastExpr, LValueToRValue, int)
  25: [B2.24] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.25]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Read_at(Offset v2, void *v3, int v4, const MPI::Datatype &v5)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_read_at
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, MPI_Offset, void *, int, MPI_Datatype, MPI_Status *))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, Offset)
   9: v3
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, void *)
  11: v4
  12: [B2.11] (ImplicitCastExpr, LValueToRValue, int)
  13: v5
  14: [B2.13].the_real_datatype
  15: ([B2.14]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  16: (MPI_Datatype)[B2.15] (CStyleCastExpr, NoOp, MPI_Datatype)
  17: 1
  18: (MPI_Status *)[B2.17] (CStyleCastExpr, IntegralToPointer, MPI_Status *)
  19: [B2.2]([B2.6], [B2.8], [B2.10], [B2.12], [B2.16], [B2.18])
  20: int err = MPI_File_read_at((MPI_File)this->the_real_file, v2, v3, v4, (MPI_Datatype)(v5.the_real_datatype), (MPI_Status *)1);
  21: err
  22: [B2.21] (ImplicitCastExpr, LValueToRValue, int)
  23: [B2.22] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.23]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Close()
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_close
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File *))
   3: this
   4: [B2.3]->the_real_file
   5: &[B2.4]
   6: (MPI_File *)[B2.5] (CStyleCastExpr, NoOp, MPI_File *)
   7: [B2.2]([B2.6])
   8: int err = MPI_File_close((MPI_File *)&this->the_real_file);
   9: err
  10: [B2.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B2.10] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.11]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Write_ordered_end(const void *v2, MPI::Status &v3)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_write_ordered_end
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, const void *, MPI_Status *))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, const void *)
   9: (const void *)[B2.8] (CStyleCastExpr, NoOp, const void *)
  10: v3
  11: [B2.10].the_real_status
  12: &([B2.11])
  13: (MPI_Status *)[B2.12] (CStyleCastExpr, NoOp, MPI_Status *)
  14: [B2.2]([B2.6], [B2.9], [B2.13])
  15: int err = MPI_File_write_ordered_end((MPI_File)this->the_real_file, (const void *)v2, (MPI_Status *)&(v3.the_real_status));
  16: err
  17: [B2.16] (ImplicitCastExpr, LValueToRValue, int)
  18: [B2.17] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.18]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Write_ordered_end(const void *v2)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_write_ordered_end
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, const void *, MPI_Status *))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, const void *)
   9: (const void *)[B2.8] (CStyleCastExpr, NoOp, const void *)
  10: 1
  11: (MPI_Status *)[B2.10] (CStyleCastExpr, IntegralToPointer, MPI_Status *)
  12: [B2.2]([B2.6], [B2.9], [B2.11])
  13: int err = MPI_File_write_ordered_end((MPI_File)this->the_real_file, (const void *)v2, (MPI_Status *)1);
  14: err
  15: [B2.14] (ImplicitCastExpr, LValueToRValue, int)
  16: [B2.15] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.16]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Write(const void *v2, int v3, const MPI::Datatype &v4, MPI::Status &v5)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_write
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, const void *, int, MPI_Datatype, MPI_Status *))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, const void *)
   9: (const void *)[B2.8] (CStyleCastExpr, NoOp, const void *)
  10: v3
  11: [B2.10] (ImplicitCastExpr, LValueToRValue, int)
  12: v4
  13: [B2.12].the_real_datatype
  14: ([B2.13]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  15: (MPI_Datatype)[B2.14] (CStyleCastExpr, NoOp, MPI_Datatype)
  16: v5
  17: [B2.16].the_real_status
  18: &([B2.17])
  19: (MPI_Status *)[B2.18] (CStyleCastExpr, NoOp, MPI_Status *)
  20: [B2.2]([B2.6], [B2.9], [B2.11], [B2.15], [B2.19])
  21: int err = MPI_File_write((MPI_File)this->the_real_file, (const void *)v2, v3, (MPI_Datatype)(v4.the_real_datatype), (MPI_Status *)&(v5.the_real_status));
  22: err
  23: [B2.22] (ImplicitCastExpr, LValueToRValue, int)
  24: [B2.23] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.24]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Write(const void *v2, int v3, const MPI::Datatype &v4)
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, NoOp, const class MPI::File *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_File_write
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, const void *, int, MPI_Datatype, MPI_Status *))
   3: this
   4: [B2.3]->the_real_file
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, MPI_File)
   6: (MPI_File)[B2.5] (CStyleCastExpr, NoOp, MPI_File)
   7: v2
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, const void *)
   9: (const void *)[B2.8] (CStyleCastExpr, NoOp, const void *)
  10: v3
  11: [B2.10] (ImplicitCastExpr, LValueToRValue, int)
  12: v4
  13: [B2.12].the_real_datatype
  14: ([B2.13]) (ImplicitCastExpr, LValueToRValue, MPI_Datatype)
  15: (MPI_Datatype)[B2.14] (CStyleCastExpr, NoOp, MPI_Datatype)
  16: 1
  17: (MPI_Status *)[B2.16] (CStyleCastExpr, IntegralToPointer, MPI_Status *)
  18: [B2.2]([B2.6], [B2.9], [B2.11], [B2.15], [B2.17])
  19: int err = MPI_File_write((MPI_File)this->the_real_file, (const void *)v2, v3, (MPI_Datatype)(v4.the_real_datatype), (MPI_Status *)1);
  20: err
  21: [B2.20] (ImplicitCastExpr, LValueToRValue, int)
  22: [B2.21] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.22]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual bool Get_atomicity() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v2
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 0
   4: [B1.2] != [B1.3]
   5: return [B1.4];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1])->Call_errhandler
   3: err
   4: [B2.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B2.2]([B2.4])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: int v2;
   2: MPI_File_get_atomicity
   3: [B3.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_File, int *))
   4: this
   5: [B3.4]->the_real_file
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, MPI_File)
   7: (MPI_File)[B3.6] (CStyleCastExpr, NoOp, MPI_File)
   8: v2
   9: &[B3.8]
  10: [B3.3]([B3.7], [B3.9])
  11: int err = MPI_File_get_atomicity((MPI_File)this->the_real_file, &v2);
  12: err
  13: [B3.12] (ImplicitCastExpr, LValueToRValue, int)
  14: [B3.13] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.14]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

inline Graphcomm(MPI_Comm obj) : MPI::Intracomm(obj) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   3: [B1.2] (CXXConstructExpr, class MPI::Intracomm)
   4: Intracomm([B1.3]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline Graphcomm() : MPI::Intracomm() {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, class MPI::Intracomm)
   2: Intracomm([B1.1]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~MPI::Graphcomm() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ~Intracomm() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

Graphcomm(const MPI::Graphcomm &obj) : MPI::Intracomm(obj) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, DerivedToBase, const class MPI::Intracomm)
   3: [B1.2] (CXXConstructExpr, class MPI::Intracomm)
   4: Intracomm([B1.3]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

MPI::Graphcomm &operator=(const MPI::Graphcomm &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm)
   3: [B1.2].the_real_comm
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   5: this
   6: [B1.5] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   7: [B1.6]->the_real_comm
   8: [B1.7] = [B1.4]
   9: this
  10: *[B1.9]
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline operator MPI_Comm *()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   3: [B1.2]->the_real_comm
   4: &[B1.3]
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline operator MPI_Comm() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   3: [B1.2]->the_real_comm
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

MPI::Graphcomm &operator=(const MPI_Comm &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   3: this
   4: [B1.3] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   5: [B1.4]->the_real_comm
   6: [B1.5] = [B1.2]
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual void Get_dims(int *v2, int *v3) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, UncheckedDerivedToBase, const class MPI::Comm *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Graphdims_get
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, int *, int *))
   3: this
   4: [B2.3] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   5: [B2.4]->the_real_comm
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   7: (MPI_Comm)[B2.6] (CStyleCastExpr, NoOp, MPI_Comm)
   8: v2
   9: [B2.8] (ImplicitCastExpr, LValueToRValue, int *)
  10: v3
  11: [B2.10] (ImplicitCastExpr, LValueToRValue, int *)
  12: [B2.2]([B2.7], [B2.9], [B2.11])
  13: int err = MPI_Graphdims_get((MPI_Comm)this->the_real_comm, v2, v3);
  14: err
  15: [B2.14] (ImplicitCastExpr, LValueToRValue, int)
  16: [B2.15] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.16]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual void Get_topo(int v2, int v3, int v4[], int v5[]) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, UncheckedDerivedToBase, const class MPI::Comm *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Graph_get
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, int, int, int *, int *))
   3: this
   4: [B2.3] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   5: [B2.4]->the_real_comm
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   7: (MPI_Comm)[B2.6] (CStyleCastExpr, NoOp, MPI_Comm)
   8: v2
   9: [B2.8] (ImplicitCastExpr, LValueToRValue, int)
  10: v3
  11: [B2.10] (ImplicitCastExpr, LValueToRValue, int)
  12: v4
  13: [B2.12] (ImplicitCastExpr, LValueToRValue, int *)
  14: v5
  15: [B2.14] (ImplicitCastExpr, LValueToRValue, int *)
  16: [B2.2]([B2.7], [B2.9], [B2.11], [B2.13], [B2.15])
  17: int err = MPI_Graph_get((MPI_Comm)this->the_real_comm, v2, v3, v4, v5);
  18: err
  19: [B2.18] (ImplicitCastExpr, LValueToRValue, int)
  20: [B2.19] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.20]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual int Map(int v2, const int v3[], const int v4[]) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v5
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1]) (ImplicitCastExpr, UncheckedDerivedToBase, const class MPI::Comm *)
   3: [B2.2]->Call_errhandler
   4: err
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B2.3]([B2.5])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: int v5;
   2: MPI_Graph_map
   3: [B3.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, int, const int *, const int *, int *))
   4: this
   5: [B3.4] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   6: [B3.5]->the_real_comm
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   8: (MPI_Comm)[B3.7] (CStyleCastExpr, NoOp, MPI_Comm)
   9: v2
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, int)
  11: v3
  12: [B3.11] (ImplicitCastExpr, LValueToRValue, const int *)
  13: (const int *)[B3.12] (CStyleCastExpr, NoOp, const int *)
  14: v4
  15: [B3.14] (ImplicitCastExpr, LValueToRValue, const int *)
  16: (const int *)[B3.15] (CStyleCastExpr, NoOp, const int *)
  17: v5
  18: &[B3.17]
  19: [B3.3]([B3.8], [B3.10], [B3.13], [B3.16], [B3.18])
  20: int err = MPI_Graph_map((MPI_Comm)this->the_real_comm, v2, (const int *)v3, (const int *)v4, &v5);
  21: err
  22: [B3.21] (ImplicitCastExpr, LValueToRValue, int)
  23: [B3.22] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.23]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual void Get_neighbors(int v2, int v3, int v4[]) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, UncheckedDerivedToBase, const class MPI::Comm *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Graph_neighbors
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, int, int, int *))
   3: this
   4: [B2.3] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   5: [B2.4]->the_real_comm
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   7: (MPI_Comm)[B2.6] (CStyleCastExpr, NoOp, MPI_Comm)
   8: v2
   9: [B2.8] (ImplicitCastExpr, LValueToRValue, int)
  10: v3
  11: [B2.10] (ImplicitCastExpr, LValueToRValue, int)
  12: v4
  13: [B2.12] (ImplicitCastExpr, LValueToRValue, int *)
  14: [B2.2]([B2.7], [B2.9], [B2.11], [B2.13])
  15: int err = MPI_Graph_neighbors((MPI_Comm)this->the_real_comm, v2, v3, v4);
  16: err
  17: [B2.16] (ImplicitCastExpr, LValueToRValue, int)
  18: [B2.17] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.18]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual int Get_neighbors_count(int v2) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v3
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1]) (ImplicitCastExpr, UncheckedDerivedToBase, const class MPI::Comm *)
   3: [B2.2]->Call_errhandler
   4: err
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B2.3]([B2.5])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: int v3;
   2: MPI_Graph_neighbors_count
   3: [B3.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, int, int *))
   4: this
   5: [B3.4] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   6: [B3.5]->the_real_comm
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   8: (MPI_Comm)[B3.7] (CStyleCastExpr, NoOp, MPI_Comm)
   9: v2
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, int)
  11: v3
  12: &[B3.11]
  13: [B3.3]([B3.8], [B3.10], [B3.12])
  14: int err = MPI_Graph_neighbors_count((MPI_Comm)this->the_real_comm, v2, &v3);
  15: err
  16: [B3.15] (ImplicitCastExpr, LValueToRValue, int)
  17: [B3.16] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.17]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

MPI::Graphcomm Dup() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v2
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Graphcomm)
   3: [B1.2] (CXXConstructExpr, class MPI::Graphcomm)
   4: return [B1.3];
   5: [B3.2].~Graphcomm() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1]) (ImplicitCastExpr, UncheckedDerivedToBase, const class MPI::Comm *)
   3: [B2.2]->Call_errhandler
   4: err
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B2.3]([B2.5])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Graphcomm)
   2: MPI::Graphcomm v2;
   3: MPI_Comm_dup
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, MPI_Comm *))
   5: this
   6: [B3.5] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   7: [B3.6]->the_real_comm
   8: [B3.7] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   9: (MPI_Comm)[B3.8] (CStyleCastExpr, NoOp, MPI_Comm)
  10: v2
  11: [B3.10] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm)
  12: [B3.11].the_real_comm
  13: &([B3.12])
  14: [B3.4]([B3.9], [B3.13])
  15: int err = MPI_Comm_dup((MPI_Comm)this->the_real_comm, &(v2.the_real_comm));
  16: err
  17: [B3.16] (ImplicitCastExpr, LValueToRValue, int)
  18: [B3.17] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.18]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual MPI::Graphcomm &Clone() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: MPI_Comm ncomm;
   2: MPI_Comm_dup
   3: [B1.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, MPI_Comm *))
   4: this
   5: [B1.4] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   6: [B1.5]->the_real_comm
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   8: (MPI_Comm)[B1.7] (CStyleCastExpr, NoOp, MPI_Comm)
   9: ncomm
  10: &[B1.9]
  11: [B1.3]([B1.8], [B1.10])
  12: CFGNewAllocator(MPI::Graphcomm *)
  13: ncomm
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  15: [B1.14] (CXXConstructExpr, class MPI::Graphcomm)
  16: new MPI::Graphcomm([B1.15])
  17: MPI::Graphcomm *clone = new MPI::Graphcomm(ncomm);
  18: clone
  19: [B1.18] (ImplicitCastExpr, LValueToRValue, class MPI::Graphcomm *)
  20: *[B1.19]
  21: return [B1.20];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline Cartcomm(MPI_Comm obj) : MPI::Intracomm(obj) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   3: [B1.2] (CXXConstructExpr, class MPI::Intracomm)
   4: Intracomm([B1.3]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline Cartcomm() : MPI::Intracomm() {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, class MPI::Intracomm)
   2: Intracomm([B1.1]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual ~MPI::Cartcomm() noexcept
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: ~Intracomm() (Base object destructor)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

Cartcomm(const MPI::Cartcomm &obj) : MPI::Intracomm(obj) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, DerivedToBase, const class MPI::Intracomm)
   3: [B1.2] (CXXConstructExpr, class MPI::Intracomm)
   4: Intracomm([B1.3]) (Base initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

MPI::Cartcomm &operator=(const MPI::Cartcomm &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm)
   3: [B1.2].the_real_comm
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   5: this
   6: [B1.5] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   7: [B1.6]->the_real_comm
   8: [B1.7] = [B1.4]
   9: this
  10: *[B1.9]
  11: return [B1.10];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline operator MPI_Comm *()
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   3: [B1.2]->the_real_comm
   4: &[B1.3]
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

inline operator MPI_Comm() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   3: [B1.2]->the_real_comm
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   5: return [B1.4];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

MPI::Cartcomm &operator=(const MPI_Comm &obj)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: obj
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   3: this
   4: [B1.3] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   5: [B1.4]->the_real_comm
   6: [B1.5] = [B1.2]
   7: this
   8: *[B1.7]
   9: return [B1.8];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

virtual void Get_coords(int v2, int v3, int v4[]) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, UncheckedDerivedToBase, const class MPI::Comm *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Cart_coords
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, int, int, int *))
   3: this
   4: [B2.3] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   5: [B2.4]->the_real_comm
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   7: (MPI_Comm)[B2.6] (CStyleCastExpr, NoOp, MPI_Comm)
   8: v2
   9: [B2.8] (ImplicitCastExpr, LValueToRValue, int)
  10: v3
  11: [B2.10] (ImplicitCastExpr, LValueToRValue, int)
  12: v4
  13: [B2.12] (ImplicitCastExpr, LValueToRValue, int *)
  14: [B2.2]([B2.7], [B2.9], [B2.11], [B2.13])
  15: int err = MPI_Cart_coords((MPI_Comm)this->the_real_comm, v2, v3, v4);
  16: err
  17: [B2.16] (ImplicitCastExpr, LValueToRValue, int)
  18: [B2.17] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.18]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual int Get_cart_rank(const int v2[]) const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v3
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1]) (ImplicitCastExpr, UncheckedDerivedToBase, const class MPI::Comm *)
   3: [B2.2]->Call_errhandler
   4: err
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B2.3]([B2.5])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: int v3;
   2: MPI_Cart_rank
   3: [B3.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, const int *, int *))
   4: this
   5: [B3.4] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   6: [B3.5]->the_real_comm
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   8: (MPI_Comm)[B3.7] (CStyleCastExpr, NoOp, MPI_Comm)
   9: v2
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, const int *)
  11: (const int *)[B3.10] (CStyleCastExpr, NoOp, const int *)
  12: v3
  13: &[B3.12]
  14: [B3.3]([B3.8], [B3.11], [B3.13])
  15: int err = MPI_Cart_rank((MPI_Comm)this->the_real_comm, (const int *)v2, &v3);
  16: err
  17: [B3.16] (ImplicitCastExpr, LValueToRValue, int)
  18: [B3.17] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.18]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual int Get_dim() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v2
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: return [B1.2];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1]) (ImplicitCastExpr, UncheckedDerivedToBase, const class MPI::Comm *)
   3: [B2.2]->Call_errhandler
   4: err
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B2.3]([B2.5])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: int v2;
   2: MPI_Cartdim_get
   3: [B3.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, int *))
   4: this
   5: [B3.4] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   6: [B3.5]->the_real_comm
   7: [B3.6] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   8: (MPI_Comm)[B3.7] (CStyleCastExpr, NoOp, MPI_Comm)
   9: v2
  10: &[B3.9]
  11: [B3.3]([B3.8], [B3.10])
  12: int err = MPI_Cartdim_get((MPI_Comm)this->the_real_comm, &v2);
  13: err
  14: [B3.13] (ImplicitCastExpr, LValueToRValue, int)
  15: [B3.14] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.15]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

MPI::Cartcomm Dup() const
 [B4 (ENTRY)]
   Succs (1): B3

 [B1]
   1: v2
   2: [B1.1] (ImplicitCastExpr, NoOp, const class MPI::Cartcomm)
   3: [B1.2] (CXXConstructExpr, class MPI::Cartcomm)
   4: return [B1.3];
   5: [B3.2].~Cartcomm() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1]) (ImplicitCastExpr, UncheckedDerivedToBase, const class MPI::Comm *)
   3: [B2.2]->Call_errhandler
   4: err
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B2.3]([B2.5])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1:  (CXXConstructExpr, class MPI::Cartcomm)
   2: MPI::Cartcomm v2;
   3: MPI_Comm_dup
   4: [B3.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, MPI_Comm *))
   5: this
   6: [B3.5] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   7: [B3.6]->the_real_comm
   8: [B3.7] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   9: (MPI_Comm)[B3.8] (CStyleCastExpr, NoOp, MPI_Comm)
  10: v2
  11: [B3.10] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm)
  12: [B3.11].the_real_comm
  13: &([B3.12])
  14: [B3.4]([B3.9], [B3.13])
  15: int err = MPI_Comm_dup((MPI_Comm)this->the_real_comm, &(v2.the_real_comm));
  16: err
  17: [B3.16] (ImplicitCastExpr, LValueToRValue, int)
  18: [B3.17] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.18]
   Preds (1): B4
   Succs (2): B2 B1

 [B0 (EXIT)]
   Preds (1): B1

virtual void Get_topo(int v2, int v3[], bool v4[], int v5[]) const
 [B8 (ENTRY)]
   Succs (1): B7

 [B1]
   1: l4
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int *)
   3: delete [] [B1.2]
   Preds (1): B4
   Succs (1): B0

 [B2]
   1: i4
   2: [B2.1]++
   Preds (1): B3
   Succs (1): B4

 [B3]
   1: l4
   2: [B3.1] (ImplicitCastExpr, LValueToRValue, int *)
   3: i4
   4: [B3.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B3.2][[B3.4]]
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, int)
   7: 0
   8: [B3.6] != [B3.7]
   9: v4
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, _Bool *)
  11: i4
  12: [B3.11] (ImplicitCastExpr, LValueToRValue, int)
  13: [B3.10][[B3.12]]
  14: [B3.13] = [B3.8]
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: i4
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: v2
   4: [B4.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B4.2] < [B4.4]
   T: for (...; [B4.5]; ...)
   Preds (2): B2 B5
   Succs (2): B3 B1

 [B5]
   1: int i4;
   2: 0
   3: i4
   4: [B5.3] = [B5.2]
   Preds (2): B6 B7
   Succs (1): B4

 [B6]
   1: this
   2: ([B6.1]) (ImplicitCastExpr, UncheckedDerivedToBase, const class MPI::Comm *)
   3: [B6.2]->Call_errhandler
   4: err
   5: [B6.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B6.3]([B6.5])
   Preds (1): B7
   Succs (1): B5

 [B7]
   1: v2
   2: [B7.1] (ImplicitCastExpr, LValueToRValue, int)
   3: CFGNewAllocator(int *)
   4: new int [[B7.2]]
   5: int *l4 = new int [v2];
   6: MPI_Cart_get
   7: [B7.6] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, int, int *, int *, int *))
   8: this
   9: [B7.8] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
  10: [B7.9]->the_real_comm
  11: [B7.10] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  12: (MPI_Comm)[B7.11] (CStyleCastExpr, NoOp, MPI_Comm)
  13: v2
  14: [B7.13] (ImplicitCastExpr, LValueToRValue, int)
  15: v3
  16: [B7.15] (ImplicitCastExpr, LValueToRValue, int *)
  17: l4
  18: [B7.17] (ImplicitCastExpr, LValueToRValue, int *)
  19: v5
  20: [B7.19] (ImplicitCastExpr, LValueToRValue, int *)
  21: [B7.7]([B7.12], [B7.14], [B7.16], [B7.18], [B7.20])
  22: int err = MPI_Cart_get((MPI_Comm)this->the_real_comm, v2, v3, l4, v5);
  23: err
  24: [B7.23] (ImplicitCastExpr, LValueToRValue, int)
  25: [B7.24] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B7.25]
   Preds (1): B8
   Succs (2): B6 B5

 [B0 (EXIT)]
   Preds (1): B1

virtual int Map(int v2, const int v3[], const bool v4[]) const
 [B11 (ENTRY)]
   Succs (1): B10

 [B1]
   1: l4
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int *)
   3: delete [] [B1.2]
   4: v5
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: return [B1.5];
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1]) (ImplicitCastExpr, UncheckedDerivedToBase, const class MPI::Comm *)
   3: [B2.2]->Call_errhandler
   4: err
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B2.3]([B2.5])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: MPI_Cart_map
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, int, const int *, const int *, int *))
   3: this
   4: [B3.3] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   5: [B3.4]->the_real_comm
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   7: (MPI_Comm)[B3.6] (CStyleCastExpr, NoOp, MPI_Comm)
   8: v2
   9: [B3.8] (ImplicitCastExpr, LValueToRValue, int)
  10: v3
  11: [B3.10] (ImplicitCastExpr, LValueToRValue, const int *)
  12: (const int *)[B3.11] (CStyleCastExpr, NoOp, const int *)
  13: l4
  14: [B3.13] (ImplicitCastExpr, LValueToRValue, int *)
  15: [B3.14] (ImplicitCastExpr, NoOp, const int *)
  16: v5
  17: &[B3.16]
  18: [B3.2]([B3.7], [B3.9], [B3.12], [B3.15], [B3.17])
  19: int err = MPI_Cart_map((MPI_Comm)this->the_real_comm, v2, (const int *)v3, l4, &v5);
  20: err
  21: [B3.20] (ImplicitCastExpr, LValueToRValue, int)
  22: [B3.21] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.22]
   Preds (1): B9
   Succs (2): B2 B1

 [B4]
   1: i4
   2: [B4.1]++
   Preds (1): B5
   Succs (1): B9

 [B5]
   1: [B8.10] ? [B6.1] : [B7.1]
   2: l4
   3: [B5.2] (ImplicitCastExpr, LValueToRValue, int *)
   4: i4
   5: [B5.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B5.3][[B5.5]]
   7: [B5.6] = [B5.1]
   Preds (2): B6 B7
   Succs (1): B4

 [B6]
   1: 1
   Preds (1): B8
   Succs (1): B5

 [B7]
   1: 0
   Preds (1): B8
   Succs (1): B5

 [B8]
   1: v4
   2: [B8.1] (ImplicitCastExpr, LValueToRValue, const _Bool *)
   3: i4
   4: [B8.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B8.2][[B8.4]]
   6: [B8.5] (ImplicitCastExpr, LValueToRValue, _Bool)
   7: [B8.6] (ImplicitCastExpr, IntegralCast, int)
   8: true
   9: [B8.8] (ImplicitCastExpr, IntegralCast, int)
  10: [B8.7] == [B8.9]
   T: [B8.10] ? ... : ...
   Preds (1): B9
   Succs (2): B6 B7

 [B9]
   1: i4
   2: [B9.1] (ImplicitCastExpr, LValueToRValue, int)
   3: v2
   4: [B9.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B9.2] < [B9.4]
   T: for (...; [B9.5]; ...)
   Preds (2): B4 B10
   Succs (2): B8 B3

 [B10]
   1: int v5;
   2: v2
   3: [B10.2] (ImplicitCastExpr, LValueToRValue, int)
   4: CFGNewAllocator(int *)
   5: new int [[B10.3]]
   6: int *l4 = new int [v2];
   7: int i4;
   8: 0
   9: i4
  10: [B10.9] = [B10.8]
   Preds (1): B11
   Succs (1): B9

 [B0 (EXIT)]
   Preds (1): B1

virtual MPI::Cartcomm Sub(const bool v2[]) const
 [B11 (ENTRY)]
   Succs (1): B10

 [B1]
   1: l2
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int *)
   3: delete [] [B1.2]
   4: v3
   5: [B1.4] (ImplicitCastExpr, NoOp, const class MPI::Cartcomm)
   6: [B1.5] (CXXConstructExpr, class MPI::Cartcomm)
   7: return [B1.6];
   8: [B10.2].~Cartcomm() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: this
   2: ([B2.1]) (ImplicitCastExpr, UncheckedDerivedToBase, const class MPI::Comm *)
   3: [B2.2]->Call_errhandler
   4: err
   5: [B2.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B2.3]([B2.5])
   Preds (1): B3
   Succs (1): B1

 [B3]
   1: MPI_Cart_sub
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, const int *, MPI_Comm *))
   3: this
   4: [B3.3] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   5: [B3.4]->the_real_comm
   6: [B3.5] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   7: (MPI_Comm)[B3.6] (CStyleCastExpr, NoOp, MPI_Comm)
   8: l2
   9: [B3.8] (ImplicitCastExpr, LValueToRValue, int *)
  10: [B3.9] (ImplicitCastExpr, NoOp, const int *)
  11: v3
  12: [B3.11] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm)
  13: [B3.12].the_real_comm
  14: &([B3.13])
  15: [B3.2]([B3.7], [B3.10], [B3.14])
  16: int err = MPI_Cart_sub((MPI_Comm)this->the_real_comm, l2, &(v3.the_real_comm));
  17: err
  18: [B3.17] (ImplicitCastExpr, LValueToRValue, int)
  19: [B3.18] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B3.19]
   Preds (1): B9
   Succs (2): B2 B1

 [B4]
   1: i2
   2: [B4.1]++
   Preds (1): B5
   Succs (1): B9

 [B5]
   1: [B8.10] ? [B6.1] : [B7.1]
   2: l2
   3: [B5.2] (ImplicitCastExpr, LValueToRValue, int *)
   4: i2
   5: [B5.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B5.3][[B5.5]]
   7: [B5.6] = [B5.1]
   Preds (2): B6 B7
   Succs (1): B4

 [B6]
   1: 1
   Preds (1): B8
   Succs (1): B5

 [B7]
   1: 0
   Preds (1): B8
   Succs (1): B5

 [B8]
   1: v2
   2: [B8.1] (ImplicitCastExpr, LValueToRValue, const _Bool *)
   3: i2
   4: [B8.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B8.2][[B8.4]]
   6: [B8.5] (ImplicitCastExpr, LValueToRValue, _Bool)
   7: [B8.6] (ImplicitCastExpr, IntegralCast, int)
   8: true
   9: [B8.8] (ImplicitCastExpr, IntegralCast, int)
  10: [B8.7] == [B8.9]
   T: [B8.10] ? ... : ...
   Preds (1): B9
   Succs (2): B6 B7

 [B9]
   1: i2
   2: [B9.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 10
   4: [B9.2] < [B9.3]
   T: for (...; [B9.4]; ...)
   Preds (2): B4 B10
   Succs (2): B8 B3

 [B10]
   1:  (CXXConstructExpr, class MPI::Cartcomm)
   2: MPI::Cartcomm v3;
   3: 10
   4: CFGNewAllocator(int *)
   5: new int [[B10.3]]
   6: int *l2 = new int [10];
   7: int i2;
   8: 0
   9: i2
  10: [B10.9] = [B10.8]
   Preds (1): B11
   Succs (1): B9

 [B0 (EXIT)]
   Preds (1): B1

virtual void Shift(int v2, int v3, int &v4, int &v5) const
 [B3 (ENTRY)]
   Succs (1): B2

 [B1]
   1: this
   2: ([B1.1]) (ImplicitCastExpr, UncheckedDerivedToBase, const class MPI::Comm *)
   3: [B1.2]->Call_errhandler
   4: err
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B1.3]([B1.5])
   Preds (1): B2
   Succs (1): B0

 [B2]
   1: MPI_Cart_shift
   2: [B2.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, int, int, int *, int *))
   3: this
   4: [B2.3] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   5: [B2.4]->the_real_comm
   6: [B2.5] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   7: (MPI_Comm)[B2.6] (CStyleCastExpr, NoOp, MPI_Comm)
   8: v2
   9: [B2.8] (ImplicitCastExpr, LValueToRValue, int)
  10: v3
  11: [B2.10] (ImplicitCastExpr, LValueToRValue, int)
  12: v4
  13: &[B2.12]
  14: v5
  15: &[B2.14]
  16: [B2.2]([B2.7], [B2.9], [B2.11], [B2.13], [B2.15])
  17: int err = MPI_Cart_shift((MPI_Comm)this->the_real_comm, v2, v3, &v4, &v5);
  18: err
  19: [B2.18] (ImplicitCastExpr, LValueToRValue, int)
  20: [B2.19] (ImplicitCastExpr, IntegralToBoolean, _Bool)
   T: if [B2.20]
   Preds (1): B3
   Succs (2): B1 B0

 [B0 (EXIT)]
   Preds (2): B1 B2

virtual MPI::Cartcomm &Clone() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: MPI_Comm ncomm;
   2: MPI_Comm_dup
   3: [B1.2] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, MPI_Comm *))
   4: this
   5: [B1.4] (ImplicitCastExpr, UncheckedDerivedToBase, class MPI::Comm *)
   6: [B1.5]->the_real_comm
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
   8: (MPI_Comm)[B1.7] (CStyleCastExpr, NoOp, MPI_Comm)
   9: ncomm
  10: &[B1.9]
  11: [B1.3]([B1.8], [B1.10])
  12: CFGNewAllocator(MPI::Cartcomm *)
  13: ncomm
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, MPI_Comm)
  15: [B1.14] (CXXConstructExpr, class MPI::Cartcomm)
  16: new MPI::Cartcomm([B1.15])
  17: MPI::Cartcomm *clone = new MPI::Cartcomm(ncomm);
  18: clone
  19: [B1.18] (ImplicitCastExpr, LValueToRValue, class MPI::Cartcomm *)
  20: *[B1.19]
  21: return [B1.20];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

Matrix() : data(), _rows(0), _columns(0) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, std::vector<double>)
   2: data([B1.1]) (Member initializer)
   3: 0
   4: [B1.3] (ImplicitCastExpr, IntegralCast, size_t)
   5: _rows([B1.4]) (Member initializer)
   6: 0
   7: [B1.6] (ImplicitCastExpr, IntegralCast, size_t)
   8: _columns([B1.7]) (Member initializer)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

Matrix(size_t rows, size_t columns, double init_value = 0) : data(), _rows(rows), _columns(columns) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, std::vector<double>)
   2: data([B1.1]) (Member initializer)
   3: rows
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, size_t)
   5: _rows([B1.4]) (Member initializer)
   6: columns
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, size_t)
   8: _columns([B1.7]) (Member initializer)
   9: this
  10: [B1.9]->data
  11: [B1.10].resize
  12: this
  13: [B1.12]->_rows
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, size_t)
  15: this
  16: [B1.15]->_columns
  17: [B1.16] (ImplicitCastExpr, LValueToRValue, size_t)
  18: [B1.14] * [B1.17]
  19: init_value
  20: [B1.19] (ImplicitCastExpr, NoOp, const double)
  21: [B1.11]([B1.18], [B1.20])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

Matrix(size_t rows, size_t columns, double *values) : data(), _rows(rows), _columns(columns) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, std::vector<double>)
   2: data([B1.1]) (Member initializer)
   3: rows
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, size_t)
   5: _rows([B1.4]) (Member initializer)
   6: columns
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, size_t)
   8: _columns([B1.7]) (Member initializer)
   9: this
  10: [B1.9]->data
  11: [B1.10].assign
  12: values
  13: [B1.12] (ImplicitCastExpr, LValueToRValue, double *)
  14: values
  15: [B1.14] (ImplicitCastExpr, LValueToRValue, double *)
  16: rows
  17: [B1.16] (ImplicitCastExpr, LValueToRValue, size_t)
  18: columns
  19: [B1.18] (ImplicitCastExpr, LValueToRValue, size_t)
  20: [B1.17] * [B1.19]
  21: [B1.15] + [B1.20]
  22: [B1.11]([B1.13], [B1.21])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

Matrix(size_t rows, size_t columns, std::initializer_list<double> values) : data(), _rows(rows), _columns(columns) {}
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1:  (CXXConstructExpr, std::vector<double>)
   2: data([B1.1]) (Member initializer)
   3: rows
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, size_t)
   5: _rows([B1.4]) (Member initializer)
   6: columns
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, size_t)
   8: _columns([B1.7]) (Member initializer)
   9: this
  10: [B1.9]->data
  11: [B1.10].assign
  12: values
  13: [B1.12] (ImplicitCastExpr, NoOp, const class std::initializer_list<double>)
  14: [B1.13].begin
  15: [B1.14]()
  16: values
  17: [B1.16] (ImplicitCastExpr, NoOp, const class std::initializer_list<double>)
  18: [B1.17].end
  19: [B1.18]()
  20: [B1.11]([B1.15], [B1.19])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

Matrix operator*(const Matrix &other)
 [B12 (ENTRY)]
   Succs (1): B11

 [B1]
   1: result
   2: [B1.1] (ImplicitCastExpr, NoOp, class Matrix)
   3: [B1.2] (CXXConstructExpr, class Matrix)
   4: return [B1.3];
   5: [B11.9].~Matrix() (Implicit destructor)
   Preds (1): B10
   Succs (1): B0

 [B2]
   1: i
   2: [B2.1]++
   Preds (1): B8
   Succs (1): B10

 [B3]
   1: j
   2: [B3.1]++
   Preds (1): B6
   Succs (1): B8

 [B4]
   1: k
   2: [B4.1]++
   Preds (1): B5
   Succs (1): B6

 [B5]
   1: operator[]
   2: [B5.1] (ImplicitCastExpr, FunctionToPointerDecay, double *(*)(int))
   3: result
   4: i
   5: [B5.4] (ImplicitCastExpr, LValueToRValue, size_t)
   6: [B5.5] (ImplicitCastExpr, IntegralCast, int)
   7: [B5.3][[B5.6]] (OperatorCall)
   8: j
   9: [B5.8] (ImplicitCastExpr, LValueToRValue, size_t)
  10: [B5.7][[B5.9]]
  11: operator[]
  12: [B5.11] (ImplicitCastExpr, FunctionToPointerDecay, double *(*)(int))
  13: this
  14: *[B5.13]
  15: i
  16: [B5.15] (ImplicitCastExpr, LValueToRValue, size_t)
  17: [B5.16] (ImplicitCastExpr, IntegralCast, int)
  18: ([B5.14])[[B5.17]] (OperatorCall)
  19: k
  20: [B5.19] (ImplicitCastExpr, LValueToRValue, size_t)
  21: [B5.18][[B5.20]]
  22: [B5.21] (ImplicitCastExpr, LValueToRValue, double)
  23: operator[]
  24: [B5.23] (ImplicitCastExpr, FunctionToPointerDecay, const double *(*)(int) const)
  25: other
  26: k
  27: [B5.26] (ImplicitCastExpr, LValueToRValue, size_t)
  28: [B5.27] (ImplicitCastExpr, IntegralCast, int)
  29: [B5.25][[B5.28]] (OperatorCall)
  30: j
  31: [B5.30] (ImplicitCastExpr, LValueToRValue, size_t)
  32: [B5.29][[B5.31]]
  33: [B5.32] (ImplicitCastExpr, LValueToRValue, double)
  34: [B5.22] * [B5.33]
  35: [B5.10] += [B5.34]
   Preds (1): B6
   Succs (1): B4

 [B6]
   1: k
   2: [B6.1] (ImplicitCastExpr, LValueToRValue, size_t)
   3: this
   4: [B6.3]->_columns
   5: [B6.4] (ImplicitCastExpr, LValueToRValue, size_t)
   6: [B6.2] < [B6.5]
   T: for (...; [B6.6]; ...)
   Preds (2): B4 B7
   Succs (2): B5 B3

 [B7]
   1: 0
   2: [B7.1] (ImplicitCastExpr, IntegralCast, size_t)
   3: size_t k = 0;
   Preds (1): B8
   Succs (1): B6

 [B8]
   1: j
   2: [B8.1] (ImplicitCastExpr, LValueToRValue, size_t)
   3: other
   4: [B8.3].cols
   5: [B8.4]()
   6: [B8.2] < [B8.5]
   T: for (...; [B8.6]; ...)
   Preds (2): B3 B9
   Succs (2): B7 B2

 [B9]
   1: 0
   2: [B9.1] (ImplicitCastExpr, IntegralCast, size_t)
   3: size_t j = 0;
   Preds (1): B10
   Succs (1): B8

 [B10]
   1: i
   2: [B10.1] (ImplicitCastExpr, LValueToRValue, size_t)
   3: this
   4: [B10.3]->_rows
   5: [B10.4] (ImplicitCastExpr, LValueToRValue, size_t)
   6: [B10.2] < [B10.5]
   T: for (...; [B10.6]; ...)
   Preds (2): B2 B11
   Succs (2): B9 B1

 [B11]
   1: this
   2: [B11.1]->_rows
   3: [B11.2] (ImplicitCastExpr, LValueToRValue, size_t)
   4: this
   5: [B11.4]->_columns
   6: [B11.5] (ImplicitCastExpr, LValueToRValue, size_t)
   7: 
   8: [B11.3], [B11.6] (CXXConstructExpr, class Matrix)
   9: Matrix result(this->_rows, this->_columns);
  10: 0
  11: [B11.10] (ImplicitCastExpr, IntegralCast, size_t)
  12: size_t i = 0;
   Preds (1): B12
   Succs (1): B10

 [B0 (EXIT)]
   Preds (1): B1

Matrix &operator+=(const Matrix &other)
 [B9 (ENTRY)]
   Succs (1): B8

 [B1]
   1: this
   2: *[B1.1]
   3: return [B1.2];
   Preds (1): B7
   Succs (1): B0

 [B2]
   1: i
   2: [B2.1]++
   Preds (1): B5
   Succs (1): B7

 [B3]
   1: j
   2: [B3.1]++
   Preds (1): B4
   Succs (1): B5

 [B4]
   1: operator[]
   2: [B4.1] (ImplicitCastExpr, FunctionToPointerDecay, double *(*)(int))
   3: this
   4: *[B4.3]
   5: i
   6: [B4.5] (ImplicitCastExpr, LValueToRValue, size_t)
   7: [B4.6] (ImplicitCastExpr, IntegralCast, int)
   8: ([B4.4])[[B4.7]] (OperatorCall)
   9: j
  10: [B4.9] (ImplicitCastExpr, LValueToRValue, size_t)
  11: [B4.8][[B4.10]]
  12: operator[]
  13: [B4.12] (ImplicitCastExpr, FunctionToPointerDecay, const double *(*)(int) const)
  14: other
  15: i
  16: [B4.15] (ImplicitCastExpr, LValueToRValue, size_t)
  17: [B4.16] (ImplicitCastExpr, IntegralCast, int)
  18: [B4.14][[B4.17]] (OperatorCall)
  19: j
  20: [B4.19] (ImplicitCastExpr, LValueToRValue, size_t)
  21: [B4.18][[B4.20]]
  22: [B4.21] (ImplicitCastExpr, LValueToRValue, double)
  23: [B4.11] += [B4.22]
   Preds (1): B5
   Succs (1): B3

 [B5]
   1: j
   2: [B5.1] (ImplicitCastExpr, LValueToRValue, size_t)
   3: this
   4: [B5.3]->_columns
   5: [B5.4] (ImplicitCastExpr, LValueToRValue, size_t)
   6: [B5.2] < [B5.5]
   T: for (...; [B5.6]; ...)
   Preds (2): B3 B6
   Succs (2): B4 B2

 [B6]
   1: 0
   2: [B6.1] (ImplicitCastExpr, IntegralCast, size_t)
   3: size_t j = 0;
   Preds (1): B7
   Succs (1): B5

 [B7]
   1: i
   2: [B7.1] (ImplicitCastExpr, LValueToRValue, size_t)
   3: this
   4: [B7.3]->_rows
   5: [B7.4] (ImplicitCastExpr, LValueToRValue, size_t)
   6: [B7.2] < [B7.5]
   T: for (...; [B7.6]; ...)
   Preds (2): B2 B8
   Succs (2): B6 B1

 [B8]
   1: 0
   2: [B8.1] (ImplicitCastExpr, IntegralCast, size_t)
   3: size_t i = 0;
   Preds (1): B9
   Succs (1): B7

 [B0 (EXIT)]
   Preds (1): B1

const double *operator[](int row) const
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: ([B4.7]) ? [B2.2] : [B3.12]
   2: operator[]
   3: [B1.2] (ImplicitCastExpr, FunctionToPointerDecay, const_reference (*)(size_type) const)
   4: this
   5: [B1.4]->data
   6: row
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: [B1.7] (ImplicitCastExpr, IntegralCast, unsigned long)
   9: this
  10: [B1.9]->_columns
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, size_t)
  12: [B1.8] * [B1.11]
  13: [B1.5][[B1.12]] (OperatorCall)
  14: &[B1.13]
  15: return [B1.14];
   Preds (2): B2 B3(Unreachable)
   Succs (1): B0

 [B2]
   1: 0
   2: static_cast<void>([B2.1]) (CXXStaticCastExpr, ToVoid, void)
   Preds (1): B4
   Succs (1): B1

 [B3 (NORETURN)]
   1: __assert_fail
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw())
   3: "row < _rows"
   4: [B3.3] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   5: "./matrix.h"
   6: [B3.5] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   7: 62
   8: [B3.7] (ImplicitCastExpr, IntegralCast, unsigned int)
   9: "const double *Matrix::operator[](int) const"
  10: __PRETTY_FUNCTION__
  11: [B3.10] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
  12: [B3.2]([B3.4], [B3.6], [B3.8], [B3.11])
   Preds (1): B4
   Succs (1): B0

 [B4]
   1: row
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: [B4.2] (ImplicitCastExpr, IntegralCast, unsigned long)
   4: this
   5: [B4.4]->_rows
   6: [B4.5] (ImplicitCastExpr, LValueToRValue, size_t)
   7: [B4.3] < [B4.6]
   T: ([B4.7]) ? ... : ...
   Preds (1): B5
   Succs (2): B2 B3

 [B0 (EXIT)]
   Preds (2): B1 B3

double *operator[](int row)
 [B5 (ENTRY)]
   Succs (1): B4

 [B1]
   1: ([B4.7]) ? [B2.2] : [B3.12]
   2: operator[]
   3: [B1.2] (ImplicitCastExpr, FunctionToPointerDecay, reference (*)(size_type))
   4: this
   5: [B1.4]->data
   6: row
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, int)
   8: [B1.7] (ImplicitCastExpr, IntegralCast, unsigned long)
   9: this
  10: [B1.9]->_columns
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, size_t)
  12: [B1.8] * [B1.11]
  13: [B1.5][[B1.12]] (OperatorCall)
  14: &[B1.13]
  15: return [B1.14];
   Preds (2): B2 B3(Unreachable)
   Succs (1): B0

 [B2]
   1: 0
   2: static_cast<void>([B2.1]) (CXXStaticCastExpr, ToVoid, void)
   Preds (1): B4
   Succs (1): B1

 [B3 (NORETURN)]
   1: __assert_fail
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw())
   3: "row < _rows"
   4: [B3.3] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   5: "./matrix.h"
   6: [B3.5] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
   7: 67
   8: [B3.7] (ImplicitCastExpr, IntegralCast, unsigned int)
   9: "double *Matrix::operator[](int)"
  10: __PRETTY_FUNCTION__
  11: [B3.10] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
  12: [B3.2]([B3.4], [B3.6], [B3.8], [B3.11])
   Preds (1): B4
   Succs (1): B0

 [B4]
   1: row
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, int)
   3: [B4.2] (ImplicitCastExpr, IntegralCast, unsigned long)
   4: this
   5: [B4.4]->_rows
   6: [B4.5] (ImplicitCastExpr, LValueToRValue, size_t)
   7: [B4.3] < [B4.6]
   T: ([B4.7]) ? ... : ...
   Preds (1): B5
   Succs (2): B2 B3

 [B0 (EXIT)]
   Preds (2): B1 B3

Matrix extract_n(int r, int c, int rc, int cc) const
 [B9 (ENTRY)]
   Succs (1): B8

 [B1]
   1: sub
   2: [B1.1] (ImplicitCastExpr, NoOp, class Matrix)
   3: [B1.2] (CXXConstructExpr, class Matrix)
   4: return [B1.3];
   5: [B8.9].~Matrix() (Implicit destructor)
   Preds (1): B7
   Succs (1): B0

 [B2]
   1: i
   2: [B2.1]++
   Preds (1): B5
   Succs (1): B7

 [B3]
   1: j
   2: [B3.1]++
   Preds (1): B4
   Succs (1): B5

 [B4]
   1: operator[]
   2: [B4.1] (ImplicitCastExpr, FunctionToPointerDecay, const double *(*)(int) const)
   3: this
   4: *[B4.3]
   5: i
   6: [B4.5] (ImplicitCastExpr, LValueToRValue, size_t)
   7: r
   8: [B4.7] (ImplicitCastExpr, LValueToRValue, int)
   9: [B4.8] (ImplicitCastExpr, IntegralCast, unsigned long)
  10: [B4.6] + [B4.9]
  11: [B4.10] (ImplicitCastExpr, IntegralCast, int)
  12: ([B4.4])[[B4.11]] (OperatorCall)
  13: j
  14: [B4.13] (ImplicitCastExpr, LValueToRValue, size_t)
  15: c
  16: [B4.15] (ImplicitCastExpr, LValueToRValue, int)
  17: [B4.16] (ImplicitCastExpr, IntegralCast, unsigned long)
  18: [B4.14] + [B4.17]
  19: [B4.12][[B4.18]]
  20: [B4.19] (ImplicitCastExpr, LValueToRValue, double)
  21: operator[]
  22: [B4.21] (ImplicitCastExpr, FunctionToPointerDecay, double *(*)(int))
  23: sub
  24: i
  25: [B4.24] (ImplicitCastExpr, LValueToRValue, size_t)
  26: [B4.25] (ImplicitCastExpr, IntegralCast, int)
  27: [B4.23][[B4.26]] (OperatorCall)
  28: j
  29: [B4.28] (ImplicitCastExpr, LValueToRValue, size_t)
  30: [B4.27][[B4.29]]
  31: [B4.30] = [B4.20]
   Preds (1): B5
   Succs (1): B3

 [B5]
   1: j
   2: [B5.1] (ImplicitCastExpr, LValueToRValue, size_t)
   3: cc
   4: [B5.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B5.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: [B5.2] < [B5.5]
   T: for (...; [B5.6]; ...)
   Preds (2): B3 B6
   Succs (2): B4 B2

 [B6]
   1: 0
   2: [B6.1] (ImplicitCastExpr, IntegralCast, size_t)
   3: size_t j = 0;
   Preds (1): B7
   Succs (1): B5

 [B7]
   1: i
   2: [B7.1] (ImplicitCastExpr, LValueToRValue, size_t)
   3: rc
   4: [B7.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B7.4] (ImplicitCastExpr, IntegralCast, unsigned long)
   6: [B7.2] < [B7.5]
   T: for (...; [B7.6]; ...)
   Preds (2): B2 B8
   Succs (2): B6 B1

 [B8]
   1: rc
   2: [B8.1] (ImplicitCastExpr, LValueToRValue, int)
   3: [B8.2] (ImplicitCastExpr, IntegralCast, size_t)
   4: cc
   5: [B8.4] (ImplicitCastExpr, LValueToRValue, int)
   6: [B8.5] (ImplicitCastExpr, IntegralCast, size_t)
   7: 
   8: [B8.3], [B8.6] (CXXConstructExpr, class Matrix)
   9: Matrix sub(rc, cc);
  10: 0
  11: [B8.10] (ImplicitCastExpr, IntegralCast, size_t)
  12: size_t i = 0;
   Preds (1): B9
   Succs (1): B7

 [B0 (EXIT)]
   Preds (1): B1

void insert(const Matrix &other, int r, int c)
 [B8 (ENTRY)]
   Succs (1): B7

 [B1]
   1: i
   2: [B1.1]++
   Preds (1): B4
   Succs (1): B6

 [B2]
   1: j
   2: [B2.1]++
   Preds (1): B3
   Succs (1): B4

 [B3]
   1: operator[]
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, const double *(*)(int) const)
   3: other
   4: i
   5: [B3.4] (ImplicitCastExpr, LValueToRValue, size_t)
   6: [B3.5] (ImplicitCastExpr, IntegralCast, int)
   7: [B3.3][[B3.6]] (OperatorCall)
   8: j
   9: [B3.8] (ImplicitCastExpr, LValueToRValue, size_t)
  10: [B3.7][[B3.9]]
  11: [B3.10] (ImplicitCastExpr, LValueToRValue, double)
  12: operator[]
  13: [B3.12] (ImplicitCastExpr, FunctionToPointerDecay, double *(*)(int))
  14: this
  15: *[B3.14]
  16: i
  17: [B3.16] (ImplicitCastExpr, LValueToRValue, size_t)
  18: r
  19: [B3.18] (ImplicitCastExpr, LValueToRValue, int)
  20: [B3.19] (ImplicitCastExpr, IntegralCast, unsigned long)
  21: [B3.17] + [B3.20]
  22: [B3.21] (ImplicitCastExpr, IntegralCast, int)
  23: ([B3.15])[[B3.22]] (OperatorCall)
  24: j
  25: [B3.24] (ImplicitCastExpr, LValueToRValue, size_t)
  26: c
  27: [B3.26] (ImplicitCastExpr, LValueToRValue, int)
  28: [B3.27] (ImplicitCastExpr, IntegralCast, unsigned long)
  29: [B3.25] + [B3.28]
  30: [B3.23][[B3.29]]
  31: [B3.30] = [B3.11]
   Preds (1): B4
   Succs (1): B2

 [B4]
   1: j
   2: [B4.1] (ImplicitCastExpr, LValueToRValue, size_t)
   3: other
   4: [B4.3].cols
   5: [B4.4]()
   6: [B4.2] < [B4.5]
   T: for (...; [B4.6]; ...)
   Preds (2): B2 B5
   Succs (2): B3 B1

 [B5]
   1: 0
   2: [B5.1] (ImplicitCastExpr, IntegralCast, size_t)
   3: size_t j = 0;
   Preds (1): B6
   Succs (1): B4

 [B6]
   1: i
   2: [B6.1] (ImplicitCastExpr, LValueToRValue, size_t)
   3: other
   4: [B6.3].rows
   5: [B6.4]()
   6: [B6.2] < [B6.5]
   T: for (...; [B6.6]; ...)
   Preds (2): B1 B7
   Succs (2): B5 B0

 [B7]
   1: 0
   2: [B7.1] (ImplicitCastExpr, IntegralCast, size_t)
   3: size_t i = 0;
   Preds (1): B8
   Succs (1): B6

 [B0 (EXIT)]
   Preds (1): B6

size_t rows() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->_rows
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, size_t)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

size_t cols() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: this
   2: [B1.1]->_columns
   3: [B1.2] (ImplicitCastExpr, LValueToRValue, size_t)
   4: return [B1.3];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

size_t get_byte_size() const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: 2
   2: [B1.1] (ImplicitCastExpr, IntegralCast, unsigned long)
   3: sizeof(size_t)
   4: [B1.2] * [B1.3]
   5: this
   6: [B1.5]->_rows
   7: [B1.6] (ImplicitCastExpr, LValueToRValue, size_t)
   8: this
   9: [B1.8]->_columns
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, size_t)
  11: [B1.7] * [B1.10]
  12: sizeof(double)
  13: [B1.11] * [B1.12]
  14: [B1.4] + [B1.13]
  15: return [B1.14];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void serialize(char *data) const
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: data
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, char *)
   3: char *data_p = data;
   4: std::copy
   5: [B1.4] (ImplicitCastExpr, FunctionToPointerDecay, unsigned long *(*)(const unsigned long *, const unsigned long *, unsigned long *))
   6: this
   7: [B1.6]->_rows
   8: &[B1.7]
   9: this
  10: [B1.9]->_rows
  11: &[B1.10]
  12: 1
  13: [B1.11] + [B1.12]
  14: data_p
  15: [B1.14] (ImplicitCastExpr, LValueToRValue, char *)
  16: (size_t *)[B1.15] (CStyleCastExpr, BitCast, size_t *)
  17: [B1.5]([B1.8], [B1.13], [B1.16])
  18: data_p
  19: sizeof(size_t)
  20: [B1.18] += [B1.19]
  21: std::copy
  22: [B1.21] (ImplicitCastExpr, FunctionToPointerDecay, unsigned long *(*)(const unsigned long *, const unsigned long *, unsigned long *))
  23: this
  24: [B1.23]->_columns
  25: &[B1.24]
  26: this
  27: [B1.26]->_columns
  28: &[B1.27]
  29: 1
  30: [B1.28] + [B1.29]
  31: data_p
  32: [B1.31] (ImplicitCastExpr, LValueToRValue, char *)
  33: (size_t *)[B1.32] (CStyleCastExpr, BitCast, size_t *)
  34: [B1.22]([B1.25], [B1.30], [B1.33])
  35: data_p
  36: sizeof(size_t)
  37: [B1.35] += [B1.36]
  38: std::copy
  39: [B1.38] (ImplicitCastExpr, FunctionToPointerDecay, double *(*)(class std::__1::__wrap_iter<const double *>, class std::__1::__wrap_iter<const double *>, double *))
  40: this
  41: [B1.40]->data
  42: [B1.41].begin
  43: [B1.42]()
  44: [B1.43]
  45: [B1.44] (CXXConstructExpr, class std::__1::__wrap_iter<const double *>)
  46: this
  47: [B1.46]->data
  48: [B1.47].end
  49: [B1.48]()
  50: [B1.49]
  51: [B1.50] (CXXConstructExpr, class std::__1::__wrap_iter<const double *>)
  52: data_p
  53: [B1.52] (ImplicitCastExpr, LValueToRValue, char *)
  54: (double *)[B1.53] (CStyleCastExpr, BitCast, double *)
  55: [B1.39]([B1.45], [B1.51], [B1.54])
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

void deserialize(const char *data)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: data
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, const char *)
   3: (size_t *)[B1.2] (CStyleCastExpr, BitCast, size_t *)
   4: size_t *sizes_p = (size_t *)data;
   5: std::copy
   6: [B1.5] (ImplicitCastExpr, FunctionToPointerDecay, unsigned long *(*)(unsigned long *, unsigned long *, unsigned long *))
   7: sizes_p
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, size_t *)
   9: sizes_p
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, size_t *)
  11: 1
  12: [B1.10] + [B1.11]
  13: this
  14: [B1.13]->_rows
  15: &[B1.14]
  16: [B1.6]([B1.8], [B1.12], [B1.15])
  17: sizes_p
  18: 1
  19: [B1.17] += [B1.18]
  20: std::copy
  21: [B1.20] (ImplicitCastExpr, FunctionToPointerDecay, unsigned long *(*)(unsigned long *, unsigned long *, unsigned long *))
  22: sizes_p
  23: [B1.22] (ImplicitCastExpr, LValueToRValue, size_t *)
  24: sizes_p
  25: [B1.24] (ImplicitCastExpr, LValueToRValue, size_t *)
  26: 1
  27: [B1.25] + [B1.26]
  28: this
  29: [B1.28]->_columns
  30: &[B1.29]
  31: [B1.21]([B1.23], [B1.27], [B1.30])
  32: sizes_p
  33: 1
  34: [B1.32] += [B1.33]
  35: this
  36: [B1.35]->_rows
  37: [B1.36] (ImplicitCastExpr, LValueToRValue, size_t)
  38: this
  39: [B1.38]->_columns
  40: [B1.39] (ImplicitCastExpr, LValueToRValue, size_t)
  41: [B1.37] * [B1.40]
  42: size_t size = this->_rows * this->_columns;
  43: sizes_p
  44: [B1.43] (ImplicitCastExpr, LValueToRValue, size_t *)
  45: (double *)[B1.44] (CStyleCastExpr, BitCast, double *)
  46: double *data_p = (double *)sizes_p;
  47: operator=
  48: [B1.47] (ImplicitCastExpr, FunctionToPointerDecay, class std::__1::vector<double, class std::__1::allocator<double> > &(*)(class std::__1::vector<double, class std::__1::allocator<double> > &&) noexcept(__alloc_traits::propagate_on_container_move_assignment::value && is_nothrow_move_assignable<allocator_type>::value))
  49: this
  50: [B1.49]->data
  51: data_p
  52: [B1.51] (ImplicitCastExpr, LValueToRValue, double *)
  53: data_p
  54: [B1.53] (ImplicitCastExpr, LValueToRValue, double *)
  55: size
  56: [B1.55] (ImplicitCastExpr, LValueToRValue, size_t)
  57: [B1.54] + [B1.56]
  58: std::vector<double>([B1.52], [B1.57]) (CXXConstructExpr, std::vector<double>)
  59: [B1.58] (BindTemporary)
  60: [B1.59]
  61: [B1.50] = [B1.60] (OperatorCall)
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

std::ostream &operator<<(std::ostream &os, const Matrix &m)
 [B10 (ENTRY)]
   Succs (1): B9

 [B1]
   1: operator<<
   2: [B1.1] (ImplicitCastExpr, FunctionToPointerDecay, class std::__1::basic_ostream<char> &(*)(class std::__1::basic_ostream<char> &(*)(class std::__1::basic_ostream<char> &)))
   3: os
   4: std::endl
   5: [B1.4] (ImplicitCastExpr, FunctionToPointerDecay, basic_ostream<char, struct std::__1::char_traits<char> > &(*)(basic_ostream<char, struct std::__1::char_traits<char> > &))
   6: [B1.3] << [B1.5] (OperatorCall)
   7: os
   8: return [B1.7];
   Preds (1): B8
   Succs (1): B0

 [B2]
   1: i
   2: [B2.1]++
   Preds (1): B3
   Succs (1): B8

 [B3]
   1: operator<<
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, class std::__1::basic_ostream<char> &(*)(class std::__1::basic_ostream<char> &(*)(class std::__1::basic_ostream<char> &)))
   3: os
   4: std::endl
   5: [B3.4] (ImplicitCastExpr, FunctionToPointerDecay, basic_ostream<char, struct std::__1::char_traits<char> > &(*)(basic_ostream<char, struct std::__1::char_traits<char> > &))
   6: [B3.3] << [B3.5] (OperatorCall)
   Preds (1): B6
   Succs (1): B2

 [B4]
   1: j
   2: [B4.1]++
   Preds (1): B5
   Succs (1): B6

 [B5]
   1: operator<<
   2: [B5.1] (ImplicitCastExpr, FunctionToPointerDecay, basic_ostream<char, struct std::__1::char_traits<char> > &(*)(basic_ostream<char, struct std::__1::char_traits<char> > &, const char *))
   3: operator<<
   4: [B5.3] (ImplicitCastExpr, FunctionToPointerDecay, class std::__1::basic_ostream<char> &(*)(double))
   5: os
   6: operator[]
   7: [B5.6] (ImplicitCastExpr, FunctionToPointerDecay, const double *(*)(int) const)
   8: m
   9: i
  10: [B5.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B5.8][[B5.10]] (OperatorCall)
  12: j
  13: [B5.12] (ImplicitCastExpr, LValueToRValue, int)
  14: [B5.11][[B5.13]]
  15: [B5.14] (ImplicitCastExpr, LValueToRValue, double)
  16: [B5.5] << [B5.15] (OperatorCall)
  17: " "
  18: [B5.17] (ImplicitCastExpr, ArrayToPointerDecay, const char *)
  19: [B5.16] << [B5.18] (OperatorCall)
   Preds (1): B6
   Succs (1): B4

 [B6]
   1: j
   2: [B6.1] (ImplicitCastExpr, LValueToRValue, int)
   3: [B6.2] (ImplicitCastExpr, IntegralCast, unsigned long)
   4: m
   5: [B6.4].cols
   6: [B6.5]()
   7: [B6.3] < [B6.6]
   T: for (...; [B6.7]; ...)
   Preds (2): B4 B7
   Succs (2): B5 B3

 [B7]
   1: 0
   2: int j = 0;
   Preds (1): B8
   Succs (1): B6

 [B8]
   1: i
   2: [B8.1] (ImplicitCastExpr, LValueToRValue, int)
   3: [B8.2] (ImplicitCastExpr, IntegralCast, unsigned long)
   4: m
   5: [B8.4].rows
   6: [B8.5]()
   7: [B8.3] < [B8.6]
   T: for (...; [B8.7]; ...)
   Preds (2): B2 B9
   Succs (2): B7 B1

 [B9]
   1: 0
   2: int i = 0;
   Preds (1): B10
   Succs (1): B8

 [B0 (EXIT)]
   Preds (1): B1

int next_a(int p, int n)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: p
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: n
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2] / [B1.4]
   6: int r = p / n;
   7: p
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: n
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B1.8] % [B1.10]
  12: int c = p % n;
  13: r
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, int)
  15: 1
  16: [B1.14] + [B1.15]
  17: n
  18: [B1.17] (ImplicitCastExpr, LValueToRValue, int)
  19: ([B1.16]) % [B1.18]
  20: n
  21: [B1.20] (ImplicitCastExpr, LValueToRValue, int)
  22: ([B1.19]) * [B1.21]
  23: c
  24: [B1.23] (ImplicitCastExpr, LValueToRValue, int)
  25: [B1.22] + [B1.24]
  26: return [B1.25];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int prev_a(int p, int n)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: p
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: n
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2] / [B1.4]
   6: int r = p / n;
   7: p
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: n
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B1.8] % [B1.10]
  12: int c = p % n;
  13: r
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, int)
  15: 1
  16: [B1.14] - [B1.15]
  17: n
  18: [B1.17] (ImplicitCastExpr, LValueToRValue, int)
  19: ([B1.16]) % [B1.18]
  20: n
  21: [B1.20] (ImplicitCastExpr, LValueToRValue, int)
  22: ([B1.19]) + [B1.21]
  23: n
  24: [B1.23] (ImplicitCastExpr, LValueToRValue, int)
  25: ([B1.22]) % [B1.24]
  26: n
  27: [B1.26] (ImplicitCastExpr, LValueToRValue, int)
  28: ([B1.25]) * [B1.27]
  29: c
  30: [B1.29] (ImplicitCastExpr, LValueToRValue, int)
  31: [B1.28] + [B1.30]
  32: return [B1.31];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int next_b(int p, int n)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: p
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: n
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2] / [B1.4]
   6: int r = p / n;
   7: p
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: n
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B1.8] % [B1.10]
  12: int c = p % n;
  13: r
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, int)
  15: n
  16: [B1.15] (ImplicitCastExpr, LValueToRValue, int)
  17: [B1.14] * [B1.16]
  18: c
  19: [B1.18] (ImplicitCastExpr, LValueToRValue, int)
  20: 1
  21: [B1.19] + [B1.20]
  22: n
  23: [B1.22] (ImplicitCastExpr, LValueToRValue, int)
  24: ([B1.21]) % [B1.23]
  25: [B1.17] + ([B1.24])
  26: return [B1.25];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int prev_b(int p, int n)
 [B2 (ENTRY)]
   Succs (1): B1

 [B1]
   1: p
   2: [B1.1] (ImplicitCastExpr, LValueToRValue, int)
   3: n
   4: [B1.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B1.2] / [B1.4]
   6: int r = p / n;
   7: p
   8: [B1.7] (ImplicitCastExpr, LValueToRValue, int)
   9: n
  10: [B1.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B1.8] % [B1.10]
  12: int c = p % n;
  13: r
  14: [B1.13] (ImplicitCastExpr, LValueToRValue, int)
  15: n
  16: [B1.15] (ImplicitCastExpr, LValueToRValue, int)
  17: [B1.14] * [B1.16]
  18: c
  19: [B1.18] (ImplicitCastExpr, LValueToRValue, int)
  20: 1
  21: [B1.19] - [B1.20]
  22: n
  23: [B1.22] (ImplicitCastExpr, LValueToRValue, int)
  24: ([B1.21]) % [B1.23]
  25: n
  26: [B1.25] (ImplicitCastExpr, LValueToRValue, int)
  27: ([B1.24]) + [B1.26]
  28: n
  29: [B1.28] (ImplicitCastExpr, LValueToRValue, int)
  30: ([B1.27]) % [B1.29]
  31: [B1.17] + ([B1.30])
  32: return [B1.31];
   Preds (1): B2
   Succs (1): B0

 [B0 (EXIT)]
   Preds (1): B1

int main(int argc, char **argv)
 [B21 (ENTRY)]
   Succs (1): B20

 [B1]
   1: data_buff
   2: [B1.1] (ImplicitCastExpr, ArrayToPointerDecay, char **)
   3: 0
   4: [B1.2][[B1.3]]
   5: [B1.4] (ImplicitCastExpr, LValueToRValue, char *)
   6: delete [] [B1.5]
   7: data_buff
   8: [B1.7] (ImplicitCastExpr, ArrayToPointerDecay, char **)
   9: 1
  10: [B1.8][[B1.9]]
  11: [B1.10] (ImplicitCastExpr, LValueToRValue, char *)
  12: delete [] [B1.11]
  13: MPI_Finalize
  14: [B1.13] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(void))
  15: [B1.14]()
  16: 0
  17: return [B1.16];
  18: [B20.38].~Matrix() (Implicit destructor)
  19: [B20.36].~Matrix() (Implicit destructor)
  20: [B20.34].~Matrix() (Implicit destructor)
   Preds (2): B2 B3
   Succs (1): B0

 [B2]
   1: sub_c
   2: [B2.1] (ImplicitCastExpr, NoOp, const class Matrix)
   3: [B2.2].serialize
   4: data_buff
   5: [B2.4] (ImplicitCastExpr, ArrayToPointerDecay, char **)
   6: 0
   7: [B2.5][[B2.6]]
   8: [B2.7] (ImplicitCastExpr, LValueToRValue, char *)
   9: [B2.3]([B2.8])
  10: MPI_Send
  11: [B2.10] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const void *, int, MPI_Datatype, int, int, MPI_Comm))
  12: data_buff
  13: [B2.12] (ImplicitCastExpr, ArrayToPointerDecay, char **)
  14: 0
  15: [B2.13][[B2.14]]
  16: [B2.15] (ImplicitCastExpr, LValueToRValue, char *)
  17: [B2.16] (ImplicitCastExpr, BitCast, const void *)
  18: sub_c
  19: [B2.18] (ImplicitCastExpr, NoOp, const class Matrix)
  20: [B2.19].get_byte_size
  21: [B2.20]()
  22: [B2.21] (ImplicitCastExpr, IntegralCast, int)
  23: 1275068685
  24: (MPI_Datatype)[B2.23] (CStyleCastExpr, NoOp, MPI_Datatype)
  25: 0
  26: C
  27: [B2.26] (ImplicitCastExpr, IntegralCast, int)
  28: 1140850688
  29: (MPI_Comm)[B2.28] (CStyleCastExpr, NoOp, MPI_Comm)
  30: [B2.11]([B2.17], [B2.22], ([B2.24]), [B2.25], [B2.27], ([B2.29]))
   Preds (1): B8
   Succs (1): B1

 [B3]
   1: operator<<
   2: [B3.1] (ImplicitCastExpr, FunctionToPointerDecay, std::ostream &(*)(std::ostream &, const class Matrix &))
   3: std::cout
   4: matrix_c
   5: [B3.4] (ImplicitCastExpr, LValueToRValue, class Matrix *)
   6: *[B3.5]
   7: [B3.6] (ImplicitCastExpr, NoOp, const class Matrix)
   8: [B3.3] << [B3.7] (OperatorCall)
   9: matrix_c
  10: [B3.9] (ImplicitCastExpr, LValueToRValue, class Matrix *)
  11: [B3.10]->~Matrix() (Implicit destructor)
  12: delete [B3.10]
   Preds (1): B6
   Succs (1): B1

 [B4]
   1: k
   2: [B4.1]++
   Preds (1): B5
   Succs (1): B6

 [B5]
   1: MPI_Recv
   2: [B5.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *))
   3: data_buff
   4: [B5.3] (ImplicitCastExpr, ArrayToPointerDecay, char **)
   5: 0
   6: [B5.4][[B5.5]]
   7: [B5.6] (ImplicitCastExpr, LValueToRValue, char *)
   8: [B5.7] (ImplicitCastExpr, BitCast, void *)
   9: sub_c
  10: [B5.9] (ImplicitCastExpr, NoOp, const class Matrix)
  11: [B5.10].get_byte_size
  12: [B5.11]()
  13: [B5.12] (ImplicitCastExpr, IntegralCast, int)
  14: 1275068685
  15: (MPI_Datatype)[B5.14] (CStyleCastExpr, NoOp, MPI_Datatype)
  16: 2
  17: -[B5.16]
  18: C
  19: [B5.18] (ImplicitCastExpr, IntegralCast, int)
  20: 1140850688
  21: (MPI_Comm)[B5.20] (CStyleCastExpr, NoOp, MPI_Comm)
  22: status
  23: &[B5.22]
  24: [B5.2]([B5.8], [B5.13], ([B5.15]), ([B5.17]), [B5.19], ([B5.21]), [B5.23])
  25: sub_c
  26: [B5.25].deserialize
  27: data_buff
  28: [B5.27] (ImplicitCastExpr, ArrayToPointerDecay, char **)
  29: 0
  30: [B5.28][[B5.29]]
  31: [B5.30] (ImplicitCastExpr, LValueToRValue, char *)
  32: [B5.31] (ImplicitCastExpr, NoOp, const char *)
  33: [B5.26]([B5.32])
  34: status
  35: [B5.34].MPI_SOURCE
  36: [B5.35] (ImplicitCastExpr, LValueToRValue, int)
  37: p
  38: [B5.37] = [B5.36]
  39: p
  40: [B5.39] (ImplicitCastExpr, LValueToRValue, int)
  41: n
  42: [B5.41] (ImplicitCastExpr, LValueToRValue, int)
  43: [B5.40] / [B5.42]
  44: i
  45: [B5.44] = [B5.43]
  46: p
  47: [B5.46] (ImplicitCastExpr, LValueToRValue, int)
  48: n
  49: [B5.48] (ImplicitCastExpr, LValueToRValue, int)
  50: [B5.47] % [B5.49]
  51: j
  52: [B5.51] = [B5.50]
  53: matrix_c
  54: [B5.53] (ImplicitCastExpr, LValueToRValue, class Matrix *)
  55: [B5.54]->insert
  56: sub_c
  57: [B5.56] (ImplicitCastExpr, NoOp, const class Matrix)
  58: j
  59: [B5.58] (ImplicitCastExpr, LValueToRValue, int)
  60: rs
  61: [B5.60] (ImplicitCastExpr, LValueToRValue, int)
  62: [B5.59] * [B5.61]
  63: i
  64: [B5.63] (ImplicitCastExpr, LValueToRValue, int)
  65: cs
  66: [B5.65] (ImplicitCastExpr, LValueToRValue, int)
  67: [B5.64] * [B5.66]
  68: [B5.55]([B5.57], [B5.62], [B5.67])
   Preds (1): B6
   Succs (1): B4

 [B6]
   1: k
   2: [B6.1] (ImplicitCastExpr, LValueToRValue, int)
   3: size
   4: [B6.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B6.2] < [B6.4]
   T: for (...; [B6.5]; ...)
   Preds (2): B4 B7
   Succs (2): B5 B3

 [B7]
   1: matrix_c
   2: [B7.1] (ImplicitCastExpr, LValueToRValue, class Matrix *)
   3: [B7.2]->insert
   4: sub_c
   5: [B7.4] (ImplicitCastExpr, NoOp, const class Matrix)
   6: 0
   7: 0
   8: [B7.3]([B7.5], [B7.6], [B7.7])
   9: matrix_c
  10: [B7.9] (ImplicitCastExpr, LValueToRValue, class Matrix *)
  11: [B7.10] (ImplicitCastExpr, NoOp, const class Matrix *)
  12: [B7.11]->rows
  13: [B7.12]()
  14: n
  15: [B7.14] (ImplicitCastExpr, LValueToRValue, int)
  16: [B7.15] (ImplicitCastExpr, IntegralCast, unsigned long)
  17: [B7.13] / [B7.16]
  18: [B7.17] (ImplicitCastExpr, IntegralCast, int)
  19: int rs = matrix_c->rows() / n;
  20: matrix_c
  21: [B7.20] (ImplicitCastExpr, LValueToRValue, class Matrix *)
  22: [B7.21] (ImplicitCastExpr, NoOp, const class Matrix *)
  23: [B7.22]->cols
  24: [B7.23]()
  25: n
  26: [B7.25] (ImplicitCastExpr, LValueToRValue, int)
  27: [B7.26] (ImplicitCastExpr, IntegralCast, unsigned long)
  28: [B7.24] / [B7.27]
  29: [B7.28] (ImplicitCastExpr, IntegralCast, int)
  30: int cs = matrix_c->cols() / n;
  31:  (CXXConstructExpr, MPI_Status)
  32: MPI_Status status;
  33: int i;
  34: int j;
  35: int p;
  36: 1
  37: int k = 1;
   Preds (1): B8
   Succs (1): B6

 [B8]
   1: rank
   2: [B8.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 0
   4: [B8.2] == [B8.3]
   T: if [B8.4]
   Preds (1): B11
   Succs (2): B7 B2

 [B9]
   1: i
   2: [B9.1]++
   Preds (1): B10
   Succs (1): B11

 [B10]
   1: sub_a
   2: [B10.1] (ImplicitCastExpr, NoOp, const class Matrix)
   3: [B10.2].serialize
   4: data_buff
   5: [B10.4] (ImplicitCastExpr, ArrayToPointerDecay, char **)
   6: 0
   7: [B10.5][[B10.6]]
   8: [B10.7] (ImplicitCastExpr, LValueToRValue, char *)
   9: [B10.3]([B10.8])
  10: MPI_Isend
  11: [B10.10] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))
  12: data_buff
  13: [B10.12] (ImplicitCastExpr, ArrayToPointerDecay, char **)
  14: 0
  15: [B10.13][[B10.14]]
  16: [B10.15] (ImplicitCastExpr, LValueToRValue, char *)
  17: [B10.16] (ImplicitCastExpr, BitCast, const void *)
  18: sub_a
  19: [B10.18] (ImplicitCastExpr, NoOp, const class Matrix)
  20: [B10.19].get_byte_size
  21: [B10.20]()
  22: [B10.21] (ImplicitCastExpr, IntegralCast, int)
  23: 1275068685
  24: (MPI_Datatype)[B10.23] (CStyleCastExpr, NoOp, MPI_Datatype)
  25: next_a
  26: [B10.25] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, int))
  27: rank
  28: [B10.27] (ImplicitCastExpr, LValueToRValue, int)
  29: n
  30: [B10.29] (ImplicitCastExpr, LValueToRValue, int)
  31: [B10.26]([B10.28], [B10.30])
  32: A
  33: [B10.32] (ImplicitCastExpr, IntegralCast, int)
  34: 1140850688
  35: (MPI_Comm)[B10.34] (CStyleCastExpr, NoOp, MPI_Comm)
  36: requests
  37: [B10.36] (ImplicitCastExpr, ArrayToPointerDecay, MPI_Request *)
  38: 0
  39: [B10.37][[B10.38]]
  40: &[B10.39]
  41: [B10.11]([B10.17], [B10.22], ([B10.24]), [B10.31], [B10.33], ([B10.35]), [B10.40])
  42: MPI_Irecv
  43: [B10.42] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))
  44: data_buff
  45: [B10.44] (ImplicitCastExpr, ArrayToPointerDecay, char **)
  46: 1
  47: [B10.45][[B10.46]]
  48: [B10.47] (ImplicitCastExpr, LValueToRValue, char *)
  49: [B10.48] (ImplicitCastExpr, BitCast, void *)
  50: sub_a
  51: [B10.50] (ImplicitCastExpr, NoOp, const class Matrix)
  52: [B10.51].get_byte_size
  53: [B10.52]()
  54: [B10.53] (ImplicitCastExpr, IntegralCast, int)
  55: 1275068685
  56: (MPI_Datatype)[B10.55] (CStyleCastExpr, NoOp, MPI_Datatype)
  57: prev_a
  58: [B10.57] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, int))
  59: rank
  60: [B10.59] (ImplicitCastExpr, LValueToRValue, int)
  61: n
  62: [B10.61] (ImplicitCastExpr, LValueToRValue, int)
  63: [B10.58]([B10.60], [B10.62])
  64: A
  65: [B10.64] (ImplicitCastExpr, IntegralCast, int)
  66: 1140850688
  67: (MPI_Comm)[B10.66] (CStyleCastExpr, NoOp, MPI_Comm)
  68: requests
  69: [B10.68] (ImplicitCastExpr, ArrayToPointerDecay, MPI_Request *)
  70: 1
  71: [B10.69][[B10.70]]
  72: &[B10.71]
  73: [B10.43]([B10.49], [B10.54], ([B10.56]), [B10.63], [B10.65], ([B10.67]), [B10.72])
  74: MPI_Waitall
  75: [B10.74] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, MPI_Request *, MPI_Status *))
  76: 2
  77: requests
  78: [B10.77] (ImplicitCastExpr, ArrayToPointerDecay, MPI_Request *)
  79: statuses
  80: [B10.79] (ImplicitCastExpr, ArrayToPointerDecay, MPI_Status *)
  81: [B10.75]([B10.76], [B10.78], [B10.80])
  82: sub_a
  83: [B10.82].deserialize
  84: data_buff
  85: [B10.84] (ImplicitCastExpr, ArrayToPointerDecay, char **)
  86: 1
  87: [B10.85][[B10.86]]
  88: [B10.87] (ImplicitCastExpr, LValueToRValue, char *)
  89: [B10.88] (ImplicitCastExpr, NoOp, const char *)
  90: [B10.83]([B10.89])
  91: sub_b
  92: [B10.91] (ImplicitCastExpr, NoOp, const class Matrix)
  93: [B10.92].serialize
  94: data_buff
  95: [B10.94] (ImplicitCastExpr, ArrayToPointerDecay, char **)
  96: 0
  97: [B10.95][[B10.96]]
  98: [B10.97] (ImplicitCastExpr, LValueToRValue, char *)
  99: [B10.93]([B10.98])
 100: MPI_Isend
 101: [B10.100] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))
 102: data_buff
 103: [B10.102] (ImplicitCastExpr, ArrayToPointerDecay, char **)
 104: 0
 105: [B10.103][[B10.104]]
 106: [B10.105] (ImplicitCastExpr, LValueToRValue, char *)
 107: [B10.106] (ImplicitCastExpr, BitCast, const void *)
 108: sub_b
 109: [B10.108] (ImplicitCastExpr, NoOp, const class Matrix)
 110: [B10.109].get_byte_size
 111: [B10.110]()
 112: [B10.111] (ImplicitCastExpr, IntegralCast, int)
 113: 1275068685
 114: (MPI_Datatype)[B10.113] (CStyleCastExpr, NoOp, MPI_Datatype)
 115: next_b
 116: [B10.115] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, int))
 117: rank
 118: [B10.117] (ImplicitCastExpr, LValueToRValue, int)
 119: n
 120: [B10.119] (ImplicitCastExpr, LValueToRValue, int)
 121: [B10.116]([B10.118], [B10.120])
 122: B
 123: [B10.122] (ImplicitCastExpr, IntegralCast, int)
 124: 1140850688
 125: (MPI_Comm)[B10.124] (CStyleCastExpr, NoOp, MPI_Comm)
 126: requests
 127: [B10.126] (ImplicitCastExpr, ArrayToPointerDecay, MPI_Request *)
 128: 0
 129: [B10.127][[B10.128]]
 130: &[B10.129]
 131: [B10.101]([B10.107], [B10.112], ([B10.114]), [B10.121], [B10.123], ([B10.125]), [B10.130])
 132: MPI_Irecv
 133: [B10.132] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Request *))
 134: data_buff
 135: [B10.134] (ImplicitCastExpr, ArrayToPointerDecay, char **)
 136: 1
 137: [B10.135][[B10.136]]
 138: [B10.137] (ImplicitCastExpr, LValueToRValue, char *)
 139: [B10.138] (ImplicitCastExpr, BitCast, void *)
 140: sub_b
 141: [B10.140] (ImplicitCastExpr, NoOp, const class Matrix)
 142: [B10.141].get_byte_size
 143: [B10.142]()
 144: [B10.143] (ImplicitCastExpr, IntegralCast, int)
 145: 1275068685
 146: (MPI_Datatype)[B10.145] (CStyleCastExpr, NoOp, MPI_Datatype)
 147: prev_b
 148: [B10.147] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, int))
 149: rank
 150: [B10.149] (ImplicitCastExpr, LValueToRValue, int)
 151: n
 152: [B10.151] (ImplicitCastExpr, LValueToRValue, int)
 153: [B10.148]([B10.150], [B10.152])
 154: B
 155: [B10.154] (ImplicitCastExpr, IntegralCast, int)
 156: 1140850688
 157: (MPI_Comm)[B10.156] (CStyleCastExpr, NoOp, MPI_Comm)
 158: requests
 159: [B10.158] (ImplicitCastExpr, ArrayToPointerDecay, MPI_Request *)
 160: 1
 161: [B10.159][[B10.160]]
 162: &[B10.161]
 163: [B10.133]([B10.139], [B10.144], ([B10.146]), [B10.153], [B10.155], ([B10.157]), [B10.162])
 164: MPI_Waitall
 165: [B10.164] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, MPI_Request *, MPI_Status *))
 166: 2
 167: requests
 168: [B10.167] (ImplicitCastExpr, ArrayToPointerDecay, MPI_Request *)
 169: statuses
 170: [B10.169] (ImplicitCastExpr, ArrayToPointerDecay, MPI_Status *)
 171: [B10.165]([B10.166], [B10.168], [B10.170])
 172: sub_b
 173: [B10.172].deserialize
 174: data_buff
 175: [B10.174] (ImplicitCastExpr, ArrayToPointerDecay, char **)
 176: 1
 177: [B10.175][[B10.176]]
 178: [B10.177] (ImplicitCastExpr, LValueToRValue, char *)
 179: [B10.178] (ImplicitCastExpr, NoOp, const char *)
 180: [B10.173]([B10.179])
 181: operator+=
 182: [B10.181] (ImplicitCastExpr, FunctionToPointerDecay, class Matrix &(*)(const class Matrix &))
 183: sub_c
 184: operator*
 185: [B10.184] (ImplicitCastExpr, FunctionToPointerDecay, class Matrix (*)(const class Matrix &))
 186: sub_a
 187: sub_b
 188: [B10.187] (ImplicitCastExpr, NoOp, const class Matrix)
 189: [B10.186] * [B10.188] (OperatorCall)
 190: [B10.189] (BindTemporary)
 191: [B10.190] (ImplicitCastExpr, NoOp, const class Matrix)
 192: [B10.191]
 193: [B10.183] += [B10.192] (OperatorCall)
   Preds (1): B11
   Succs (1): B9

 [B11]
   1: i
   2: [B11.1] (ImplicitCastExpr, LValueToRValue, int)
   3: n
   4: [B11.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B11.2] < [B11.4]
   T: for (...; [B11.5]; ...)
   Preds (2): B9 B12
   Succs (2): B10 B8

 [B12]
   1: operator=
   2: [B12.1] (ImplicitCastExpr, FunctionToPointerDecay, class Matrix &(*)(class Matrix &&) noexcept)
   3: sub_c
   4: sub_a
   5: [B12.4] (ImplicitCastExpr, NoOp, const class Matrix)
   6: [B12.5].rows
   7: [B12.6]()
   8: sub_b
   9: [B12.8] (ImplicitCastExpr, NoOp, const class Matrix)
  10: [B12.9].cols
  11: [B12.10]()
  12: 
  13: Matrix([B12.7], [B12.11]) (CXXConstructExpr, class Matrix)
  14: [B12.13] (BindTemporary)
  15: [B12.14]
  16: [B12.3] = [B12.15] (OperatorCall)
  17: operator+=
  18: [B12.17] (ImplicitCastExpr, FunctionToPointerDecay, class Matrix &(*)(const class Matrix &))
  19: sub_c
  20: operator*
  21: [B12.20] (ImplicitCastExpr, FunctionToPointerDecay, class Matrix (*)(const class Matrix &))
  22: sub_a
  23: sub_b
  24: [B12.23] (ImplicitCastExpr, NoOp, const class Matrix)
  25: [B12.22] * [B12.24] (OperatorCall)
  26: [B12.25] (BindTemporary)
  27: [B12.26] (ImplicitCastExpr, NoOp, const class Matrix)
  28: [B12.27]
  29: [B12.19] += [B12.28] (OperatorCall)
  30: MPI_Request requests[2];
  31:  (CXXConstructExpr, MPI_Status [2])
  32: MPI_Status statuses[2];
  33: 1
  34: int i = 1;
   Preds (2): B13 B14
   Succs (1): B11

 [B13]
   1:  (CXXConstructExpr, MPI_Status)
   2: MPI_Status status;
   3: MPI_Probe
   4: [B13.3] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, int, MPI_Comm, MPI_Status *))
   5: 0
   6: A
   7: [B13.6] (ImplicitCastExpr, IntegralCast, int)
   8: 1140850688
   9: (MPI_Comm)[B13.8] (CStyleCastExpr, NoOp, MPI_Comm)
  10: status
  11: &[B13.10]
  12: [B13.4]([B13.5], [B13.7], ([B13.9]), [B13.11])
  13: int msg_size;
  14: MPI_Get_count
  15: [B13.14] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const MPI_Status *, MPI_Datatype, int *))
  16: status
  17: &[B13.16]
  18: [B13.17] (ImplicitCastExpr, NoOp, const MPI_Status *)
  19: 1275068685
  20: (MPI_Datatype)[B13.19] (CStyleCastExpr, NoOp, MPI_Datatype)
  21: msg_size
  22: &[B13.21]
  23: [B13.15]([B13.18], ([B13.20]), [B13.22])
  24: msg_size
  25: [B13.24] (ImplicitCastExpr, LValueToRValue, int)
  26: CFGNewAllocator(char *)
  27: new char [[B13.25]]
  28: data_buff
  29: [B13.28] (ImplicitCastExpr, ArrayToPointerDecay, char **)
  30: 0
  31: [B13.29][[B13.30]]
  32: [B13.31] = [B13.27]
  33: MPI_Recv
  34: [B13.33] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *))
  35: data_buff
  36: [B13.35] (ImplicitCastExpr, ArrayToPointerDecay, char **)
  37: 0
  38: [B13.36][[B13.37]]
  39: [B13.38] (ImplicitCastExpr, LValueToRValue, char *)
  40: [B13.39] (ImplicitCastExpr, BitCast, void *)
  41: msg_size
  42: [B13.41] (ImplicitCastExpr, LValueToRValue, int)
  43: 1275068685
  44: (MPI_Datatype)[B13.43] (CStyleCastExpr, NoOp, MPI_Datatype)
  45: 0
  46: A
  47: [B13.46] (ImplicitCastExpr, IntegralCast, int)
  48: 1140850688
  49: (MPI_Comm)[B13.48] (CStyleCastExpr, NoOp, MPI_Comm)
  50: 1
  51: (MPI_Status *)[B13.50] (CStyleCastExpr, IntegralToPointer, MPI_Status *)
  52: [B13.34]([B13.40], [B13.42], ([B13.44]), [B13.45], [B13.47], ([B13.49]), [B13.51])
  53: sub_a
  54: [B13.53].deserialize
  55: data_buff
  56: [B13.55] (ImplicitCastExpr, ArrayToPointerDecay, char **)
  57: 0
  58: [B13.56][[B13.57]]
  59: [B13.58] (ImplicitCastExpr, LValueToRValue, char *)
  60: [B13.59] (ImplicitCastExpr, NoOp, const char *)
  61: [B13.54]([B13.60])
  62: MPI_Probe
  63: [B13.62] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int, int, MPI_Comm, MPI_Status *))
  64: 0
  65: B
  66: [B13.65] (ImplicitCastExpr, IntegralCast, int)
  67: 1140850688
  68: (MPI_Comm)[B13.67] (CStyleCastExpr, NoOp, MPI_Comm)
  69: status
  70: &[B13.69]
  71: [B13.63]([B13.64], [B13.66], ([B13.68]), [B13.70])
  72: MPI_Get_count
  73: [B13.72] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const MPI_Status *, MPI_Datatype, int *))
  74: status
  75: &[B13.74]
  76: [B13.75] (ImplicitCastExpr, NoOp, const MPI_Status *)
  77: 1275068685
  78: (MPI_Datatype)[B13.77] (CStyleCastExpr, NoOp, MPI_Datatype)
  79: msg_size
  80: &[B13.79]
  81: [B13.73]([B13.76], ([B13.78]), [B13.80])
  82: msg_size
  83: [B13.82] (ImplicitCastExpr, LValueToRValue, int)
  84: CFGNewAllocator(char *)
  85: new char [[B13.83]]
  86: data_buff
  87: [B13.86] (ImplicitCastExpr, ArrayToPointerDecay, char **)
  88: 1
  89: [B13.87][[B13.88]]
  90: [B13.89] = [B13.85]
  91: MPI_Recv
  92: [B13.91] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(void *, int, MPI_Datatype, int, int, MPI_Comm, MPI_Status *))
  93: data_buff
  94: [B13.93] (ImplicitCastExpr, ArrayToPointerDecay, char **)
  95: 1
  96: [B13.94][[B13.95]]
  97: [B13.96] (ImplicitCastExpr, LValueToRValue, char *)
  98: [B13.97] (ImplicitCastExpr, BitCast, void *)
  99: msg_size
 100: [B13.99] (ImplicitCastExpr, LValueToRValue, int)
 101: 1275068685
 102: (MPI_Datatype)[B13.101] (CStyleCastExpr, NoOp, MPI_Datatype)
 103: 0
 104: B
 105: [B13.104] (ImplicitCastExpr, IntegralCast, int)
 106: 1140850688
 107: (MPI_Comm)[B13.106] (CStyleCastExpr, NoOp, MPI_Comm)
 108: 1
 109: (MPI_Status *)[B13.108] (CStyleCastExpr, IntegralToPointer, MPI_Status *)
 110: [B13.92]([B13.98], [B13.100], ([B13.102]), [B13.103], [B13.105], ([B13.107]), [B13.109])
 111: sub_b
 112: [B13.111].deserialize
 113: data_buff
 114: [B13.113] (ImplicitCastExpr, ArrayToPointerDecay, char **)
 115: 1
 116: [B13.114][[B13.115]]
 117: [B13.116] (ImplicitCastExpr, LValueToRValue, char *)
 118: [B13.117] (ImplicitCastExpr, NoOp, const char *)
 119: [B13.112]([B13.118])
   Preds (1): B20
   Succs (1): B12

 [B14]
   1: [B19.82].~Matrix() (Implicit destructor)
   2: [B19.41].~Matrix() (Implicit destructor)
   Preds (1): B18
   Succs (1): B12

 [B15]
   1: p
   2: [B15.1]--
   Preds (2): B16 B17
   Succs (1): B18

 [B16]
   1: sub_a
   2: [B16.1] (ImplicitCastExpr, NoOp, const class Matrix)
   3: [B16.2].get_byte_size
   4: [B16.3]()
   5: CFGNewAllocator(char *)
   6: new char [[B16.4]]
   7: data_buff
   8: [B16.7] (ImplicitCastExpr, ArrayToPointerDecay, char **)
   9: 0
  10: [B16.8][[B16.9]]
  11: [B16.10] = [B16.6]
  12: sub_a
  13: [B16.12] (ImplicitCastExpr, NoOp, const class Matrix)
  14: [B16.13].serialize
  15: data_buff
  16: [B16.15] (ImplicitCastExpr, ArrayToPointerDecay, char **)
  17: 0
  18: [B16.16][[B16.17]]
  19: [B16.18] (ImplicitCastExpr, LValueToRValue, char *)
  20: [B16.14]([B16.19])
  21: MPI_Send
  22: [B16.21] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const void *, int, MPI_Datatype, int, int, MPI_Comm))
  23: data_buff
  24: [B16.23] (ImplicitCastExpr, ArrayToPointerDecay, char **)
  25: 0
  26: [B16.24][[B16.25]]
  27: [B16.26] (ImplicitCastExpr, LValueToRValue, char *)
  28: [B16.27] (ImplicitCastExpr, BitCast, const void *)
  29: sub_a
  30: [B16.29] (ImplicitCastExpr, NoOp, const class Matrix)
  31: [B16.30].get_byte_size
  32: [B16.31]()
  33: [B16.32] (ImplicitCastExpr, IntegralCast, int)
  34: 1275068685
  35: (MPI_Datatype)[B16.34] (CStyleCastExpr, NoOp, MPI_Datatype)
  36: p
  37: [B16.36] (ImplicitCastExpr, LValueToRValue, int)
  38: A
  39: [B16.38] (ImplicitCastExpr, IntegralCast, int)
  40: 1140850688
  41: (MPI_Comm)[B16.40] (CStyleCastExpr, NoOp, MPI_Comm)
  42: [B16.22]([B16.28], [B16.33], ([B16.35]), [B16.37], [B16.39], ([B16.41]))
  43: sub_b
  44: [B16.43] (ImplicitCastExpr, NoOp, const class Matrix)
  45: [B16.44].get_byte_size
  46: [B16.45]()
  47: CFGNewAllocator(char *)
  48: new char [[B16.46]]
  49: data_buff
  50: [B16.49] (ImplicitCastExpr, ArrayToPointerDecay, char **)
  51: 1
  52: [B16.50][[B16.51]]
  53: [B16.52] = [B16.48]
  54: sub_b
  55: [B16.54] (ImplicitCastExpr, NoOp, const class Matrix)
  56: [B16.55].serialize
  57: data_buff
  58: [B16.57] (ImplicitCastExpr, ArrayToPointerDecay, char **)
  59: 1
  60: [B16.58][[B16.59]]
  61: [B16.60] (ImplicitCastExpr, LValueToRValue, char *)
  62: [B16.56]([B16.61])
  63: MPI_Send
  64: [B16.63] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(const void *, int, MPI_Datatype, int, int, MPI_Comm))
  65: data_buff
  66: [B16.65] (ImplicitCastExpr, ArrayToPointerDecay, char **)
  67: 1
  68: [B16.66][[B16.67]]
  69: [B16.68] (ImplicitCastExpr, LValueToRValue, char *)
  70: [B16.69] (ImplicitCastExpr, BitCast, const void *)
  71: sub_b
  72: [B16.71] (ImplicitCastExpr, NoOp, const class Matrix)
  73: [B16.72].get_byte_size
  74: [B16.73]()
  75: [B16.74] (ImplicitCastExpr, IntegralCast, int)
  76: 1275068685
  77: (MPI_Datatype)[B16.76] (CStyleCastExpr, NoOp, MPI_Datatype)
  78: p
  79: [B16.78] (ImplicitCastExpr, LValueToRValue, int)
  80: B
  81: [B16.80] (ImplicitCastExpr, IntegralCast, int)
  82: 1140850688
  83: (MPI_Comm)[B16.82] (CStyleCastExpr, NoOp, MPI_Comm)
  84: [B16.64]([B16.70], [B16.75], ([B16.77]), [B16.79], [B16.81], ([B16.83]))
   Preds (1): B17
   Succs (1): B15

 [B17]
   1: p
   2: [B17.1] (ImplicitCastExpr, LValueToRValue, int)
   3: n
   4: [B17.3] (ImplicitCastExpr, LValueToRValue, int)
   5: [B17.2] / [B17.4]
   6: int i = p / n;
   7: p
   8: [B17.7] (ImplicitCastExpr, LValueToRValue, int)
   9: n
  10: [B17.9] (ImplicitCastExpr, LValueToRValue, int)
  11: [B17.8] % [B17.10]
  12: int j = p % n;
  13: ceil
  14: [B17.13] (ImplicitCastExpr, FunctionToPointerDecay, double (*)(double) throw())
  15: 2
  16: n
  17: [B17.16] (ImplicitCastExpr, LValueToRValue, int)
  18: [B17.15] * [B17.17]
  19: 1
  20: [B17.18] - [B17.19]
  21: i
  22: [B17.21] (ImplicitCastExpr, LValueToRValue, int)
  23: [B17.20] - [B17.22]
  24: j
  25: [B17.24] (ImplicitCastExpr, LValueToRValue, int)
  26: [B17.23] - [B17.25]
  27: n
  28: [B17.27] (ImplicitCastExpr, LValueToRValue, int)
  29: ([B17.26]) % [B17.28]
  30: [B17.29] (ImplicitCastExpr, IntegralToFloating, double)
  31: [B17.14]([B17.30])
  32: [B17.31] (ImplicitCastExpr, FloatingToIntegral, int)
  33: int k = ceil((2 * n - 1 - i - j) % n);
  34: matrix_a
  35: [B17.34] (ImplicitCastExpr, NoOp, const class Matrix)
  36: [B17.35].rows
  37: [B17.36]()
  38: n
  39: [B17.38] (ImplicitCastExpr, LValueToRValue, int)
  40: [B17.39] (ImplicitCastExpr, IntegralCast, unsigned long)
  41: [B17.37] / [B17.40]
  42: [B17.41] (ImplicitCastExpr, IntegralCast, int)
  43: int sub_rows = matrix_a.rows() / n;
  44: matrix_a
  45: [B17.44] (ImplicitCastExpr, NoOp, const class Matrix)
  46: [B17.45].cols
  47: [B17.46]()
  48: n
  49: [B17.48] (ImplicitCastExpr, LValueToRValue, int)
  50: [B17.49] (ImplicitCastExpr, IntegralCast, unsigned long)
  51: [B17.47] / [B17.50]
  52: [B17.51] (ImplicitCastExpr, IntegralCast, int)
  53: int sub_cols = matrix_a.cols() / n;
  54: operator=
  55: [B17.54] (ImplicitCastExpr, FunctionToPointerDecay, class Matrix &(*)(class Matrix &&) noexcept)
  56: sub_a
  57: matrix_a
  58: [B17.57] (ImplicitCastExpr, NoOp, const class Matrix)
  59: [B17.58].extract_n
  60: j
  61: [B17.60] (ImplicitCastExpr, LValueToRValue, int)
  62: sub_rows
  63: [B17.62] (ImplicitCastExpr, LValueToRValue, int)
  64: [B17.61] * [B17.63]
  65: k
  66: [B17.65] (ImplicitCastExpr, LValueToRValue, int)
  67: sub_rows
  68: [B17.67] (ImplicitCastExpr, LValueToRValue, int)
  69: [B17.66] * [B17.68]
  70: sub_rows
  71: [B17.70] (ImplicitCastExpr, LValueToRValue, int)
  72: sub_cols
  73: [B17.72] (ImplicitCastExpr, LValueToRValue, int)
  74: [B17.59]([B17.64], [B17.69], [B17.71], [B17.73])
  75: [B17.74] (BindTemporary)
  76: [B17.75]
  77: [B17.56] = [B17.76] (OperatorCall)
  78: matrix_b
  79: [B17.78] (ImplicitCastExpr, NoOp, const class Matrix)
  80: [B17.79].rows
  81: [B17.80]()
  82: n
  83: [B17.82] (ImplicitCastExpr, LValueToRValue, int)
  84: [B17.83] (ImplicitCastExpr, IntegralCast, unsigned long)
  85: [B17.81] / [B17.84]
  86: [B17.85] (ImplicitCastExpr, IntegralCast, int)
  87: sub_rows
  88: [B17.87] = [B17.86]
  89: matrix_b
  90: [B17.89] (ImplicitCastExpr, NoOp, const class Matrix)
  91: [B17.90].cols
  92: [B17.91]()
  93: n
  94: [B17.93] (ImplicitCastExpr, LValueToRValue, int)
  95: [B17.94] (ImplicitCastExpr, IntegralCast, unsigned long)
  96: [B17.92] / [B17.95]
  97: [B17.96] (ImplicitCastExpr, IntegralCast, int)
  98: sub_cols
  99: [B17.98] = [B17.97]
 100: operator=
 101: [B17.100] (ImplicitCastExpr, FunctionToPointerDecay, class Matrix &(*)(class Matrix &&) noexcept)
 102: sub_b
 103: matrix_b
 104: [B17.103] (ImplicitCastExpr, NoOp, const class Matrix)
 105: [B17.104].extract_n
 106: k
 107: [B17.106] (ImplicitCastExpr, LValueToRValue, int)
 108: sub_rows
 109: [B17.108] (ImplicitCastExpr, LValueToRValue, int)
 110: [B17.107] * [B17.109]
 111: i
 112: [B17.111] (ImplicitCastExpr, LValueToRValue, int)
 113: sub_rows
 114: [B17.113] (ImplicitCastExpr, LValueToRValue, int)
 115: [B17.112] * [B17.114]
 116: sub_rows
 117: [B17.116] (ImplicitCastExpr, LValueToRValue, int)
 118: sub_cols
 119: [B17.118] (ImplicitCastExpr, LValueToRValue, int)
 120: [B17.105]([B17.110], [B17.115], [B17.117], [B17.119])
 121: [B17.120] (BindTemporary)
 122: [B17.121]
 123: [B17.102] = [B17.122] (OperatorCall)
 124: p
 125: [B17.124] (ImplicitCastExpr, LValueToRValue, int)
 126: 0
 127: [B17.125] > [B17.126]
   T: if [B17.127]
   Preds (1): B18
   Succs (2): B16 B15

 [B18]
   1: p
   2: [B18.1] (ImplicitCastExpr, LValueToRValue, int)
   3: 0
   4: [B18.2] >= [B18.3]
   T: for (...; [B18.4]; ...)
   Preds (2): B15 B19
   Succs (2): B17 B14

 [B19]
   1: 4
   2: [B19.1] (ImplicitCastExpr, IntegralCast, size_t)
   3: 4
   4: [B19.3] (ImplicitCastExpr, IntegralCast, size_t)
   5: 1
   6: [B19.5] (ImplicitCastExpr, IntegralToFloating, const double)
   7: 1
   8: [B19.7] (ImplicitCastExpr, IntegralToFloating, const double)
   9: 2
  10: [B19.9] (ImplicitCastExpr, IntegralToFloating, const double)
  11: 2
  12: [B19.11] (ImplicitCastExpr, IntegralToFloating, const double)
  13: 1
  14: [B19.13] (ImplicitCastExpr, IntegralToFloating, const double)
  15: 1
  16: [B19.15] (ImplicitCastExpr, IntegralToFloating, const double)
  17: 2
  18: [B19.17] (ImplicitCastExpr, IntegralToFloating, const double)
  19: 2
  20: [B19.19] (ImplicitCastExpr, IntegralToFloating, const double)
  21: 3
  22: [B19.21] (ImplicitCastExpr, IntegralToFloating, const double)
  23: 3
  24: [B19.23] (ImplicitCastExpr, IntegralToFloating, const double)
  25: 4
  26: [B19.25] (ImplicitCastExpr, IntegralToFloating, const double)
  27: 4
  28: [B19.27] (ImplicitCastExpr, IntegralToFloating, const double)
  29: 3
  30: [B19.29] (ImplicitCastExpr, IntegralToFloating, const double)
  31: 3
  32: [B19.31] (ImplicitCastExpr, IntegralToFloating, const double)
  33: 4
  34: [B19.33] (ImplicitCastExpr, IntegralToFloating, const double)
  35: 4
  36: [B19.35] (ImplicitCastExpr, IntegralToFloating, const double)
  37: {[B19.5], [B19.7], [B19.9], [B19.11], [B19.13], [B19.15], [B19.17], [B19.19], [B19.21], [B19.23], [B19.25], [B19.27], [B19.29], [B19.31], [B19.33], [B19.35]}
  38: [B19.37]
  39: [B19.38]
  40: [B19.2], [B19.4], [B19.39] (CXXConstructExpr, class Matrix)
  41: Matrix matrix_a(4, 4, {1, 1, 2, 2, 1, 1, 2, 2, 3, 3, 4, 4, 3, 3, 4, 4});
  42: 4
  43: [B19.42] (ImplicitCastExpr, IntegralCast, size_t)
  44: 4
  45: [B19.44] (ImplicitCastExpr, IntegralCast, size_t)
  46: 4
  47: [B19.46] (ImplicitCastExpr, IntegralToFloating, const double)
  48: 4
  49: [B19.48] (ImplicitCastExpr, IntegralToFloating, const double)
  50: 2
  51: [B19.50] (ImplicitCastExpr, IntegralToFloating, const double)
  52: 2
  53: [B19.52] (ImplicitCastExpr, IntegralToFloating, const double)
  54: 4
  55: [B19.54] (ImplicitCastExpr, IntegralToFloating, const double)
  56: 4
  57: [B19.56] (ImplicitCastExpr, IntegralToFloating, const double)
  58: 2
  59: [B19.58] (ImplicitCastExpr, IntegralToFloating, const double)
  60: 2
  61: [B19.60] (ImplicitCastExpr, IntegralToFloating, const double)
  62: 3
  63: [B19.62] (ImplicitCastExpr, IntegralToFloating, const double)
  64: 3
  65: [B19.64] (ImplicitCastExpr, IntegralToFloating, const double)
  66: 1
  67: [B19.66] (ImplicitCastExpr, IntegralToFloating, const double)
  68: 1
  69: [B19.68] (ImplicitCastExpr, IntegralToFloating, const double)
  70: 3
  71: [B19.70] (ImplicitCastExpr, IntegralToFloating, const double)
  72: 3
  73: [B19.72] (ImplicitCastExpr, IntegralToFloating, const double)
  74: 1
  75: [B19.74] (ImplicitCastExpr, IntegralToFloating, const double)
  76: 1
  77: [B19.76] (ImplicitCastExpr, IntegralToFloating, const double)
  78: {[B19.46], [B19.48], [B19.50], [B19.52], [B19.54], [B19.56], [B19.58], [B19.60], [B19.62], [B19.64], [B19.66], [B19.68], [B19.70], [B19.72], [B19.74], [B19.76]}
  79: [B19.78]
  80: [B19.79]
  81: [B19.43], [B19.45], [B19.80] (CXXConstructExpr, class Matrix)
  82: Matrix matrix_b(4, 4, {4, 4, 2, 2, 4, 4, 2, 2, 3, 3, 1, 1, 3, 3, 1, 1});
  83: CFGNewAllocator(Matrix *)
  84: matrix_a
  85: [B19.84] (ImplicitCastExpr, NoOp, const class Matrix)
  86: [B19.85].rows
  87: [B19.86]()
  88: matrix_b
  89: [B19.88] (ImplicitCastExpr, NoOp, const class Matrix)
  90: [B19.89].cols
  91: [B19.90]()
  92: 
  93: [B19.87], [B19.91] (CXXConstructExpr, class Matrix)
  94: new Matrix([B19.93])
  95: matrix_c
  96: [B19.95] = [B19.94]
  97: size
  98: [B19.97] (ImplicitCastExpr, LValueToRValue, int)
  99: 1
 100: [B19.98] - [B19.99]
 101: int p = size - 1;
   Preds (1): B20
   Succs (1): B18

 [B20]
   1: MPI_Init
   2: [B20.1] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(int *, char ***))
   3: argc
   4: &[B20.3]
   5: argv
   6: &[B20.5]
   7: [B20.2]([B20.4], [B20.6])
   8: int rank;
   9: int size;
  10: MPI_Comm_rank
  11: [B20.10] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, int *))
  12: 1140850688
  13: (MPI_Comm)[B20.12] (CStyleCastExpr, NoOp, MPI_Comm)
  14: rank
  15: &[B20.14]
  16: [B20.11](([B20.13]), [B20.15])
  17: MPI_Comm_size
  18: [B20.17] (ImplicitCastExpr, FunctionToPointerDecay, int (*)(MPI_Comm, int *))
  19: 1140850688
  20: (MPI_Comm)[B20.19] (CStyleCastExpr, NoOp, MPI_Comm)
  21: size
  22: &[B20.21]
  23: [B20.18](([B20.20]), [B20.22])
  24: sqrt
  25: [B20.24] (ImplicitCastExpr, FunctionToPointerDecay, double (*)(double) throw())
  26: size
  27: [B20.26] (ImplicitCastExpr, LValueToRValue, int)
  28: [B20.27] (ImplicitCastExpr, IntegralToFloating, double)
  29: [B20.25]([B20.28])
  30: [B20.29] (ImplicitCastExpr, FloatingToIntegral, int)
  31: int n = sqrt(size);
  32: Matrix *matrix_c;
  33:  (CXXConstructExpr, class Matrix)
  34: Matrix sub_a;
  35:  (CXXConstructExpr, class Matrix)
  36: Matrix sub_b;
  37:  (CXXConstructExpr, class Matrix)
  38: Matrix sub_c;
  39: char *data_buff[2];
  40: rank
  41: [B20.40] (ImplicitCastExpr, LValueToRValue, int)
  42: 0
  43: [B20.41] == [B20.42]
   T: if [B20.43]
   Preds (1): B21
   Succs (2): B19 B13

 [B0 (EXIT)]
   Preds (1): B1

